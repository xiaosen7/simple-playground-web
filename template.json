{"files":{"/tsconfig.json":"{\n  \"compilerOptions\": {\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"react\",\n    \"declaration\": true,\n    \"emitDeclarationOnly\": true,\n    \"outDir\": \"dist\"\n  },\n  \"include\": [\"src\"]\n}\n","/package.json":"{\n  \"name\": \"template\",\n  \"private\": true,\n  \"description\": \"Template of website\",\n  \"dependencies\": {\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"@xstate/react\": \"^4.1.1\",\n    \"esbuild\": \"^0.21.3\",\n    \"import-meta-resolve\": \"^4.1.0\",\n    \"react\": \"^18\",\n    \"react-dom\": \"^18\",\n    \"xstate\": \"^5.12.0\"\n  },\n  \"version\": \"0.0.1\",\n  \"main\": \"src/index.ts\",\n  \"devDependencies\": {\n    \"typescript\": \"^5.4.5\"\n  }\n}\n","/README.md":"# Template\n","/node_modules/@types/prop-types/index.d.ts":"export type ReactComponentLike =\n    | string\n    | ((props: any, context?: any) => any)\n    | (new(props: any, context?: any) => any);\n\nexport interface ReactElementLike {\n    type: ReactComponentLike;\n    props: any;\n    key: string | null;\n}\n\nexport interface ReactNodeArray extends Iterable<ReactNodeLike> {}\n\nexport type ReactNodeLike =\n    | ReactElementLike\n    | ReactNodeArray\n    | string\n    | number\n    | boolean\n    | null\n    | undefined;\n\nexport const nominalTypeHack: unique symbol;\n\nexport type IsOptional<T> = undefined extends T ? true : false;\n\nexport type RequiredKeys<V> = {\n    [K in keyof V]-?: Exclude<V[K], undefined> extends Validator<infer T> ? IsOptional<T> extends true ? never : K\n        : never;\n}[keyof V];\nexport type OptionalKeys<V> = Exclude<keyof V, RequiredKeys<V>>;\nexport type InferPropsInner<V> = { [K in keyof V]-?: InferType<V[K]> };\n\nexport interface Validator<T> {\n    (\n        props: { [key: string]: any },\n        propName: string,\n        componentName: string,\n        location: string,\n        propFullName: string,\n    ): Error | null;\n    [nominalTypeHack]?: {\n        type: T;\n    } | undefined;\n}\n\nexport interface Requireable<T> extends Validator<T | undefined | null> {\n    isRequired: Validator<NonNullable<T>>;\n}\n\nexport type ValidationMap<T> = { [K in keyof T]?: Validator<T[K]> };\n\n/**\n * Like {@link ValidationMap} but treats `undefined`, `null` and optional properties the same.\n * This type is only added as a migration path in React 19 where this type was removed from React.\n * Runtime and compile time types would mismatch since you could see `undefined` at runtime when your types don't expect this type.\n */\nexport type WeakValidationMap<T> = {\n    [K in keyof T]?: null extends T[K] ? Validator<T[K] | null | undefined>\n        : undefined extends T[K] ? Validator<T[K] | null | undefined>\n        : Validator<T[K]>;\n};\n\nexport type InferType<V> = V extends Validator<infer T> ? T : any;\nexport type InferProps<V> =\n    & InferPropsInner<Pick<V, RequiredKeys<V>>>\n    & Partial<InferPropsInner<Pick<V, OptionalKeys<V>>>>;\n\nexport const any: Requireable<any>;\nexport const array: Requireable<any[]>;\nexport const bool: Requireable<boolean>;\nexport const func: Requireable<(...args: any[]) => any>;\nexport const number: Requireable<number>;\nexport const object: Requireable<object>;\nexport const string: Requireable<string>;\nexport const node: Requireable<ReactNodeLike>;\nexport const element: Requireable<ReactElementLike>;\nexport const symbol: Requireable<symbol>;\nexport const elementType: Requireable<ReactComponentLike>;\nexport function instanceOf<T>(expectedClass: new(...args: any[]) => T): Requireable<T>;\nexport function oneOf<T>(types: readonly T[]): Requireable<T>;\nexport function oneOfType<T extends Validator<any>>(types: T[]): Requireable<NonNullable<InferType<T>>>;\nexport function arrayOf<T>(type: Validator<T>): Requireable<T[]>;\nexport function objectOf<T>(type: Validator<T>): Requireable<{ [K in keyof any]: T }>;\nexport function shape<P extends ValidationMap<any>>(type: P): Requireable<InferProps<P>>;\nexport function exact<P extends ValidationMap<any>>(type: P): Requireable<Required<InferProps<P>>>;\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param typeSpecs Map of name to a ReactPropType\n * @param values Runtime values that need to be type-checked\n * @param location e.g. \"prop\", \"context\", \"child context\"\n * @param componentName Name of the component for error messages\n * @param getStack Returns the component stack\n */\nexport function checkPropTypes(\n    typeSpecs: any,\n    values: any,\n    location: string,\n    componentName: string,\n    getStack?: () => any,\n): void;\n\n/**\n * Only available if NODE_ENV=production\n */\nexport function resetWarningCache(): void;\n","/node_modules/@types/react/global.d.ts":"/*\nReact projects that don't include the DOM library need these interfaces to compile.\nReact Native applications use React, but there is no DOM available. The JavaScript runtime\nis ES6/ES2015 only. These definitions allow such projects to compile with only `--lib ES6`.\n\nWarning: all of these interfaces are empty. If you want type definitions for various properties\n(such as HTMLInputElement.prototype.value), you need to add `--lib DOM` (via command line or tsconfig.json).\n*/\n\ninterface Event {}\ninterface AnimationEvent extends Event {}\ninterface ClipboardEvent extends Event {}\ninterface CompositionEvent extends Event {}\ninterface DragEvent extends Event {}\ninterface FocusEvent extends Event {}\ninterface KeyboardEvent extends Event {}\ninterface MouseEvent extends Event {}\ninterface TouchEvent extends Event {}\ninterface PointerEvent extends Event {}\ninterface TransitionEvent extends Event {}\ninterface UIEvent extends Event {}\ninterface WheelEvent extends Event {}\n\ninterface EventTarget {}\ninterface Document {}\ninterface DataTransfer {}\ninterface StyleMedia {}\n\ninterface Element {}\ninterface DocumentFragment {}\n\ninterface HTMLElement extends Element {}\ninterface HTMLAnchorElement extends HTMLElement {}\ninterface HTMLAreaElement extends HTMLElement {}\ninterface HTMLAudioElement extends HTMLElement {}\ninterface HTMLBaseElement extends HTMLElement {}\ninterface HTMLBodyElement extends HTMLElement {}\ninterface HTMLBRElement extends HTMLElement {}\ninterface HTMLButtonElement extends HTMLElement {}\ninterface HTMLCanvasElement extends HTMLElement {}\ninterface HTMLDataElement extends HTMLElement {}\ninterface HTMLDataListElement extends HTMLElement {}\ninterface HTMLDetailsElement extends HTMLElement {}\ninterface HTMLDialogElement extends HTMLElement {}\ninterface HTMLDivElement extends HTMLElement {}\ninterface HTMLDListElement extends HTMLElement {}\ninterface HTMLEmbedElement extends HTMLElement {}\ninterface HTMLFieldSetElement extends HTMLElement {}\ninterface HTMLFormElement extends HTMLElement {}\ninterface HTMLHeadingElement extends HTMLElement {}\ninterface HTMLHeadElement extends HTMLElement {}\ninterface HTMLHRElement extends HTMLElement {}\ninterface HTMLHtmlElement extends HTMLElement {}\ninterface HTMLIFrameElement extends HTMLElement {}\ninterface HTMLImageElement extends HTMLElement {}\ninterface HTMLInputElement extends HTMLElement {}\ninterface HTMLModElement extends HTMLElement {}\ninterface HTMLLabelElement extends HTMLElement {}\ninterface HTMLLegendElement extends HTMLElement {}\ninterface HTMLLIElement extends HTMLElement {}\ninterface HTMLLinkElement extends HTMLElement {}\ninterface HTMLMapElement extends HTMLElement {}\ninterface HTMLMetaElement extends HTMLElement {}\ninterface HTMLMeterElement extends HTMLElement {}\ninterface HTMLObjectElement extends HTMLElement {}\ninterface HTMLOListElement extends HTMLElement {}\ninterface HTMLOptGroupElement extends HTMLElement {}\ninterface HTMLOptionElement extends HTMLElement {}\ninterface HTMLOutputElement extends HTMLElement {}\ninterface HTMLParagraphElement extends HTMLElement {}\ninterface HTMLParamElement extends HTMLElement {}\ninterface HTMLPreElement extends HTMLElement {}\ninterface HTMLProgressElement extends HTMLElement {}\ninterface HTMLQuoteElement extends HTMLElement {}\ninterface HTMLSlotElement extends HTMLElement {}\ninterface HTMLScriptElement extends HTMLElement {}\ninterface HTMLSelectElement extends HTMLElement {}\ninterface HTMLSourceElement extends HTMLElement {}\ninterface HTMLSpanElement extends HTMLElement {}\ninterface HTMLStyleElement extends HTMLElement {}\ninterface HTMLTableElement extends HTMLElement {}\ninterface HTMLTableColElement extends HTMLElement {}\ninterface HTMLTableDataCellElement extends HTMLElement {}\ninterface HTMLTableHeaderCellElement extends HTMLElement {}\ninterface HTMLTableRowElement extends HTMLElement {}\ninterface HTMLTableSectionElement extends HTMLElement {}\ninterface HTMLTemplateElement extends HTMLElement {}\ninterface HTMLTextAreaElement extends HTMLElement {}\ninterface HTMLTimeElement extends HTMLElement {}\ninterface HTMLTitleElement extends HTMLElement {}\ninterface HTMLTrackElement extends HTMLElement {}\ninterface HTMLUListElement extends HTMLElement {}\ninterface HTMLVideoElement extends HTMLElement {}\ninterface HTMLWebViewElement extends HTMLElement {}\n\ninterface SVGElement extends Element {}\ninterface SVGSVGElement extends SVGElement {}\ninterface SVGCircleElement extends SVGElement {}\ninterface SVGClipPathElement extends SVGElement {}\ninterface SVGDefsElement extends SVGElement {}\ninterface SVGDescElement extends SVGElement {}\ninterface SVGEllipseElement extends SVGElement {}\ninterface SVGFEBlendElement extends SVGElement {}\ninterface SVGFEColorMatrixElement extends SVGElement {}\ninterface SVGFEComponentTransferElement extends SVGElement {}\ninterface SVGFECompositeElement extends SVGElement {}\ninterface SVGFEConvolveMatrixElement extends SVGElement {}\ninterface SVGFEDiffuseLightingElement extends SVGElement {}\ninterface SVGFEDisplacementMapElement extends SVGElement {}\ninterface SVGFEDistantLightElement extends SVGElement {}\ninterface SVGFEDropShadowElement extends SVGElement {}\ninterface SVGFEFloodElement extends SVGElement {}\ninterface SVGFEFuncAElement extends SVGElement {}\ninterface SVGFEFuncBElement extends SVGElement {}\ninterface SVGFEFuncGElement extends SVGElement {}\ninterface SVGFEFuncRElement extends SVGElement {}\ninterface SVGFEGaussianBlurElement extends SVGElement {}\ninterface SVGFEImageElement extends SVGElement {}\ninterface SVGFEMergeElement extends SVGElement {}\ninterface SVGFEMergeNodeElement extends SVGElement {}\ninterface SVGFEMorphologyElement extends SVGElement {}\ninterface SVGFEOffsetElement extends SVGElement {}\ninterface SVGFEPointLightElement extends SVGElement {}\ninterface SVGFESpecularLightingElement extends SVGElement {}\ninterface SVGFESpotLightElement extends SVGElement {}\ninterface SVGFETileElement extends SVGElement {}\ninterface SVGFETurbulenceElement extends SVGElement {}\ninterface SVGFilterElement extends SVGElement {}\ninterface SVGForeignObjectElement extends SVGElement {}\ninterface SVGGElement extends SVGElement {}\ninterface SVGImageElement extends SVGElement {}\ninterface SVGLineElement extends SVGElement {}\ninterface SVGLinearGradientElement extends SVGElement {}\ninterface SVGMarkerElement extends SVGElement {}\ninterface SVGMaskElement extends SVGElement {}\ninterface SVGMetadataElement extends SVGElement {}\ninterface SVGPathElement extends SVGElement {}\ninterface SVGPatternElement extends SVGElement {}\ninterface SVGPolygonElement extends SVGElement {}\ninterface SVGPolylineElement extends SVGElement {}\ninterface SVGRadialGradientElement extends SVGElement {}\ninterface SVGRectElement extends SVGElement {}\ninterface SVGSetElement extends SVGElement {}\ninterface SVGStopElement extends SVGElement {}\ninterface SVGSwitchElement extends SVGElement {}\ninterface SVGSymbolElement extends SVGElement {}\ninterface SVGTextElement extends SVGElement {}\ninterface SVGTextPathElement extends SVGElement {}\ninterface SVGTSpanElement extends SVGElement {}\ninterface SVGUseElement extends SVGElement {}\ninterface SVGViewElement extends SVGElement {}\n\ninterface FormData {}\ninterface Text {}\ninterface TouchList {}\ninterface WebGLRenderingContext {}\ninterface WebGL2RenderingContext {}\n\ninterface TrustedHTML {}\n","/node_modules/xstate/dist/xstate.cjs.d.ts":"export * from \"./declarations/src/index\";\n//# sourceMappingURL=xstate.cjs.d.ts.map\n","/node_modules/@types/react-dom/client.d.ts":"/**\n * WARNING: This entrypoint is only available starting with `react-dom@18.0.0-rc.1`\n */\n\n// See https://github.com/facebook/react/blob/main/packages/react-dom/client.js to see how the exports are declared,\n\nimport React = require(\"react\");\nexport interface HydrationOptions {\n    /**\n     * Prefix for `useId`.\n     */\n    identifierPrefix?: string;\n    onRecoverableError?: (error: unknown, errorInfo: ErrorInfo) => void;\n}\n\nexport interface RootOptions {\n    /**\n     * Prefix for `useId`.\n     */\n    identifierPrefix?: string;\n    onRecoverableError?: (error: unknown, errorInfo: ErrorInfo) => void;\n}\n\nexport interface ErrorInfo {\n    digest?: string;\n    componentStack?: string;\n}\n\nexport interface Root {\n    render(children: React.ReactNode): void;\n    unmount(): void;\n}\n\n/**\n * Different release channels declare additional types of ReactNode this particular release channel accepts.\n * App or library types should never augment this interface.\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_CREATE_ROOT_CONTAINERS {}\n\nexport type Container =\n    | Element\n    | DocumentFragment\n    | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_CREATE_ROOT_CONTAINERS[\n        keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_CREATE_ROOT_CONTAINERS\n    ];\n\n/**\n * createRoot lets you create a root to display React components inside a browser DOM node.\n *\n * @see {@link https://react.dev/reference/react-dom/client/createRoot API Reference for `createRoot`}\n */\nexport function createRoot(container: Container, options?: RootOptions): Root;\n\n/**\n * Same as `createRoot()`, but is used to hydrate a container whose HTML contents were rendered by ReactDOMServer.\n *\n * React will attempt to attach event listeners to the existing markup.\n *\n * **Example Usage**\n *\n * ```jsx\n * hydrateRoot(document.querySelector('#root'), <App />)\n * ```\n *\n * @see https://reactjs.org/docs/react-dom-client.html#hydrateroot\n */\nexport function hydrateRoot(\n    container: Element | Document,\n    initialChildren: React.ReactNode,\n    options?: HydrationOptions,\n): Root;\n","/src/playgrounds/2/index.tsx":"import { createRoot } from \"react-dom/client\";\nimport React from \"react\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<>hello world 2</>);\n","/src/playgrounds/3/index.tsx":"import { createRoot } from \"react-dom/client\";\nimport React from \"react\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<>hello world 3</>);\n","/src/playgrounds/1/index.tsx":"import { createRoot } from \"react-dom/client\";\nimport React from \"react\";\nimport { Toggler } from \"./app\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<Toggler />);\n","/src/playgrounds/4/index.tsx":"import { createRoot } from \"react-dom/client\";\nimport React from \"react\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<>hello world 4</>);\n","/node_modules/@types/react/index.d.ts":"// NOTE: Users of the `experimental` builds of React should add a reference\n// to 'react/experimental' in their project. See experimental.d.ts's top comment\n// for reference and documentation on how exactly to do it.\n\n/// <reference path=\"global.d.ts\" />\n\nimport * as CSS from \"csstype\";\nimport * as PropTypes from \"prop-types\";\n\ntype NativeAnimationEvent = AnimationEvent;\ntype NativeClipboardEvent = ClipboardEvent;\ntype NativeCompositionEvent = CompositionEvent;\ntype NativeDragEvent = DragEvent;\ntype NativeFocusEvent = FocusEvent;\ntype NativeKeyboardEvent = KeyboardEvent;\ntype NativeMouseEvent = MouseEvent;\ntype NativeTouchEvent = TouchEvent;\ntype NativePointerEvent = PointerEvent;\ntype NativeTransitionEvent = TransitionEvent;\ntype NativeUIEvent = UIEvent;\ntype NativeWheelEvent = WheelEvent;\n\n/**\n * Used to represent DOM API's where users can either pass\n * true or false as a boolean or as its equivalent strings.\n */\ntype Booleanish = boolean | \"true\" | \"false\";\n\n/**\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/crossorigin MDN}\n */\ntype CrossOrigin = \"anonymous\" | \"use-credentials\" | \"\" | undefined;\n\ndeclare const UNDEFINED_VOID_ONLY: unique symbol;\n\n/**\n * The function returned from an effect passed to {@link React.useEffect useEffect},\n * which can be used to clean up the effect when the component unmounts.\n *\n * @see {@link https://react.dev/reference/react/useEffect React Docs}\n */\ntype Destructor = () => void | { [UNDEFINED_VOID_ONLY]: never };\ntype VoidOrUndefinedOnly = void | { [UNDEFINED_VOID_ONLY]: never };\n\n// eslint-disable-next-line @definitelytyped/export-just-namespace\nexport = React;\nexport as namespace React;\n\ndeclare namespace React {\n    //\n    // React Elements\n    // ----------------------------------------------------------------------\n\n    /**\n     * Used to retrieve the possible components which accept a given set of props.\n     *\n     * Can be passed no type parameters to get a union of all possible components\n     * and tags.\n     *\n     * Is a superset of {@link ComponentType}.\n     *\n     * @template P The props to match against. If not passed, defaults to any.\n     * @template Tag An optional tag to match against. If not passed, attempts to match against all possible tags.\n     *\n     * @example\n     *\n     * ```tsx\n     * // All components and tags (img, embed etc.)\n     * // which accept `src`\n     * type SrcComponents = ElementType<{ src: any }>;\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * // All components\n     * type AllComponents = ElementType;\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * // All custom components which match `src`, and tags which\n     * // match `src`, narrowed down to just `audio` and `embed`\n     * type SrcComponents = ElementType<{ src: any }, 'audio' | 'embed'>;\n     * ```\n     */\n    type ElementType<P = any, Tag extends keyof JSX.IntrinsicElements = keyof JSX.IntrinsicElements> =\n        | { [K in Tag]: P extends JSX.IntrinsicElements[K] ? K : never }[Tag]\n        | ComponentType<P>;\n\n    /**\n     * Represents any user-defined component, either as a function or a class.\n     *\n     * Similar to {@link JSXElementConstructor}, but with extra properties like\n     * {@link FunctionComponent.defaultProps defaultProps } and\n     * {@link ComponentClass.contextTypes contextTypes}.\n     *\n     * @template P The props the component accepts.\n     *\n     * @see {@link ComponentClass}\n     * @see {@link FunctionComponent}\n     */\n    type ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P>;\n\n    /**\n     * Represents any user-defined component, either as a function or a class.\n     *\n     * Similar to {@link ComponentType}, but without extra properties like\n     * {@link FunctionComponent.defaultProps defaultProps } and\n     * {@link ComponentClass.contextTypes contextTypes}.\n     *\n     * @template P The props the component accepts.\n     */\n    type JSXElementConstructor<P> =\n        | ((\n            props: P,\n            /**\n             * @deprecated\n             *\n             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-stateless-function-components React Docs}\n             */\n            deprecatedLegacyContext?: any,\n        ) => ReactNode)\n        | (new(\n            props: P,\n            /**\n             * @deprecated\n             *\n             * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#referencing-context-in-lifecycle-methods React Docs}\n             */\n            deprecatedLegacyContext?: any,\n        ) => Component<any, any>);\n\n    /**\n     * A readonly ref container where {@link current} cannot be mutated.\n     *\n     * Created by {@link createRef}, or {@link useRef} when passed `null`.\n     *\n     * @template T The type of the ref's value.\n     *\n     * @example\n     *\n     * ```tsx\n     * const ref = createRef<HTMLDivElement>();\n     *\n     * ref.current = document.createElement('div'); // Error\n     * ```\n     */\n    interface RefObject<T> {\n        /**\n         * The current value of the ref.\n         */\n        readonly current: T | null;\n    }\n\n    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES {\n    }\n    /**\n     * A callback fired whenever the ref's value changes.\n     *\n     * @template T The type of the ref's value.\n     *\n     * @see {@link https://react.dev/reference/react-dom/components/common#ref-callback React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * <div ref={(node) => console.log(node)} />\n     * ```\n     */\n    type RefCallback<T> = {\n        bivarianceHack(\n            instance: T | null,\n        ):\n            | void\n            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES[\n                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_CALLBACK_REF_RETURN_VALUES\n            ];\n    }[\"bivarianceHack\"];\n\n    /**\n     * A union type of all possible shapes for React refs.\n     *\n     * @see {@link RefCallback}\n     * @see {@link RefObject}\n     */\n\n    type Ref<T> = RefCallback<T> | RefObject<T> | null;\n    /**\n     * A legacy implementation of refs where you can pass a string to a ref prop.\n     *\n     * @see {@link https://react.dev/reference/react/Component#refs React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * <div ref=\"myRef\" />\n     * ```\n     */\n    // TODO: Remove the string ref special case from `PropsWithRef` once we remove LegacyRef\n    type LegacyRef<T> = string | Ref<T>;\n\n    /**\n     * Retrieves the type of the 'ref' prop for a given component type or tag name.\n     *\n     * @template C The component type.\n     *\n     * @example\n     *\n     * ```tsx\n     * type MyComponentRef = React.ElementRef<typeof MyComponent>;\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * type DivRef = React.ElementRef<'div'>;\n     * ```\n     */\n    type ElementRef<\n        C extends\n            | ForwardRefExoticComponent<any>\n            | { new(props: any): Component<any> }\n            | ((props: any, context?: any) => ReactNode)\n            | keyof JSX.IntrinsicElements,\n    > =\n        // need to check first if `ref` is a valid prop for ts@3.0\n        // otherwise it will infer `{}` instead of `never`\n        \"ref\" extends keyof ComponentPropsWithRef<C>\n            ? NonNullable<ComponentPropsWithRef<C>[\"ref\"]> extends RefAttributes<\n                infer Instance\n            >[\"ref\"] ? Instance\n            : never\n            : never;\n\n    type ComponentState = any;\n\n    /**\n     * A value which uniquely identifies a node among items in an array.\n     *\n     * @see {@link https://react.dev/learn/rendering-lists#keeping-list-items-in-order-with-key React Docs}\n     */\n    type Key = string | number | bigint;\n\n    /**\n     * @internal The props any component can receive.\n     * You don't have to add this type. All components automatically accept these props.\n     * ```tsx\n     * const Component = () => <div />;\n     * <Component key=\"one\" />\n     * ```\n     *\n     * WARNING: The implementation of a component will never have access to these attributes.\n     * The following example would be incorrect usage because {@link Component} would never have access to `key`:\n     * ```tsx\n     * const Component = (props: React.Attributes) => props.key;\n     * ```\n     */\n    interface Attributes {\n        key?: Key | null | undefined;\n    }\n    /**\n     * The props any component accepting refs can receive.\n     * Class components, built-in browser components (e.g. `div`) and forwardRef components can receive refs and automatically accept these props.\n     * ```tsx\n     * const Component = forwardRef(() => <div />);\n     * <Component ref={(current) => console.log(current)} />\n     * ```\n     *\n     * You only need this type if you manually author the types of props that need to be compatible with legacy refs.\n     * ```tsx\n     * interface Props extends React.RefAttributes<HTMLDivElement> {}\n     * declare const Component: React.FunctionComponent<Props>;\n     * ```\n     *\n     * Otherwise it's simpler to directly use {@link Ref} since you can safely use the\n     * props type to describe to props that a consumer can pass to the component\n     * as well as describing the props the implementation of a component \"sees\".\n     * {@link RefAttributes} is generally not safe to describe both consumer and seen props.\n     *\n     * ```tsx\n     * interface Props extends {\n     *   ref?: React.Ref<HTMLDivElement> | undefined;\n     * }\n     * declare const Component: React.FunctionComponent<Props>;\n     * ```\n     *\n     * WARNING: The implementation of a component will not have access to the same type in versions of React supporting string refs.\n     * The following example would be incorrect usage because {@link Component} would never have access to a `ref` with type `string`\n     * ```tsx\n     * const Component = (props: React.RefAttributes) => props.ref;\n     * ```\n     */\n    interface RefAttributes<T> extends Attributes {\n        /**\n         * Allows getting a ref to the component instance.\n         * Once the component unmounts, React will set `ref.current` to `null`\n         * (or call the ref with `null` if you passed a callback ref).\n         *\n         * @see {@link https://react.dev/learn/referencing-values-with-refs#refs-and-the-dom React Docs}\n         */\n        ref?: LegacyRef<T> | undefined;\n    }\n\n    /**\n     * Represents the built-in attributes available to class components.\n     */\n    interface ClassAttributes<T> extends RefAttributes<T> {\n    }\n\n    /**\n     * Represents a JSX element.\n     *\n     * Where {@link ReactNode} represents everything that can be rendered, `ReactElement`\n     * only represents JSX.\n     *\n     * @template P The type of the props object\n     * @template T The type of the component or tag\n     *\n     * @example\n     *\n     * ```tsx\n     * const element: ReactElement = <div />;\n     * ```\n     */\n    interface ReactElement<\n        P = any,\n        T extends string | JSXElementConstructor<any> = string | JSXElementConstructor<any>,\n    > {\n        type: T;\n        props: P;\n        key: string | null;\n    }\n\n    /**\n     * @deprecated\n     */\n    interface ReactComponentElement<\n        T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>,\n        P = Pick<ComponentProps<T>, Exclude<keyof ComponentProps<T>, \"key\" | \"ref\">>,\n    > extends ReactElement<P, Exclude<T, number>> {}\n\n    interface FunctionComponentElement<P> extends ReactElement<P, FunctionComponent<P>> {\n        ref?: (\"ref\" extends keyof P ? P extends { ref?: infer R | undefined } ? R : never : never) | undefined;\n    }\n\n    type CElement<P, T extends Component<P, ComponentState>> = ComponentElement<P, T>;\n    interface ComponentElement<P, T extends Component<P, ComponentState>> extends ReactElement<P, ComponentClass<P>> {\n        ref?: LegacyRef<T> | undefined;\n    }\n\n    /**\n     * @deprecated Use {@link ComponentElement} instead.\n     */\n    type ClassicElement<P> = CElement<P, ClassicComponent<P, ComponentState>>;\n\n    // string fallback for custom web-components\n    interface DOMElement<P extends HTMLAttributes<T> | SVGAttributes<T>, T extends Element>\n        extends ReactElement<P, string>\n    {\n        ref: LegacyRef<T>;\n    }\n\n    // ReactHTML for ReactHTMLElement\n    interface ReactHTMLElement<T extends HTMLElement> extends DetailedReactHTMLElement<AllHTMLAttributes<T>, T> {}\n\n    interface DetailedReactHTMLElement<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMElement<P, T> {\n        type: keyof ReactHTML;\n    }\n\n    // ReactSVG for ReactSVGElement\n    interface ReactSVGElement extends DOMElement<SVGAttributes<SVGElement>, SVGElement> {\n        type: keyof ReactSVG;\n    }\n\n    interface ReactPortal extends ReactElement {\n        children: ReactNode;\n    }\n\n    //\n    // Factories\n    // ----------------------------------------------------------------------\n\n    type Factory<P> = (props?: Attributes & P, ...children: ReactNode[]) => ReactElement<P>;\n\n    /**\n     * @deprecated Please use `FunctionComponentFactory`\n     */\n    type SFCFactory<P> = FunctionComponentFactory<P>;\n\n    type FunctionComponentFactory<P> = (\n        props?: Attributes & P,\n        ...children: ReactNode[]\n    ) => FunctionComponentElement<P>;\n\n    type ComponentFactory<P, T extends Component<P, ComponentState>> = (\n        props?: ClassAttributes<T> & P,\n        ...children: ReactNode[]\n    ) => CElement<P, T>;\n\n    type CFactory<P, T extends Component<P, ComponentState>> = ComponentFactory<P, T>;\n    type ClassicFactory<P> = CFactory<P, ClassicComponent<P, ComponentState>>;\n\n    type DOMFactory<P extends DOMAttributes<T>, T extends Element> = (\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]\n    ) => DOMElement<P, T>;\n\n    interface HTMLFactory<T extends HTMLElement> extends DetailedHTMLFactory<AllHTMLAttributes<T>, T> {}\n\n    interface DetailedHTMLFactory<P extends HTMLAttributes<T>, T extends HTMLElement> extends DOMFactory<P, T> {\n        (props?: ClassAttributes<T> & P | null, ...children: ReactNode[]): DetailedReactHTMLElement<P, T>;\n    }\n\n    interface SVGFactory extends DOMFactory<SVGAttributes<SVGElement>, SVGElement> {\n        (\n            props?: ClassAttributes<SVGElement> & SVGAttributes<SVGElement> | null,\n            ...children: ReactNode[]\n        ): ReactSVGElement;\n    }\n\n    /**\n     * @deprecated - This type is not relevant when using React. Inline the type instead to make the intent clear.\n     */\n    type ReactText = string | number;\n    /**\n     * @deprecated - This type is not relevant when using React. Inline the type instead to make the intent clear.\n     */\n    type ReactChild = ReactElement | string | number;\n\n    /**\n     * @deprecated Use either `ReactNode[]` if you need an array or `Iterable<ReactNode>` if its passed to a host component.\n     */\n    interface ReactNodeArray extends ReadonlyArray<ReactNode> {}\n    /**\n     * WARNING: Not related to `React.Fragment`.\n     * @deprecated This type is not relevant when using React. Inline the type instead to make the intent clear.\n     */\n    type ReactFragment = Iterable<ReactNode>;\n\n    /**\n     * Different release channels declare additional types of ReactNode this particular release channel accepts.\n     * App or library types should never augment this interface.\n     */\n    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES {}\n\n    /**\n     * Represents all of the things React can render.\n     *\n     * Where {@link ReactElement} only represents JSX, `ReactNode` represents everything that can be rendered.\n     *\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/reactnode/ React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * // Typing children\n     * type Props = { children: ReactNode }\n     *\n     * const Component = ({ children }: Props) => <div>{children}</div>\n     *\n     * <Component>hello</Component>\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * // Typing a custom element\n     * type Props = { customElement: ReactNode }\n     *\n     * const Component = ({ customElement }: Props) => <div>{customElement}</div>\n     *\n     * <Component customElement={<div>hello</div>} />\n     * ```\n     */\n    // non-thenables need to be kept in sync with AwaitedReactNode\n    type ReactNode =\n        | ReactElement\n        | string\n        | number\n        | Iterable<ReactNode>\n        | ReactPortal\n        | boolean\n        | null\n        | undefined\n        | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES[\n            keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_REACT_NODES\n        ];\n\n    //\n    // Top Level API\n    // ----------------------------------------------------------------------\n\n    // DOM Elements\n    function createFactory<T extends HTMLElement>(\n        type: keyof ReactHTML,\n    ): HTMLFactory<T>;\n    function createFactory(\n        type: keyof ReactSVG,\n    ): SVGFactory;\n    function createFactory<P extends DOMAttributes<T>, T extends Element>(\n        type: string,\n    ): DOMFactory<P, T>;\n\n    // Custom components\n    function createFactory<P>(type: FunctionComponent<P>): FunctionComponentFactory<P>;\n    function createFactory<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n        type: ClassType<P, T, C>,\n    ): CFactory<P, T>;\n    function createFactory<P>(type: ComponentClass<P>): Factory<P>;\n\n    // DOM Elements\n    // TODO: generalize this to everything in `keyof ReactHTML`, not just \"input\"\n    function createElement(\n        type: \"input\",\n        props?: InputHTMLAttributes<HTMLInputElement> & ClassAttributes<HTMLInputElement> | null,\n        ...children: ReactNode[]\n    ): DetailedReactHTMLElement<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n    function createElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        type: keyof ReactHTML,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]\n    ): DetailedReactHTMLElement<P, T>;\n    function createElement<P extends SVGAttributes<T>, T extends SVGElement>(\n        type: keyof ReactSVG,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]\n    ): ReactSVGElement;\n    function createElement<P extends DOMAttributes<T>, T extends Element>(\n        type: string,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]\n    ): DOMElement<P, T>;\n\n    // Custom components\n\n    function createElement<P extends {}>(\n        type: FunctionComponent<P>,\n        props?: Attributes & P | null,\n        ...children: ReactNode[]\n    ): FunctionComponentElement<P>;\n    function createElement<P extends {}, T extends Component<P, ComponentState>, C extends ComponentClass<P>>(\n        type: ClassType<P, T, C>,\n        props?: ClassAttributes<T> & P | null,\n        ...children: ReactNode[]\n    ): CElement<P, T>;\n    function createElement<P extends {}>(\n        type: FunctionComponent<P> | ComponentClass<P> | string,\n        props?: Attributes & P | null,\n        ...children: ReactNode[]\n    ): ReactElement<P>;\n\n    // DOM Elements\n    // ReactHTMLElement\n    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        element: DetailedReactHTMLElement<P, T>,\n        props?: P,\n        ...children: ReactNode[]\n    ): DetailedReactHTMLElement<P, T>;\n    // ReactHTMLElement, less specific\n    function cloneElement<P extends HTMLAttributes<T>, T extends HTMLElement>(\n        element: ReactHTMLElement<T>,\n        props?: P,\n        ...children: ReactNode[]\n    ): ReactHTMLElement<T>;\n    // SVGElement\n    function cloneElement<P extends SVGAttributes<T>, T extends SVGElement>(\n        element: ReactSVGElement,\n        props?: P,\n        ...children: ReactNode[]\n    ): ReactSVGElement;\n    // DOM Element (has to be the last, because type checking stops at first overload that fits)\n    function cloneElement<P extends DOMAttributes<T>, T extends Element>(\n        element: DOMElement<P, T>,\n        props?: DOMAttributes<T> & P,\n        ...children: ReactNode[]\n    ): DOMElement<P, T>;\n\n    // Custom components\n    function cloneElement<P>(\n        element: FunctionComponentElement<P>,\n        props?: Partial<P> & Attributes,\n        ...children: ReactNode[]\n    ): FunctionComponentElement<P>;\n    function cloneElement<P, T extends Component<P, ComponentState>>(\n        element: CElement<P, T>,\n        props?: Partial<P> & ClassAttributes<T>,\n        ...children: ReactNode[]\n    ): CElement<P, T>;\n    function cloneElement<P>(\n        element: ReactElement<P>,\n        props?: Partial<P> & Attributes,\n        ...children: ReactNode[]\n    ): ReactElement<P>;\n\n    /**\n     * Describes the props accepted by a Context {@link Provider}.\n     *\n     * @template T The type of the value the context provides.\n     */\n    interface ProviderProps<T> {\n        value: T;\n        children?: ReactNode | undefined;\n    }\n\n    /**\n     * Describes the props accepted by a Context {@link Consumer}.\n     *\n     * @template T The type of the value the context provides.\n     */\n    interface ConsumerProps<T> {\n        children: (value: T) => ReactNode;\n    }\n\n    /**\n     * An object masquerading as a component. These are created by functions\n     * like {@link forwardRef}, {@link memo}, and {@link createContext}.\n     *\n     * In order to make TypeScript work, we pretend that they are normal\n     * components.\n     *\n     * But they are, in fact, not callable - instead, they are objects which\n     * are treated specially by the renderer.\n     *\n     * @template P The props the component accepts.\n     */\n    interface ExoticComponent<P = {}> {\n        (props: P): ReactNode;\n        readonly $$typeof: symbol;\n    }\n\n    /**\n     * An {@link ExoticComponent} with a `displayName` property applied to it.\n     *\n     * @template P The props the component accepts.\n     */\n    interface NamedExoticComponent<P = {}> extends ExoticComponent<P> {\n        /**\n         * Used in debugging messages. You might want to set it\n         * explicitly if you want to display a different name for\n         * debugging purposes.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}\n         */\n        displayName?: string | undefined;\n    }\n\n    /**\n     * An {@link ExoticComponent} with a `propTypes` property applied to it.\n     *\n     * @template P The props the component accepts.\n     */\n    interface ProviderExoticComponent<P> extends ExoticComponent<P> {\n        propTypes?: WeakValidationMap<P> | undefined;\n    }\n\n    /**\n     * Used to retrieve the type of a context object from a {@link Context}.\n     *\n     * @template C The context object.\n     *\n     * @example\n     *\n     * ```tsx\n     * import { createContext } from 'react';\n     *\n     * const MyContext = createContext({ foo: 'bar' });\n     *\n     * type ContextType = ContextType<typeof MyContext>;\n     * // ContextType = { foo: string }\n     * ```\n     */\n    type ContextType<C extends Context<any>> = C extends Context<infer T> ? T : never;\n\n    /**\n     * Wraps your components to specify the value of this context for all components inside.\n     *\n     * @see {@link https://react.dev/reference/react/createContext#provider React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { createContext } from 'react';\n     *\n     * const ThemeContext = createContext('light');\n     *\n     * function App() {\n     *   return (\n     *     <ThemeContext.Provider value=\"dark\">\n     *       <Toolbar />\n     *     </ThemeContext.Provider>\n     *   );\n     * }\n     * ```\n     */\n    type Provider<T> = ProviderExoticComponent<ProviderProps<T>>;\n\n    /**\n     * The old way to read context, before {@link useContext} existed.\n     *\n     * @see {@link https://react.dev/reference/react/createContext#consumer React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { UserContext } from './user-context';\n     *\n     * function Avatar() {\n     *   return (\n     *     <UserContext.Consumer>\n     *       {user => <img src={user.profileImage} alt={user.name} />}\n     *     </UserContext.Consumer>\n     *   );\n     * }\n     * ```\n     */\n    type Consumer<T> = ExoticComponent<ConsumerProps<T>>;\n\n    /**\n     * Context lets components pass information deep down without explicitly\n     * passing props.\n     *\n     * Created from {@link createContext}\n     *\n     * @see {@link https://react.dev/learn/passing-data-deeply-with-context React Docs}\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/context/ React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { createContext } from 'react';\n     *\n     * const ThemeContext = createContext('light');\n     * ```\n     */\n    interface Context<T> {\n        Provider: Provider<T>;\n        Consumer: Consumer<T>;\n        /**\n         * Used in debugging messages. You might want to set it\n         * explicitly if you want to display a different name for\n         * debugging purposes.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}\n         */\n        displayName?: string | undefined;\n    }\n\n    /**\n     * Lets you create a {@link Context} that components can provide or read.\n     *\n     * @param defaultValue The value you want the context to have when there is no matching\n     * {@link Provider} in the tree above the component reading the context. This is meant\n     * as a \"last resort\" fallback.\n     *\n     * @see {@link https://react.dev/reference/react/createContext#reference React Docs}\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/context/ React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { createContext } from 'react';\n     *\n     * const ThemeContext = createContext('light');\n     * ```\n     */\n    function createContext<T>(\n        // If you thought this should be optional, see\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/pull/24509#issuecomment-382213106\n        defaultValue: T,\n    ): Context<T>;\n\n    function isValidElement<P>(object: {} | null | undefined): object is ReactElement<P>;\n\n    /**\n     * Maintainer's note: Sync with {@link ReactChildren} until {@link ReactChildren} is removed.\n     */\n    const Children: {\n        map<T, C>(\n            children: C | readonly C[],\n            fn: (child: C, index: number) => T,\n        ): C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;\n        forEach<C>(children: C | readonly C[], fn: (child: C, index: number) => void): void;\n        count(children: any): number;\n        only<C>(children: C): C extends any[] ? never : C;\n        toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;\n    };\n    /**\n     * Lets you group elements without a wrapper node.\n     *\n     * @see {@link https://react.dev/reference/react/Fragment React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { Fragment } from 'react';\n     *\n     * <Fragment>\n     *   <td>Hello</td>\n     *   <td>World</td>\n     * </Fragment>\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * // Using the <></> shorthand syntax:\n     *\n     * <>\n     *   <td>Hello</td>\n     *   <td>World</td>\n     * </>\n     * ```\n     */\n    const Fragment: ExoticComponent<{ children?: ReactNode | undefined }>;\n\n    /**\n     * Lets you find common bugs in your components early during development.\n     *\n     * @see {@link https://react.dev/reference/react/StrictMode React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { StrictMode } from 'react';\n     *\n     * <StrictMode>\n     *   <App />\n     * </StrictMode>\n     * ```\n     */\n    const StrictMode: ExoticComponent<{ children?: ReactNode | undefined }>;\n\n    /**\n     * The props accepted by {@link Suspense}.\n     *\n     * @see {@link https://react.dev/reference/react/Suspense React Docs}\n     */\n    interface SuspenseProps {\n        children?: ReactNode | undefined;\n\n        /** A fallback react tree to show when a Suspense child (like React.lazy) suspends */\n        fallback?: ReactNode;\n    }\n\n    /**\n     * Lets you display a fallback until its children have finished loading.\n     *\n     * @see {@link https://react.dev/reference/react/Suspense React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * import { Suspense } from 'react';\n     *\n     * <Suspense fallback={<Loading />}>\n     *   <ProfileDetails />\n     * </Suspense>\n     * ```\n     */\n    const Suspense: ExoticComponent<SuspenseProps>;\n    const version: string;\n\n    /**\n     * The callback passed to {@link ProfilerProps.onRender}.\n     *\n     * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n     */\n    type ProfilerOnRenderCallback = (\n        /**\n         * The string id prop of the {@link Profiler} tree that has just committed. This lets\n         * you identify which part of the tree was committed if you are using multiple\n         * profilers.\n         *\n         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n         */\n        id: string,\n        /**\n         * This lets you know whether the tree has just been mounted for the first time\n         * or re-rendered due to a change in props, state, or hooks.\n         *\n         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n         */\n        phase: \"mount\" | \"update\" | \"nested-update\",\n        /**\n         * The number of milliseconds spent rendering the {@link Profiler} and its descendants\n         * for the current update. This indicates how well the subtree makes use of\n         * memoization (e.g. {@link memo} and {@link useMemo}). Ideally this value should decrease\n         * significantly after the initial mount as many of the descendants will only need to\n         * re-render if their specific props change.\n         *\n         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n         */\n        actualDuration: number,\n        /**\n         * The number of milliseconds estimating how much time it would take to re-render the entire\n         * {@link Profiler} subtree without any optimizations. It is calculated by summing up the most\n         * recent render durations of each component in the tree. This value estimates a worst-case\n         * cost of rendering (e.g. the initial mount or a tree with no memoization). Compare\n         * {@link actualDuration} against it to see if memoization is working.\n         *\n         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n         */\n        baseDuration: number,\n        /**\n         * A numeric timestamp for when React began rendering the current update.\n         *\n         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n         */\n        startTime: number,\n        /**\n         * A numeric timestamp for when React committed the current update. This value is shared\n         * between all profilers in a commit, enabling them to be grouped if desirable.\n         *\n         * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n         */\n        commitTime: number,\n    ) => void;\n\n    /**\n     * The props accepted by {@link Profiler}.\n     *\n     * @see {@link https://react.dev/reference/react/Profiler React Docs}\n     */\n    interface ProfilerProps {\n        children?: ReactNode | undefined;\n        id: string;\n        onRender: ProfilerOnRenderCallback;\n    }\n\n    /**\n     * Lets you measure rendering performance of a React tree programmatically.\n     *\n     * @see {@link https://react.dev/reference/react/Profiler#onrender-callback React Docs}\n     *\n     * @example\n     *\n     * ```tsx\n     * <Profiler id=\"App\" onRender={onRender}>\n     *   <App />\n     * </Profiler>\n     * ```\n     */\n    const Profiler: ExoticComponent<ProfilerProps>;\n\n    //\n    // Component API\n    // ----------------------------------------------------------------------\n\n    type ReactInstance = Component<any> | Element;\n\n    // Base component for plain JS classes\n    interface Component<P = {}, S = {}, SS = any> extends ComponentLifecycle<P, S, SS> {}\n    class Component<P, S> {\n        /**\n         * If set, `this.context` will be set at runtime to the current value of the given Context.\n         *\n         * @example\n         *\n         * ```ts\n         * type MyContext = number\n         * const Ctx = React.createContext<MyContext>(0)\n         *\n         * class Foo extends React.Component {\n         *   static contextType = Ctx\n         *   context!: React.ContextType<typeof Ctx>\n         *   render () {\n         *     return <>My context's value: {this.context}</>;\n         *   }\n         * }\n         * ```\n         *\n         * @see {@link https://react.dev/reference/react/Component#static-contexttype}\n         */\n        static contextType?: Context<any> | undefined;\n\n        /**\n         * If using the new style context, re-declare this in your class to be the\n         * `React.ContextType` of your `static contextType`.\n         * Should be used with type annotation or static contextType.\n         *\n         * @example\n         * ```ts\n         * static contextType = MyContext\n         * // For TS pre-3.7:\n         * context!: React.ContextType<typeof MyContext>\n         * // For TS 3.7 and above:\n         * declare context: React.ContextType<typeof MyContext>\n         * ```\n         *\n         * @see {@link https://react.dev/reference/react/Component#context React Docs}\n         */\n        context: unknown;\n\n        constructor(props: P);\n        /**\n         * @deprecated\n         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html React Docs}\n         */\n        constructor(props: P, context: any);\n\n        // We MUST keep setState() as a unified signature because it allows proper checking of the method return type.\n        // See: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18365#issuecomment-351013257\n        // Also, the ` | S` allows intellisense to not be dumbisense\n        setState<K extends keyof S>(\n            state: ((prevState: Readonly<S>, props: Readonly<P>) => Pick<S, K> | S | null) | (Pick<S, K> | S | null),\n            callback?: () => void,\n        ): void;\n\n        forceUpdate(callback?: () => void): void;\n        render(): ReactNode;\n\n        readonly props: Readonly<P>;\n        state: Readonly<S>;\n        /**\n         * @deprecated\n         *\n         * @see {@link https://legacy.reactjs.org/docs/refs-and-the-dom.html#legacy-api-string-refs Legacy React Docs}\n         */\n        refs: {\n            [key: string]: ReactInstance;\n        };\n    }\n\n    class PureComponent<P = {}, S = {}, SS = any> extends Component<P, S, SS> {}\n\n    /**\n     * @deprecated Use `ClassicComponent` from `create-react-class`\n     *\n     * @see {@link https://legacy.reactjs.org/docs/react-without-es6.html Legacy React Docs}\n     * @see {@link https://www.npmjs.com/package/create-react-class `create-react-class` on npm}\n     */\n    interface ClassicComponent<P = {}, S = {}> extends Component<P, S> {\n        replaceState(nextState: S, callback?: () => void): void;\n        isMounted(): boolean;\n        getInitialState?(): S;\n    }\n\n    interface ChildContextProvider<CC> {\n        getChildContext(): CC;\n    }\n\n    //\n    // Class Interfaces\n    // ----------------------------------------------------------------------\n\n    /**\n     * Represents the type of a function component. Can optionally\n     * receive a type argument that represents the props the component\n     * receives.\n     *\n     * @template P The props the component accepts.\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n     * @alias for {@link FunctionComponent}\n     *\n     * @example\n     *\n     * ```tsx\n     * // With props:\n     * type Props = { name: string }\n     *\n     * const MyComponent: FC<Props> = (props) => {\n     *  return <div>{props.name}</div>\n     * }\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * // Without props:\n     * const MyComponentWithoutProps: FC = () => {\n     *   return <div>MyComponentWithoutProps</div>\n     * }\n     * ```\n     */\n    type FC<P = {}> = FunctionComponent<P>;\n\n    /**\n     * Represents the type of a function component. Can optionally\n     * receive a type argument that represents the props the component\n     * accepts.\n     *\n     * @template P The props the component accepts.\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/function_components React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * // With props:\n     * type Props = { name: string }\n     *\n     * const MyComponent: FunctionComponent<Props> = (props) => {\n     *  return <div>{props.name}</div>\n     * }\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * // Without props:\n     * const MyComponentWithoutProps: FunctionComponent = () => {\n     *   return <div>MyComponentWithoutProps</div>\n     * }\n     * ```\n     */\n    interface FunctionComponent<P = {}> {\n        (props: P, context?: any): ReactNode;\n        /**\n         * Used to declare the types of the props accepted by the\n         * component. These types will be checked during rendering\n         * and in development only.\n         *\n         * We recommend using TypeScript instead of checking prop\n         * types at runtime.\n         *\n         * @see {@link https://react.dev/reference/react/Component#static-proptypes React Docs}\n         */\n        propTypes?: WeakValidationMap<P> | undefined;\n        /**\n         * @deprecated\n         *\n         * Lets you specify which legacy context is consumed by\n         * this component.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html Legacy React Docs}\n         */\n        contextTypes?: ValidationMap<any> | undefined;\n        /**\n         * Used to define default values for the props accepted by\n         * the component.\n         *\n         * @see {@link https://react.dev/reference/react/Component#static-defaultprops React Docs}\n         *\n         * @example\n         *\n         * ```tsx\n         * type Props = { name?: string }\n         *\n         * const MyComponent: FC<Props> = (props) => {\n         *   return <div>{props.name}</div>\n         * }\n         *\n         * MyComponent.defaultProps = {\n         *   name: 'John Doe'\n         * }\n         * ```\n         */\n        defaultProps?: Partial<P> | undefined;\n        /**\n         * Used in debugging messages. You might want to set it\n         * explicitly if you want to display a different name for\n         * debugging purposes.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}\n         *\n         * @example\n         *\n         * ```tsx\n         *\n         * const MyComponent: FC = () => {\n         *   return <div>Hello!</div>\n         * }\n         *\n         * MyComponent.displayName = 'MyAwesomeComponent'\n         * ```\n         */\n        displayName?: string | undefined;\n    }\n\n    /**\n     * @deprecated - Equivalent to {@link React.FunctionComponent}.\n     *\n     * @see {@link React.FunctionComponent}\n     * @alias {@link VoidFunctionComponent}\n     */\n    type VFC<P = {}> = VoidFunctionComponent<P>;\n\n    /**\n     * @deprecated - Equivalent to {@link React.FunctionComponent}.\n     *\n     * @see {@link React.FunctionComponent}\n     */\n    interface VoidFunctionComponent<P = {}> {\n        (props: P, context?: any): ReactNode;\n        propTypes?: WeakValidationMap<P> | undefined;\n        contextTypes?: ValidationMap<any> | undefined;\n        defaultProps?: Partial<P> | undefined;\n        displayName?: string | undefined;\n    }\n\n    /**\n     * The type of the ref received by a {@link ForwardRefRenderFunction}.\n     *\n     * @see {@link ForwardRefRenderFunction}\n     */\n    type ForwardedRef<T> = ((instance: T | null) => void) | MutableRefObject<T | null> | null;\n\n    /**\n     * The type of the function passed to {@link forwardRef}. This is considered different\n     * to a normal {@link FunctionComponent} because it receives an additional argument,\n     *\n     * @param props Props passed to the component, if any.\n     * @param ref A ref forwarded to the component of type {@link ForwardedRef}.\n     *\n     * @template T The type of the forwarded ref.\n     * @template P The type of the props the component accepts.\n     *\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/ React TypeScript Cheatsheet}\n     * @see {@link forwardRef}\n     */\n    interface ForwardRefRenderFunction<T, P = {}> {\n        (props: P, ref: ForwardedRef<T>): ReactNode;\n        /**\n         * Used in debugging messages. You might want to set it\n         * explicitly if you want to display a different name for\n         * debugging purposes.\n         *\n         * Will show `ForwardRef(${Component.displayName || Component.name})`\n         * in devtools by default, but can be given its own specific name.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}\n         */\n        displayName?: string | undefined;\n        /**\n         * defaultProps are not supported on render functions passed to forwardRef.\n         *\n         * @see {@link https://github.com/microsoft/TypeScript/issues/36826 linked GitHub issue} for context\n         * @see {@link https://react.dev/reference/react/Component#static-defaultprops React Docs}\n         */\n        defaultProps?: never | undefined;\n        /**\n         * propTypes are not supported on render functions passed to forwardRef.\n         *\n         * @see {@link https://github.com/microsoft/TypeScript/issues/36826 linked GitHub issue} for context\n         * @see {@link https://react.dev/reference/react/Component#static-proptypes React Docs}\n         */\n        propTypes?: never | undefined;\n    }\n\n    /**\n     * Represents a component class in React.\n     *\n     * @template P The props the component accepts.\n     * @template S The internal state of the component.\n     */\n    interface ComponentClass<P = {}, S = ComponentState> extends StaticLifecycle<P, S> {\n        new(props: P, context?: any): Component<P, S>;\n        /**\n         * Used to declare the types of the props accepted by the\n         * component. These types will be checked during rendering\n         * and in development only.\n         *\n         * We recommend using TypeScript instead of checking prop\n         * types at runtime.\n         *\n         * @see {@link https://react.dev/reference/react/Component#static-proptypes React Docs}\n         */\n        propTypes?: WeakValidationMap<P> | undefined;\n        contextType?: Context<any> | undefined;\n        /**\n         * @deprecated use {@link ComponentClass.contextType} instead\n         *\n         * Lets you specify which legacy context is consumed by\n         * this component.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html Legacy React Docs}\n         */\n        contextTypes?: ValidationMap<any> | undefined;\n        /**\n         * @deprecated\n         *\n         * @see {@link https://legacy.reactjs.org/docs/legacy-context.html#how-to-use-context Legacy React Docs}\n         */\n        childContextTypes?: ValidationMap<any> | undefined;\n        /**\n         * Used to define default values for the props accepted by\n         * the component.\n         *\n         * @see {@link https://react.dev/reference/react/Component#static-defaultprops React Docs}\n         */\n        defaultProps?: Partial<P> | undefined;\n        /**\n         * Used in debugging messages. You might want to set it\n         * explicitly if you want to display a different name for\n         * debugging purposes.\n         *\n         * @see {@link https://legacy.reactjs.org/docs/react-component.html#displayname Legacy React Docs}\n         */\n        displayName?: string | undefined;\n    }\n\n    /**\n     * @deprecated Use `ClassicComponentClass` from `create-react-class`\n     *\n     * @see {@link https://legacy.reactjs.org/docs/react-without-es6.html Legacy React Docs}\n     * @see {@link https://www.npmjs.com/package/create-react-class `create-react-class` on npm}\n     */\n    interface ClassicComponentClass<P = {}> extends ComponentClass<P> {\n        new(props: P, context?: any): ClassicComponent<P, ComponentState>;\n        getDefaultProps?(): P;\n    }\n\n    /**\n     * Used in {@link createElement} and {@link createFactory} to represent\n     * a class.\n     *\n     * An intersection type is used to infer multiple type parameters from\n     * a single argument, which is useful for many top-level API defs.\n     * See {@link https://github.com/Microsoft/TypeScript/issues/7234 this GitHub issue}\n     * for more info.\n     */\n    type ClassType<P, T extends Component<P, ComponentState>, C extends ComponentClass<P>> =\n        & C\n        & (new(props: P, context?: any) => T);\n\n    //\n    // Component Specs and Lifecycle\n    // ----------------------------------------------------------------------\n\n    // This should actually be something like `Lifecycle<P, S> | DeprecatedLifecycle<P, S>`,\n    // as React will _not_ call the deprecated lifecycle methods if any of the new lifecycle\n    // methods are present.\n    interface ComponentLifecycle<P, S, SS = any> extends NewLifecycle<P, S, SS>, DeprecatedLifecycle<P, S> {\n        /**\n         * Called immediately after a component is mounted. Setting state here will trigger re-rendering.\n         */\n        componentDidMount?(): void;\n        /**\n         * Called to determine whether the change in props and state should trigger a re-render.\n         *\n         * `Component` always returns true.\n         * `PureComponent` implements a shallow comparison on props and state and returns true if any\n         * props or states have changed.\n         *\n         * If false is returned, {@link Component.render}, `componentWillUpdate`\n         * and `componentDidUpdate` will not be called.\n         */\n        shouldComponentUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): boolean;\n        /**\n         * Called immediately before a component is destroyed. Perform any necessary cleanup in this method, such as\n         * cancelled network requests, or cleaning up any DOM elements created in `componentDidMount`.\n         */\n        componentWillUnmount?(): void;\n        /**\n         * Catches exceptions generated in descendant components. Unhandled exceptions will cause\n         * the entire component tree to unmount.\n         */\n        componentDidCatch?(error: Error, errorInfo: ErrorInfo): void;\n    }\n\n    // Unfortunately, we have no way of declaring that the component constructor must implement this\n    interface StaticLifecycle<P, S> {\n        getDerivedStateFromProps?: GetDerivedStateFromProps<P, S> | undefined;\n        getDerivedStateFromError?: GetDerivedStateFromError<P, S> | undefined;\n    }\n\n    type GetDerivedStateFromProps<P, S> =\n        /**\n         * Returns an update to a component's state based on its new props and old state.\n         *\n         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n         */\n        (nextProps: Readonly<P>, prevState: S) => Partial<S> | null;\n\n    type GetDerivedStateFromError<P, S> =\n        /**\n         * This lifecycle is invoked after an error has been thrown by a descendant component.\n         * It receives the error that was thrown as a parameter and should return a value to update state.\n         *\n         * Note: its presence prevents any of the deprecated lifecycle methods from being invoked\n         */\n        (error: any) => Partial<S> | null;\n\n    // This should be \"infer SS\" but can't use it yet\n    interface NewLifecycle<P, S, SS> {\n        /**\n         * Runs before React applies the result of {@link Component.render render} to the document, and\n         * returns an object to be given to {@link componentDidUpdate}. Useful for saving\n         * things such as scroll position before {@link Component.render render} causes changes to it.\n         *\n         * Note: the presence of this method prevents any of the deprecated\n         * lifecycle events from running.\n         */\n        getSnapshotBeforeUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>): SS | null;\n        /**\n         * Called immediately after updating occurs. Not called for the initial render.\n         *\n         * The snapshot is only present if {@link getSnapshotBeforeUpdate} is present and returns non-null.\n         */\n        componentDidUpdate?(prevProps: Readonly<P>, prevState: Readonly<S>, snapshot?: SS): void;\n    }\n\n    interface DeprecatedLifecycle<P, S> {\n        /**\n         * Called immediately before mounting occurs, and before {@link Component.render}.\n         * Avoid introducing any side-effects or subscriptions in this method.\n         *\n         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}\n         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents\n         * this from being invoked.\n         *\n         * @deprecated 16.3, use {@link ComponentLifecycle.componentDidMount componentDidMount} or the constructor instead; will stop working in React 17\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state}\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}\n         */\n        componentWillMount?(): void;\n        /**\n         * Called immediately before mounting occurs, and before {@link Component.render}.\n         * Avoid introducing any side-effects or subscriptions in this method.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}\n         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents\n         * this from being invoked.\n         *\n         * @deprecated 16.3, use {@link ComponentLifecycle.componentDidMount componentDidMount} or the constructor instead\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#initializing-state}\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}\n         */\n        UNSAFE_componentWillMount?(): void;\n        /**\n         * Called when the component may be receiving new props.\n         * React may call this even if props have not changed, so be sure to compare new and existing\n         * props if you only want to handle changes.\n         *\n         * Calling {@link Component.setState} generally does not trigger this method.\n         *\n         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}\n         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents\n         * this from being invoked.\n         *\n         * @deprecated 16.3, use static {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} instead; will stop working in React 17\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props}\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}\n         */\n        componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n        /**\n         * Called when the component may be receiving new props.\n         * React may call this even if props have not changed, so be sure to compare new and existing\n         * props if you only want to handle changes.\n         *\n         * Calling {@link Component.setState} generally does not trigger this method.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}\n         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents\n         * this from being invoked.\n         *\n         * @deprecated 16.3, use static {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} instead\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props}\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}\n         */\n        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<P>, nextContext: any): void;\n        /**\n         * Called immediately before rendering when new props or state is received. Not called for the initial render.\n         *\n         * Note: You cannot call {@link Component.setState} here.\n         *\n         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}\n         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents\n         * this from being invoked.\n         *\n         * @deprecated 16.3, use getSnapshotBeforeUpdate instead; will stop working in React 17\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update}\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}\n         */\n        componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n        /**\n         * Called immediately before rendering when new props or state is received. Not called for the initial render.\n         *\n         * Note: You cannot call {@link Component.setState} here.\n         *\n         * This method will not stop working in React 17.\n         *\n         * Note: the presence of {@link NewLifecycle.getSnapshotBeforeUpdate getSnapshotBeforeUpdate}\n         * or {@link StaticLifecycle.getDerivedStateFromProps getDerivedStateFromProps} prevents\n         * this from being invoked.\n         *\n         * @deprecated 16.3, use getSnapshotBeforeUpdate instead\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#reading-dom-properties-before-an-update}\n         * @see {@link https://legacy.reactjs.org/blog/2018/03/27/update-on-async-rendering.html#gradual-migration-path}\n         */\n        UNSAFE_componentWillUpdate?(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: any): void;\n    }\n\n    /**\n     * @deprecated\n     *\n     * @see {@link https://legacy.reactjs.org/blog/2016/07/13/mixins-considered-harmful.html Mixins Considered Harmful}\n     */\n    interface Mixin<P, S> extends ComponentLifecycle<P, S> {\n        mixins?: Array<Mixin<P, S>> | undefined;\n        statics?: {\n            [key: string]: any;\n        } | undefined;\n\n        displayName?: string | undefined;\n        propTypes?: ValidationMap<any> | undefined;\n        contextTypes?: ValidationMap<any> | undefined;\n        childContextTypes?: ValidationMap<any> | undefined;\n\n        getDefaultProps?(): P;\n        getInitialState?(): S;\n    }\n\n    /**\n     * @deprecated\n     *\n     * @see {@link https://legacy.reactjs.org/blog/2016/07/13/mixins-considered-harmful.html Mixins Considered Harmful}\n     */\n    interface ComponentSpec<P, S> extends Mixin<P, S> {\n        render(): ReactNode;\n\n        [propertyName: string]: any;\n    }\n\n    function createRef<T>(): RefObject<T>;\n\n    /**\n     * The type of the component returned from {@link forwardRef}.\n     *\n     * @template P The props the component accepts, if any.\n     *\n     * @see {@link ExoticComponent}\n     */\n    interface ForwardRefExoticComponent<P> extends NamedExoticComponent<P> {\n        defaultProps?: Partial<P> | undefined;\n        propTypes?: WeakValidationMap<P> | undefined;\n    }\n\n    /**\n     * Lets your component expose a DOM node to a parent component\n     * using a ref.\n     *\n     * @see {@link https://react.dev/reference/react/forwardRef React Docs}\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/basic/getting-started/forward_and_create_ref/ React TypeScript Cheatsheet}\n     *\n     * @param render See the {@link ForwardRefRenderFunction}.\n     *\n     * @template T The type of the DOM node.\n     * @template P The props the component accepts, if any.\n     *\n     * @example\n     *\n     * ```tsx\n     * interface Props {\n     *   children?: ReactNode;\n     *   type: \"submit\" | \"button\";\n     * }\n     *\n     * export const FancyButton = forwardRef<HTMLButtonElement, Props>((props, ref) => (\n     *   <button ref={ref} className=\"MyClassName\" type={props.type}>\n     *     {props.children}\n     *   </button>\n     * ));\n     * ```\n     */\n    function forwardRef<T, P = {}>(\n        render: ForwardRefRenderFunction<T, P>,\n    ): ForwardRefExoticComponent<PropsWithoutRef<P> & RefAttributes<T>>;\n\n    /**\n     * Omits the 'ref' attribute from the given props object.\n     *\n     * @template P The props object type.\n     */\n    type PropsWithoutRef<P> =\n        // Omit would not be sufficient for this. We'd like to avoid unnecessary mapping and need a distributive conditional to support unions.\n        // see: https://www.typescriptlang.org/docs/handbook/2/conditional-types.html#distributive-conditional-types\n        // https://github.com/Microsoft/TypeScript/issues/28339\n        P extends any ? (\"ref\" extends keyof P ? Omit<P, \"ref\"> : P) : P;\n    /** Ensures that the props do not include string ref, which cannot be forwarded */\n    type PropsWithRef<P> =\n        // Note: String refs can be forwarded. We can't fix this bug without breaking a bunch of libraries now though.\n        // Just \"P extends { ref?: infer R }\" looks sufficient, but R will infer as {} if P is {}.\n        \"ref\" extends keyof P\n            ? P extends { ref?: infer R | undefined }\n                ? string extends R ? PropsWithoutRef<P> & { ref?: Exclude<R, string> | undefined }\n                : P\n            : P\n            : P;\n\n    type PropsWithChildren<P = unknown> = P & { children?: ReactNode | undefined };\n\n    /**\n     * Used to retrieve the props a component accepts. Can either be passed a string,\n     * indicating a DOM element (e.g. 'div', 'span', etc.) or the type of a React\n     * component.\n     *\n     * It's usually better to use {@link ComponentPropsWithRef} or {@link ComponentPropsWithoutRef}\n     * instead of this type, as they let you be explicit about whether or not to include\n     * the `ref` prop.\n     *\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/componentprops/ React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * // Retrieves the props an 'input' element accepts\n     * type InputProps = React.ComponentProps<'input'>;\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * const MyComponent = (props: { foo: number, bar: string }) => <div />;\n     *\n     * // Retrieves the props 'MyComponent' accepts\n     * type MyComponentProps = React.ComponentProps<typeof MyComponent>;\n     * ```\n     */\n    type ComponentProps<T extends keyof JSX.IntrinsicElements | JSXElementConstructor<any>> = T extends\n        JSXElementConstructor<infer P> ? P\n        : T extends keyof JSX.IntrinsicElements ? JSX.IntrinsicElements[T]\n        : {};\n\n    /**\n     * Used to retrieve the props a component accepts with its ref. Can either be\n     * passed a string, indicating a DOM element (e.g. 'div', 'span', etc.) or the\n     * type of a React component.\n     *\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/componentprops/ React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * // Retrieves the props an 'input' element accepts\n     * type InputProps = React.ComponentPropsWithRef<'input'>;\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * const MyComponent = (props: { foo: number, bar: string }) => <div />;\n     *\n     * // Retrieves the props 'MyComponent' accepts\n     * type MyComponentPropsWithRef = React.ComponentPropsWithRef<typeof MyComponent>;\n     * ```\n     */\n    type ComponentPropsWithRef<T extends ElementType> = T extends (new(props: infer P) => Component<any, any>)\n        ? PropsWithoutRef<P> & RefAttributes<InstanceType<T>>\n        : PropsWithRef<ComponentProps<T>>;\n    /**\n     * Used to retrieve the props a custom component accepts with its ref.\n     *\n     * Unlike {@link ComponentPropsWithRef}, this only works with custom\n     * components, i.e. components you define yourself. This is to improve\n     * type-checking performance.\n     *\n     * @example\n     *\n     * ```tsx\n     * const MyComponent = (props: { foo: number, bar: string }) => <div />;\n     *\n     * // Retrieves the props 'MyComponent' accepts\n     * type MyComponentPropsWithRef = React.CustomComponentPropsWithRef<typeof MyComponent>;\n     * ```\n     */\n    type CustomComponentPropsWithRef<T extends ComponentType> = T extends (new(props: infer P) => Component<any, any>)\n        ? (PropsWithoutRef<P> & RefAttributes<InstanceType<T>>)\n        : T extends ((props: infer P, legacyContext?: any) => ReactNode) ? PropsWithRef<P>\n        : never;\n\n    /**\n     * Used to retrieve the props a component accepts without its ref. Can either be\n     * passed a string, indicating a DOM element (e.g. 'div', 'span', etc.) or the\n     * type of a React component.\n     *\n     * @see {@link https://react-typescript-cheatsheet.netlify.app/docs/react-types/componentprops/ React TypeScript Cheatsheet}\n     *\n     * @example\n     *\n     * ```tsx\n     * // Retrieves the props an 'input' element accepts\n     * type InputProps = React.ComponentPropsWithoutRef<'input'>;\n     * ```\n     *\n     * @example\n     *\n     * ```tsx\n     * const MyComponent = (props: { foo: number, bar: string }) => <div />;\n     *\n     * // Retrieves the props 'MyComponent' accepts\n     * type MyComponentPropsWithoutRef = React.ComponentPropsWithoutRef<typeof MyComponent>;\n     * ```\n     */\n    type ComponentPropsWithoutRef<T extends ElementType> = PropsWithoutRef<ComponentProps<T>>;\n\n    type ComponentRef<T extends ElementType> = T extends NamedExoticComponent<\n        ComponentPropsWithoutRef<T> & RefAttributes<infer Method>\n    > ? Method\n        : ComponentPropsWithRef<T> extends RefAttributes<infer Method> ? Method\n        : never;\n\n    // will show `Memo(${Component.displayName || Component.name})` in devtools by default,\n    // but can be given its own specific name\n    type MemoExoticComponent<T extends ComponentType<any>> = NamedExoticComponent<CustomComponentPropsWithRef<T>> & {\n        readonly type: T;\n    };\n\n    /**\n     * Lets you skip re-rendering a component when its props are unchanged.\n     *\n     * @see {@link https://react.dev/reference/react/memo React Docs}\n     *\n     * @param Component The component to memoize.\n     * @param propsAreEqual A function that will be used to determine if the props have changed.\n     *\n     * @example\n     *\n     * ```tsx\n     * import { memo } from 'react';\n     *\n     * const SomeComponent = memo(function SomeComponent(props: { foo: string }) {\n     *   // ...\n     * });\n     * ```\n     */\n    function memo<P extends object>(\n        Component: FunctionComponent<P>,\n        propsAreEqual?: (prevProps: Readonly<P>, nextProps: Readonly<P>) => boolean,\n    ): NamedExoticComponent<P>;\n    function memo<T extends ComponentType<any>>(\n        Component: T,\n        propsAreEqual?: (prevProps: Readonly<ComponentProps<T>>, nextProps: Readonly<ComponentProps<T>>) => boolean,\n    ): MemoExoticComponent<T>;\n\n    interface LazyExoticComponent<T extends ComponentType<any>>\n        extends ExoticComponent<CustomComponentPropsWithRef<T>>\n    {\n        readonly _result: T;\n    }\n\n    /**\n     * Lets you defer loading a component’s code until it is rendered for the first time.\n     *\n     * @see {@link https://react.dev/reference/react/lazy React Docs}\n     *\n     * @param load A function that returns a `Promise` or another thenable (a `Promise`-like object with a\n     * then method). React will not call `load` until the first time you attempt to render the returned\n     * component. After React first calls load, it will wait for it to resolve, and then render the\n     * resolved value’s `.default` as a React component. Both the returned `Promise` and the `Promise`’s\n     * resolved value will be cached, so React will not call load more than once. If the `Promise` rejects,\n     * React will throw the rejection reason for the nearest Error Boundary to handle.\n     *\n     * @example\n     *\n     * ```tsx\n     * import { lazy } from 'react';\n     *\n     * const MarkdownPreview = lazy(() => import('./MarkdownPreview.js'));\n     * ```\n     */\n    function lazy<T extends ComponentType<any>>(\n        load: () => Promise<{ default: T }>,\n    ): LazyExoticComponent<T>;\n\n    //\n    // React Hooks\n    // ----------------------------------------------------------------------\n\n    /**\n     * The instruction passed to a {@link Dispatch} function in {@link useState}\n     * to tell React what the next value of the {@link useState} should be.\n     *\n     * Often found wrapped in {@link Dispatch}.\n     *\n     * @template S The type of the state.\n     *\n     * @example\n     *\n     * ```tsx\n     * // This return type correctly represents the type of\n     * // `setCount` in the example below.\n     * const useCustomState = (): Dispatch<SetStateAction<number>> => {\n     *   const [count, setCount] = useState(0);\n     *\n     *   return setCount;\n     * }\n     * ```\n     */\n    type SetStateAction<S> = S | ((prevState: S) => S);\n\n    /**\n     * A function that can be used to update the state of a {@link useState}\n     * or {@link useReducer} hook.\n     */\n    type Dispatch<A> = (value: A) => void;\n    /**\n     * A {@link Dispatch} function can sometimes be called without any arguments.\n     */\n    type DispatchWithoutAction = () => void;\n    // Unlike redux, the actions _can_ be anything\n    type Reducer<S, A> = (prevState: S, action: A) => S;\n    // If useReducer accepts a reducer without action, dispatch may be called without any parameters.\n    type ReducerWithoutAction<S> = (prevState: S) => S;\n    // types used to try and prevent the compiler from reducing S\n    // to a supertype common with the second argument to useReducer()\n    type ReducerState<R extends Reducer<any, any>> = R extends Reducer<infer S, any> ? S : never;\n    type ReducerAction<R extends Reducer<any, any>> = R extends Reducer<any, infer A> ? A : never;\n    // The identity check is done with the SameValue algorithm (Object.is), which is stricter than ===\n    type ReducerStateWithoutAction<R extends ReducerWithoutAction<any>> = R extends ReducerWithoutAction<infer S> ? S\n        : never;\n    type DependencyList = readonly unknown[];\n\n    // NOTE: callbacks are _only_ allowed to return either void, or a destructor.\n    type EffectCallback = () => void | Destructor;\n\n    interface MutableRefObject<T> {\n        current: T;\n    }\n\n    // This will technically work if you give a Consumer<T> or Provider<T> but it's deprecated and warns\n    /**\n     * Accepts a context object (the value returned from `React.createContext`) and returns the current\n     * context value, as given by the nearest context provider for the given context.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useContext}\n     */\n    function useContext<T>(context: Context<T> /*, (not public API) observedBits?: number|boolean */): T;\n    /**\n     * Returns a stateful value, and a function to update it.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useState}\n     */\n    function useState<S>(initialState: S | (() => S)): [S, Dispatch<SetStateAction<S>>];\n    // convenience overload when first argument is omitted\n    /**\n     * Returns a stateful value, and a function to update it.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useState}\n     */\n    function useState<S = undefined>(): [S | undefined, Dispatch<SetStateAction<S | undefined>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useReducer}\n     */\n    // overload where dispatch could accept 0 arguments.\n    function useReducer<R extends ReducerWithoutAction<any>, I>(\n        reducer: R,\n        initializerArg: I,\n        initializer: (arg: I) => ReducerStateWithoutAction<R>,\n    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useReducer}\n     */\n    // overload where dispatch could accept 0 arguments.\n    function useReducer<R extends ReducerWithoutAction<any>>(\n        reducer: R,\n        initializerArg: ReducerStateWithoutAction<R>,\n        initializer?: undefined,\n    ): [ReducerStateWithoutAction<R>, DispatchWithoutAction];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useReducer}\n     */\n    // overload where \"I\" may be a subset of ReducerState<R>; used to provide autocompletion.\n    // If \"I\" matches ReducerState<R> exactly then the last overload will allow initializer to be omitted.\n    // the last overload effectively behaves as if the identity function (x => x) is the initializer.\n    function useReducer<R extends Reducer<any, any>, I>(\n        reducer: R,\n        initializerArg: I & ReducerState<R>,\n        initializer: (arg: I & ReducerState<R>) => ReducerState<R>,\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useReducer}\n     */\n    // overload for free \"I\"; all goes as long as initializer converts it into \"ReducerState<R>\".\n    function useReducer<R extends Reducer<any, any>, I>(\n        reducer: R,\n        initializerArg: I,\n        initializer: (arg: I) => ReducerState<R>,\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * An alternative to `useState`.\n     *\n     * `useReducer` is usually preferable to `useState` when you have complex state logic that involves\n     * multiple sub-values. It also lets you optimize performance for components that trigger deep\n     * updates because you can pass `dispatch` down instead of callbacks.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useReducer}\n     */\n\n    // I'm not sure if I keep this 2-ary or if I make it (2,3)-ary; it's currently (2,3)-ary.\n    // The Flow types do have an overload for 3-ary invocation with undefined initializer.\n\n    // NOTE: without the ReducerState indirection, TypeScript would reduce S to be the most common\n    // supertype between the reducer's return type and the initialState (or the initializer's return type),\n    // which would prevent autocompletion from ever working.\n\n    // TODO: double-check if this weird overload logic is necessary. It is possible it's either a bug\n    // in older versions, or a regression in newer versions of the typescript completion service.\n    function useReducer<R extends Reducer<any, any>>(\n        reducer: R,\n        initialState: ReducerState<R>,\n        initializer?: undefined,\n    ): [ReducerState<R>, Dispatch<ReducerAction<R>>];\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useRef}\n     */\n    function useRef<T>(initialValue: T): MutableRefObject<T>;\n    // convenience overload for refs given as a ref prop as they typically start with a null value\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * Usage note: if you need the result of useRef to be directly mutable, include `| null` in the type\n     * of the generic argument.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useRef}\n     */\n    function useRef<T>(initialValue: T | null): RefObject<T>;\n    // convenience overload for potentially undefined initialValue / call with 0 arguments\n    // has a default to stop it from defaulting to {} instead\n    /**\n     * `useRef` returns a mutable ref object whose `.current` property is initialized to the passed argument\n     * (`initialValue`). The returned object will persist for the full lifetime of the component.\n     *\n     * Note that `useRef()` is useful for more than the `ref` attribute. It’s handy for keeping any mutable\n     * value around similar to how you’d use instance fields in classes.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useRef}\n     */\n    function useRef<T = undefined>(): MutableRefObject<T | undefined>;\n    /**\n     * The signature is identical to `useEffect`, but it fires synchronously after all DOM mutations.\n     * Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside\n     * `useLayoutEffect` will be flushed synchronously, before the browser has a chance to paint.\n     *\n     * Prefer the standard `useEffect` when possible to avoid blocking visual updates.\n     *\n     * If you’re migrating code from a class component, `useLayoutEffect` fires in the same phase as\n     * `componentDidMount` and `componentDidUpdate`.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useLayoutEffect}\n     */\n    function useLayoutEffect(effect: EffectCallback, deps?: DependencyList): void;\n    /**\n     * Accepts a function that contains imperative, possibly effectful code.\n     *\n     * @param effect Imperative function that can return a cleanup function\n     * @param deps If present, effect will only activate if the values in the list change.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useEffect}\n     */\n    function useEffect(effect: EffectCallback, deps?: DependencyList): void;\n    // NOTE: this does not accept strings, but this will have to be fixed by removing strings from type Ref<T>\n    /**\n     * `useImperativeHandle` customizes the instance value that is exposed to parent components when using\n     * `ref`. As always, imperative code using refs should be avoided in most cases.\n     *\n     * `useImperativeHandle` should be used with `React.forwardRef`.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useImperativeHandle}\n     */\n    function useImperativeHandle<T, R extends T>(ref: Ref<T> | undefined, init: () => R, deps?: DependencyList): void;\n    // I made 'inputs' required here and in useMemo as there's no point to memoizing without the memoization key\n    // useCallback(X) is identical to just using X, useMemo(() => Y) is identical to just using Y.\n    /**\n     * `useCallback` will return a memoized version of the callback that only changes if one of the `inputs`\n     * has changed.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useCallback}\n     */\n    // A specific function type would not trigger implicit any.\n    // See https://github.com/DefinitelyTyped/DefinitelyTyped/issues/52873#issuecomment-845806435 for a comparison between `Function` and more specific types.\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    function useCallback<T extends Function>(callback: T, deps: DependencyList): T;\n    /**\n     * `useMemo` will only recompute the memoized value when one of the `deps` has changed.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useMemo}\n     */\n    // allow undefined, but don't make it optional as that is very likely a mistake\n    function useMemo<T>(factory: () => T, deps: DependencyList): T;\n    /**\n     * `useDebugValue` can be used to display a label for custom hooks in React DevTools.\n     *\n     * NOTE: We don’t recommend adding debug values to every custom hook.\n     * It’s most valuable for custom hooks that are part of shared libraries.\n     *\n     * @version 16.8.0\n     * @see {@link https://react.dev/reference/react/useDebugValue}\n     */\n    // the name of the custom hook is itself derived from the function name at runtime:\n    // it's just the function name without the \"use\" prefix.\n    function useDebugValue<T>(value: T, format?: (value: T) => any): void;\n\n    // must be synchronous\n    export type TransitionFunction = () => VoidOrUndefinedOnly;\n    // strange definition to allow vscode to show documentation on the invocation\n    export interface TransitionStartFunction {\n        /**\n         * State updates caused inside the callback are allowed to be deferred.\n         *\n         * **If some state update causes a component to suspend, that state update should be wrapped in a transition.**\n         *\n         * @param callback A _synchronous_ function which causes state updates that can be deferred.\n         */\n        (callback: TransitionFunction): void;\n    }\n\n    /**\n     * Returns a deferred version of the value that may “lag behind” it.\n     *\n     * This is commonly used to keep the interface responsive when you have something that renders immediately\n     * based on user input and something that needs to wait for a data fetch.\n     *\n     * A good example of this is a text input.\n     *\n     * @param value The value that is going to be deferred\n     *\n     * @see {@link https://react.dev/reference/react/useDeferredValue}\n     */\n    export function useDeferredValue<T>(value: T): T;\n\n    /**\n     * Allows components to avoid undesirable loading states by waiting for content to load\n     * before transitioning to the next screen. It also allows components to defer slower,\n     * data fetching updates until subsequent renders so that more crucial updates can be\n     * rendered immediately.\n     *\n     * The `useTransition` hook returns two values in an array.\n     *\n     * The first is a boolean, React’s way of informing us whether we’re waiting for the transition to finish.\n     * The second is a function that takes a callback. We can use it to tell React which state we want to defer.\n     *\n     * **If some state update causes a component to suspend, that state update should be wrapped in a transition.**\n     *\n     * @see {@link https://react.dev/reference/react/useTransition}\n     */\n    export function useTransition(): [boolean, TransitionStartFunction];\n\n    /**\n     * Similar to `useTransition` but allows uses where hooks are not available.\n     *\n     * @param callback A _synchronous_ function which causes state updates that can be deferred.\n     */\n    export function startTransition(scope: TransitionFunction): void;\n\n    export function useId(): string;\n\n    /**\n     * @param effect Imperative function that can return a cleanup function\n     * @param deps If present, effect will only activate if the values in the list change.\n     *\n     * @see {@link https://github.com/facebook/react/pull/21913}\n     */\n    export function useInsertionEffect(effect: EffectCallback, deps?: DependencyList): void;\n\n    /**\n     * @param subscribe\n     * @param getSnapshot\n     *\n     * @see {@link https://github.com/reactwg/react-18/discussions/86}\n     */\n    // keep in sync with `useSyncExternalStore` from `use-sync-external-store`\n    export function useSyncExternalStore<Snapshot>(\n        subscribe: (onStoreChange: () => void) => () => void,\n        getSnapshot: () => Snapshot,\n        getServerSnapshot?: () => Snapshot,\n    ): Snapshot;\n\n    //\n    // Event System\n    // ----------------------------------------------------------------------\n    // TODO: change any to unknown when moving to TS v3\n    interface BaseSyntheticEvent<E = object, C = any, T = any> {\n        nativeEvent: E;\n        currentTarget: C;\n        target: T;\n        bubbles: boolean;\n        cancelable: boolean;\n        defaultPrevented: boolean;\n        eventPhase: number;\n        isTrusted: boolean;\n        preventDefault(): void;\n        isDefaultPrevented(): boolean;\n        stopPropagation(): void;\n        isPropagationStopped(): boolean;\n        persist(): void;\n        timeStamp: number;\n        type: string;\n    }\n\n    /**\n     * currentTarget - a reference to the element on which the event listener is registered.\n     *\n     * target - a reference to the element from which the event was originally dispatched.\n     * This might be a child element to the element on which the event listener is registered.\n     * If you thought this should be `EventTarget & T`, see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/11508#issuecomment-256045682\n     */\n    interface SyntheticEvent<T = Element, E = Event> extends BaseSyntheticEvent<E, EventTarget & T, EventTarget> {}\n\n    interface ClipboardEvent<T = Element> extends SyntheticEvent<T, NativeClipboardEvent> {\n        clipboardData: DataTransfer;\n    }\n\n    interface CompositionEvent<T = Element> extends SyntheticEvent<T, NativeCompositionEvent> {\n        data: string;\n    }\n\n    interface DragEvent<T = Element> extends MouseEvent<T, NativeDragEvent> {\n        dataTransfer: DataTransfer;\n    }\n\n    interface PointerEvent<T = Element> extends MouseEvent<T, NativePointerEvent> {\n        pointerId: number;\n        pressure: number;\n        tangentialPressure: number;\n        tiltX: number;\n        tiltY: number;\n        twist: number;\n        width: number;\n        height: number;\n        pointerType: \"mouse\" | \"pen\" | \"touch\";\n        isPrimary: boolean;\n    }\n\n    interface FocusEvent<Target = Element, RelatedTarget = Element> extends SyntheticEvent<Target, NativeFocusEvent> {\n        relatedTarget: (EventTarget & RelatedTarget) | null;\n        target: EventTarget & Target;\n    }\n\n    interface FormEvent<T = Element> extends SyntheticEvent<T> {\n    }\n\n    interface InvalidEvent<T = Element> extends SyntheticEvent<T> {\n        target: EventTarget & T;\n    }\n\n    interface ChangeEvent<T = Element> extends SyntheticEvent<T> {\n        target: EventTarget & T;\n    }\n\n    export type ModifierKey =\n        | \"Alt\"\n        | \"AltGraph\"\n        | \"CapsLock\"\n        | \"Control\"\n        | \"Fn\"\n        | \"FnLock\"\n        | \"Hyper\"\n        | \"Meta\"\n        | \"NumLock\"\n        | \"ScrollLock\"\n        | \"Shift\"\n        | \"Super\"\n        | \"Symbol\"\n        | \"SymbolLock\";\n\n    interface KeyboardEvent<T = Element> extends UIEvent<T, NativeKeyboardEvent> {\n        altKey: boolean;\n        /** @deprecated */\n        charCode: number;\n        ctrlKey: boolean;\n        code: string;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: ModifierKey): boolean;\n        /**\n         * See the [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#named-key-attribute-values). for possible values\n         */\n        key: string;\n        /** @deprecated */\n        keyCode: number;\n        locale: string;\n        location: number;\n        metaKey: boolean;\n        repeat: boolean;\n        shiftKey: boolean;\n        /** @deprecated */\n        which: number;\n    }\n\n    interface MouseEvent<T = Element, E = NativeMouseEvent> extends UIEvent<T, E> {\n        altKey: boolean;\n        button: number;\n        buttons: number;\n        clientX: number;\n        clientY: number;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: ModifierKey): boolean;\n        metaKey: boolean;\n        movementX: number;\n        movementY: number;\n        pageX: number;\n        pageY: number;\n        relatedTarget: EventTarget | null;\n        screenX: number;\n        screenY: number;\n        shiftKey: boolean;\n    }\n\n    interface TouchEvent<T = Element> extends UIEvent<T, NativeTouchEvent> {\n        altKey: boolean;\n        changedTouches: TouchList;\n        ctrlKey: boolean;\n        /**\n         * See [DOM Level 3 Events spec](https://www.w3.org/TR/uievents-key/#keys-modifier). for a list of valid (case-sensitive) arguments to this method.\n         */\n        getModifierState(key: ModifierKey): boolean;\n        metaKey: boolean;\n        shiftKey: boolean;\n        targetTouches: TouchList;\n        touches: TouchList;\n    }\n\n    interface UIEvent<T = Element, E = NativeUIEvent> extends SyntheticEvent<T, E> {\n        detail: number;\n        view: AbstractView;\n    }\n\n    interface WheelEvent<T = Element> extends MouseEvent<T, NativeWheelEvent> {\n        deltaMode: number;\n        deltaX: number;\n        deltaY: number;\n        deltaZ: number;\n    }\n\n    interface AnimationEvent<T = Element> extends SyntheticEvent<T, NativeAnimationEvent> {\n        animationName: string;\n        elapsedTime: number;\n        pseudoElement: string;\n    }\n\n    interface TransitionEvent<T = Element> extends SyntheticEvent<T, NativeTransitionEvent> {\n        elapsedTime: number;\n        propertyName: string;\n        pseudoElement: string;\n    }\n\n    //\n    // Event Handler Types\n    // ----------------------------------------------------------------------\n\n    type EventHandler<E extends SyntheticEvent<any>> = { bivarianceHack(event: E): void }[\"bivarianceHack\"];\n\n    type ReactEventHandler<T = Element> = EventHandler<SyntheticEvent<T>>;\n\n    type ClipboardEventHandler<T = Element> = EventHandler<ClipboardEvent<T>>;\n    type CompositionEventHandler<T = Element> = EventHandler<CompositionEvent<T>>;\n    type DragEventHandler<T = Element> = EventHandler<DragEvent<T>>;\n    type FocusEventHandler<T = Element> = EventHandler<FocusEvent<T>>;\n    type FormEventHandler<T = Element> = EventHandler<FormEvent<T>>;\n    type ChangeEventHandler<T = Element> = EventHandler<ChangeEvent<T>>;\n    type KeyboardEventHandler<T = Element> = EventHandler<KeyboardEvent<T>>;\n    type MouseEventHandler<T = Element> = EventHandler<MouseEvent<T>>;\n    type TouchEventHandler<T = Element> = EventHandler<TouchEvent<T>>;\n    type PointerEventHandler<T = Element> = EventHandler<PointerEvent<T>>;\n    type UIEventHandler<T = Element> = EventHandler<UIEvent<T>>;\n    type WheelEventHandler<T = Element> = EventHandler<WheelEvent<T>>;\n    type AnimationEventHandler<T = Element> = EventHandler<AnimationEvent<T>>;\n    type TransitionEventHandler<T = Element> = EventHandler<TransitionEvent<T>>;\n\n    //\n    // Props / DOM Attributes\n    // ----------------------------------------------------------------------\n\n    interface HTMLProps<T> extends AllHTMLAttributes<T>, ClassAttributes<T> {\n    }\n\n    type DetailedHTMLProps<E extends HTMLAttributes<T>, T> = ClassAttributes<T> & E;\n\n    interface SVGProps<T> extends SVGAttributes<T>, ClassAttributes<T> {\n    }\n\n    interface SVGLineElementAttributes<T> extends SVGProps<T> {}\n    interface SVGTextElementAttributes<T> extends SVGProps<T> {}\n\n    interface DOMAttributes<T> {\n        children?: ReactNode | undefined;\n        dangerouslySetInnerHTML?: {\n            // Should be InnerHTML['innerHTML'].\n            // But unfortunately we're mixing renderer-specific type declarations.\n            __html: string | TrustedHTML;\n        } | undefined;\n\n        // Clipboard Events\n        onCopy?: ClipboardEventHandler<T> | undefined;\n        onCopyCapture?: ClipboardEventHandler<T> | undefined;\n        onCut?: ClipboardEventHandler<T> | undefined;\n        onCutCapture?: ClipboardEventHandler<T> | undefined;\n        onPaste?: ClipboardEventHandler<T> | undefined;\n        onPasteCapture?: ClipboardEventHandler<T> | undefined;\n\n        // Composition Events\n        onCompositionEnd?: CompositionEventHandler<T> | undefined;\n        onCompositionEndCapture?: CompositionEventHandler<T> | undefined;\n        onCompositionStart?: CompositionEventHandler<T> | undefined;\n        onCompositionStartCapture?: CompositionEventHandler<T> | undefined;\n        onCompositionUpdate?: CompositionEventHandler<T> | undefined;\n        onCompositionUpdateCapture?: CompositionEventHandler<T> | undefined;\n\n        // Focus Events\n        onFocus?: FocusEventHandler<T> | undefined;\n        onFocusCapture?: FocusEventHandler<T> | undefined;\n        onBlur?: FocusEventHandler<T> | undefined;\n        onBlurCapture?: FocusEventHandler<T> | undefined;\n\n        // Form Events\n        onChange?: FormEventHandler<T> | undefined;\n        onChangeCapture?: FormEventHandler<T> | undefined;\n        onBeforeInput?: FormEventHandler<T> | undefined;\n        onBeforeInputCapture?: FormEventHandler<T> | undefined;\n        onInput?: FormEventHandler<T> | undefined;\n        onInputCapture?: FormEventHandler<T> | undefined;\n        onReset?: FormEventHandler<T> | undefined;\n        onResetCapture?: FormEventHandler<T> | undefined;\n        onSubmit?: FormEventHandler<T> | undefined;\n        onSubmitCapture?: FormEventHandler<T> | undefined;\n        onInvalid?: FormEventHandler<T> | undefined;\n        onInvalidCapture?: FormEventHandler<T> | undefined;\n\n        // Image Events\n        onLoad?: ReactEventHandler<T> | undefined;\n        onLoadCapture?: ReactEventHandler<T> | undefined;\n        onError?: ReactEventHandler<T> | undefined; // also a Media Event\n        onErrorCapture?: ReactEventHandler<T> | undefined; // also a Media Event\n\n        // Keyboard Events\n        onKeyDown?: KeyboardEventHandler<T> | undefined;\n        onKeyDownCapture?: KeyboardEventHandler<T> | undefined;\n        /** @deprecated */\n        onKeyPress?: KeyboardEventHandler<T> | undefined;\n        /** @deprecated */\n        onKeyPressCapture?: KeyboardEventHandler<T> | undefined;\n        onKeyUp?: KeyboardEventHandler<T> | undefined;\n        onKeyUpCapture?: KeyboardEventHandler<T> | undefined;\n\n        // Media Events\n        onAbort?: ReactEventHandler<T> | undefined;\n        onAbortCapture?: ReactEventHandler<T> | undefined;\n        onCanPlay?: ReactEventHandler<T> | undefined;\n        onCanPlayCapture?: ReactEventHandler<T> | undefined;\n        onCanPlayThrough?: ReactEventHandler<T> | undefined;\n        onCanPlayThroughCapture?: ReactEventHandler<T> | undefined;\n        onDurationChange?: ReactEventHandler<T> | undefined;\n        onDurationChangeCapture?: ReactEventHandler<T> | undefined;\n        onEmptied?: ReactEventHandler<T> | undefined;\n        onEmptiedCapture?: ReactEventHandler<T> | undefined;\n        onEncrypted?: ReactEventHandler<T> | undefined;\n        onEncryptedCapture?: ReactEventHandler<T> | undefined;\n        onEnded?: ReactEventHandler<T> | undefined;\n        onEndedCapture?: ReactEventHandler<T> | undefined;\n        onLoadedData?: ReactEventHandler<T> | undefined;\n        onLoadedDataCapture?: ReactEventHandler<T> | undefined;\n        onLoadedMetadata?: ReactEventHandler<T> | undefined;\n        onLoadedMetadataCapture?: ReactEventHandler<T> | undefined;\n        onLoadStart?: ReactEventHandler<T> | undefined;\n        onLoadStartCapture?: ReactEventHandler<T> | undefined;\n        onPause?: ReactEventHandler<T> | undefined;\n        onPauseCapture?: ReactEventHandler<T> | undefined;\n        onPlay?: ReactEventHandler<T> | undefined;\n        onPlayCapture?: ReactEventHandler<T> | undefined;\n        onPlaying?: ReactEventHandler<T> | undefined;\n        onPlayingCapture?: ReactEventHandler<T> | undefined;\n        onProgress?: ReactEventHandler<T> | undefined;\n        onProgressCapture?: ReactEventHandler<T> | undefined;\n        onRateChange?: ReactEventHandler<T> | undefined;\n        onRateChangeCapture?: ReactEventHandler<T> | undefined;\n        onResize?: ReactEventHandler<T> | undefined;\n        onResizeCapture?: ReactEventHandler<T> | undefined;\n        onSeeked?: ReactEventHandler<T> | undefined;\n        onSeekedCapture?: ReactEventHandler<T> | undefined;\n        onSeeking?: ReactEventHandler<T> | undefined;\n        onSeekingCapture?: ReactEventHandler<T> | undefined;\n        onStalled?: ReactEventHandler<T> | undefined;\n        onStalledCapture?: ReactEventHandler<T> | undefined;\n        onSuspend?: ReactEventHandler<T> | undefined;\n        onSuspendCapture?: ReactEventHandler<T> | undefined;\n        onTimeUpdate?: ReactEventHandler<T> | undefined;\n        onTimeUpdateCapture?: ReactEventHandler<T> | undefined;\n        onVolumeChange?: ReactEventHandler<T> | undefined;\n        onVolumeChangeCapture?: ReactEventHandler<T> | undefined;\n        onWaiting?: ReactEventHandler<T> | undefined;\n        onWaitingCapture?: ReactEventHandler<T> | undefined;\n\n        // MouseEvents\n        onAuxClick?: MouseEventHandler<T> | undefined;\n        onAuxClickCapture?: MouseEventHandler<T> | undefined;\n        onClick?: MouseEventHandler<T> | undefined;\n        onClickCapture?: MouseEventHandler<T> | undefined;\n        onContextMenu?: MouseEventHandler<T> | undefined;\n        onContextMenuCapture?: MouseEventHandler<T> | undefined;\n        onDoubleClick?: MouseEventHandler<T> | undefined;\n        onDoubleClickCapture?: MouseEventHandler<T> | undefined;\n        onDrag?: DragEventHandler<T> | undefined;\n        onDragCapture?: DragEventHandler<T> | undefined;\n        onDragEnd?: DragEventHandler<T> | undefined;\n        onDragEndCapture?: DragEventHandler<T> | undefined;\n        onDragEnter?: DragEventHandler<T> | undefined;\n        onDragEnterCapture?: DragEventHandler<T> | undefined;\n        onDragExit?: DragEventHandler<T> | undefined;\n        onDragExitCapture?: DragEventHandler<T> | undefined;\n        onDragLeave?: DragEventHandler<T> | undefined;\n        onDragLeaveCapture?: DragEventHandler<T> | undefined;\n        onDragOver?: DragEventHandler<T> | undefined;\n        onDragOverCapture?: DragEventHandler<T> | undefined;\n        onDragStart?: DragEventHandler<T> | undefined;\n        onDragStartCapture?: DragEventHandler<T> | undefined;\n        onDrop?: DragEventHandler<T> | undefined;\n        onDropCapture?: DragEventHandler<T> | undefined;\n        onMouseDown?: MouseEventHandler<T> | undefined;\n        onMouseDownCapture?: MouseEventHandler<T> | undefined;\n        onMouseEnter?: MouseEventHandler<T> | undefined;\n        onMouseLeave?: MouseEventHandler<T> | undefined;\n        onMouseMove?: MouseEventHandler<T> | undefined;\n        onMouseMoveCapture?: MouseEventHandler<T> | undefined;\n        onMouseOut?: MouseEventHandler<T> | undefined;\n        onMouseOutCapture?: MouseEventHandler<T> | undefined;\n        onMouseOver?: MouseEventHandler<T> | undefined;\n        onMouseOverCapture?: MouseEventHandler<T> | undefined;\n        onMouseUp?: MouseEventHandler<T> | undefined;\n        onMouseUpCapture?: MouseEventHandler<T> | undefined;\n\n        // Selection Events\n        onSelect?: ReactEventHandler<T> | undefined;\n        onSelectCapture?: ReactEventHandler<T> | undefined;\n\n        // Touch Events\n        onTouchCancel?: TouchEventHandler<T> | undefined;\n        onTouchCancelCapture?: TouchEventHandler<T> | undefined;\n        onTouchEnd?: TouchEventHandler<T> | undefined;\n        onTouchEndCapture?: TouchEventHandler<T> | undefined;\n        onTouchMove?: TouchEventHandler<T> | undefined;\n        onTouchMoveCapture?: TouchEventHandler<T> | undefined;\n        onTouchStart?: TouchEventHandler<T> | undefined;\n        onTouchStartCapture?: TouchEventHandler<T> | undefined;\n\n        // Pointer Events\n        onPointerDown?: PointerEventHandler<T> | undefined;\n        onPointerDownCapture?: PointerEventHandler<T> | undefined;\n        onPointerMove?: PointerEventHandler<T> | undefined;\n        onPointerMoveCapture?: PointerEventHandler<T> | undefined;\n        onPointerUp?: PointerEventHandler<T> | undefined;\n        onPointerUpCapture?: PointerEventHandler<T> | undefined;\n        onPointerCancel?: PointerEventHandler<T> | undefined;\n        onPointerCancelCapture?: PointerEventHandler<T> | undefined;\n        onPointerEnter?: PointerEventHandler<T> | undefined;\n        onPointerLeave?: PointerEventHandler<T> | undefined;\n        onPointerOver?: PointerEventHandler<T> | undefined;\n        onPointerOverCapture?: PointerEventHandler<T> | undefined;\n        onPointerOut?: PointerEventHandler<T> | undefined;\n        onPointerOutCapture?: PointerEventHandler<T> | undefined;\n        onGotPointerCapture?: PointerEventHandler<T> | undefined;\n        onGotPointerCaptureCapture?: PointerEventHandler<T> | undefined;\n        onLostPointerCapture?: PointerEventHandler<T> | undefined;\n        onLostPointerCaptureCapture?: PointerEventHandler<T> | undefined;\n\n        // UI Events\n        onScroll?: UIEventHandler<T> | undefined;\n        onScrollCapture?: UIEventHandler<T> | undefined;\n\n        // Wheel Events\n        onWheel?: WheelEventHandler<T> | undefined;\n        onWheelCapture?: WheelEventHandler<T> | undefined;\n\n        // Animation Events\n        onAnimationStart?: AnimationEventHandler<T> | undefined;\n        onAnimationStartCapture?: AnimationEventHandler<T> | undefined;\n        onAnimationEnd?: AnimationEventHandler<T> | undefined;\n        onAnimationEndCapture?: AnimationEventHandler<T> | undefined;\n        onAnimationIteration?: AnimationEventHandler<T> | undefined;\n        onAnimationIterationCapture?: AnimationEventHandler<T> | undefined;\n\n        // Transition Events\n        onTransitionEnd?: TransitionEventHandler<T> | undefined;\n        onTransitionEndCapture?: TransitionEventHandler<T> | undefined;\n    }\n\n    export interface CSSProperties extends CSS.Properties<string | number> {\n        /**\n         * The index signature was removed to enable closed typing for style\n         * using CSSType. You're able to use type assertion or module augmentation\n         * to add properties or an index signature of your own.\n         *\n         * For examples and more information, visit:\n         * https://github.com/frenic/csstype#what-should-i-do-when-i-get-type-errors\n         */\n    }\n\n    // All the WAI-ARIA 1.1 attributes from https://www.w3.org/TR/wai-aria-1.1/\n    interface AriaAttributes {\n        /** Identifies the currently active element when DOM focus is on a composite widget, textbox, group, or application. */\n        \"aria-activedescendant\"?: string | undefined;\n        /** Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. */\n        \"aria-atomic\"?: Booleanish | undefined;\n        /**\n         * Indicates whether inputting text could trigger display of one or more predictions of the user's intended value for an input and specifies how predictions would be\n         * presented if they are made.\n         */\n        \"aria-autocomplete\"?: \"none\" | \"inline\" | \"list\" | \"both\" | undefined;\n        /** Indicates an element is being modified and that assistive technologies MAY want to wait until the modifications are complete before exposing them to the user. */\n        /**\n         * Defines a string value that labels the current element, which is intended to be converted into Braille.\n         * @see aria-label.\n         */\n        \"aria-braillelabel\"?: string | undefined;\n        /**\n         * Defines a human-readable, author-localized abbreviated description for the role of an element, which is intended to be converted into Braille.\n         * @see aria-roledescription.\n         */\n        \"aria-brailleroledescription\"?: string | undefined;\n        \"aria-busy\"?: Booleanish | undefined;\n        /**\n         * Indicates the current \"checked\" state of checkboxes, radio buttons, and other widgets.\n         * @see aria-pressed @see aria-selected.\n         */\n        \"aria-checked\"?: boolean | \"false\" | \"mixed\" | \"true\" | undefined;\n        /**\n         * Defines the total number of columns in a table, grid, or treegrid.\n         * @see aria-colindex.\n         */\n        \"aria-colcount\"?: number | undefined;\n        /**\n         * Defines an element's column index or position with respect to the total number of columns within a table, grid, or treegrid.\n         * @see aria-colcount @see aria-colspan.\n         */\n        \"aria-colindex\"?: number | undefined;\n        /**\n         * Defines a human readable text alternative of aria-colindex.\n         * @see aria-rowindextext.\n         */\n        \"aria-colindextext\"?: string | undefined;\n        /**\n         * Defines the number of columns spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-colindex @see aria-rowspan.\n         */\n        \"aria-colspan\"?: number | undefined;\n        /**\n         * Identifies the element (or elements) whose contents or presence are controlled by the current element.\n         * @see aria-owns.\n         */\n        \"aria-controls\"?: string | undefined;\n        /** Indicates the element that represents the current item within a container or set of related elements. */\n        \"aria-current\"?: boolean | \"false\" | \"true\" | \"page\" | \"step\" | \"location\" | \"date\" | \"time\" | undefined;\n        /**\n         * Identifies the element (or elements) that describes the object.\n         * @see aria-labelledby\n         */\n        \"aria-describedby\"?: string | undefined;\n        /**\n         * Defines a string value that describes or annotates the current element.\n         * @see related aria-describedby.\n         */\n        \"aria-description\"?: string | undefined;\n        /**\n         * Identifies the element that provides a detailed, extended description for the object.\n         * @see aria-describedby.\n         */\n        \"aria-details\"?: string | undefined;\n        /**\n         * Indicates that the element is perceivable but disabled, so it is not editable or otherwise operable.\n         * @see aria-hidden @see aria-readonly.\n         */\n        \"aria-disabled\"?: Booleanish | undefined;\n        /**\n         * Indicates what functions can be performed when a dragged object is released on the drop target.\n         * @deprecated in ARIA 1.1\n         */\n        \"aria-dropeffect\"?: \"none\" | \"copy\" | \"execute\" | \"link\" | \"move\" | \"popup\" | undefined;\n        /**\n         * Identifies the element that provides an error message for the object.\n         * @see aria-invalid @see aria-describedby.\n         */\n        \"aria-errormessage\"?: string | undefined;\n        /** Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed. */\n        \"aria-expanded\"?: Booleanish | undefined;\n        /**\n         * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,\n         * allows assistive technology to override the general default of reading in document source order.\n         */\n        \"aria-flowto\"?: string | undefined;\n        /**\n         * Indicates an element's \"grabbed\" state in a drag-and-drop operation.\n         * @deprecated in ARIA 1.1\n         */\n        \"aria-grabbed\"?: Booleanish | undefined;\n        /** Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element. */\n        \"aria-haspopup\"?: boolean | \"false\" | \"true\" | \"menu\" | \"listbox\" | \"tree\" | \"grid\" | \"dialog\" | undefined;\n        /**\n         * Indicates whether the element is exposed to an accessibility API.\n         * @see aria-disabled.\n         */\n        \"aria-hidden\"?: Booleanish | undefined;\n        /**\n         * Indicates the entered value does not conform to the format expected by the application.\n         * @see aria-errormessage.\n         */\n        \"aria-invalid\"?: boolean | \"false\" | \"true\" | \"grammar\" | \"spelling\" | undefined;\n        /** Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element. */\n        \"aria-keyshortcuts\"?: string | undefined;\n        /**\n         * Defines a string value that labels the current element.\n         * @see aria-labelledby.\n         */\n        \"aria-label\"?: string | undefined;\n        /**\n         * Identifies the element (or elements) that labels the current element.\n         * @see aria-describedby.\n         */\n        \"aria-labelledby\"?: string | undefined;\n        /** Defines the hierarchical level of an element within a structure. */\n        \"aria-level\"?: number | undefined;\n        /** Indicates that an element will be updated, and describes the types of updates the user agents, assistive technologies, and user can expect from the live region. */\n        \"aria-live\"?: \"off\" | \"assertive\" | \"polite\" | undefined;\n        /** Indicates whether an element is modal when displayed. */\n        \"aria-modal\"?: Booleanish | undefined;\n        /** Indicates whether a text box accepts multiple lines of input or only a single line. */\n        \"aria-multiline\"?: Booleanish | undefined;\n        /** Indicates that the user may select more than one item from the current selectable descendants. */\n        \"aria-multiselectable\"?: Booleanish | undefined;\n        /** Indicates whether the element's orientation is horizontal, vertical, or unknown/ambiguous. */\n        \"aria-orientation\"?: \"horizontal\" | \"vertical\" | undefined;\n        /**\n         * Identifies an element (or elements) in order to define a visual, functional, or contextual parent/child relationship\n         * between DOM elements where the DOM hierarchy cannot be used to represent the relationship.\n         * @see aria-controls.\n         */\n        \"aria-owns\"?: string | undefined;\n        /**\n         * Defines a short hint (a word or short phrase) intended to aid the user with data entry when the control has no value.\n         * A hint could be a sample value or a brief description of the expected format.\n         */\n        \"aria-placeholder\"?: string | undefined;\n        /**\n         * Defines an element's number or position in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-setsize.\n         */\n        \"aria-posinset\"?: number | undefined;\n        /**\n         * Indicates the current \"pressed\" state of toggle buttons.\n         * @see aria-checked @see aria-selected.\n         */\n        \"aria-pressed\"?: boolean | \"false\" | \"mixed\" | \"true\" | undefined;\n        /**\n         * Indicates that the element is not editable, but is otherwise operable.\n         * @see aria-disabled.\n         */\n        \"aria-readonly\"?: Booleanish | undefined;\n        /**\n         * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.\n         * @see aria-atomic.\n         */\n        \"aria-relevant\"?:\n            | \"additions\"\n            | \"additions removals\"\n            | \"additions text\"\n            | \"all\"\n            | \"removals\"\n            | \"removals additions\"\n            | \"removals text\"\n            | \"text\"\n            | \"text additions\"\n            | \"text removals\"\n            | undefined;\n        /** Indicates that user input is required on the element before a form may be submitted. */\n        \"aria-required\"?: Booleanish | undefined;\n        /** Defines a human-readable, author-localized description for the role of an element. */\n        \"aria-roledescription\"?: string | undefined;\n        /**\n         * Defines the total number of rows in a table, grid, or treegrid.\n         * @see aria-rowindex.\n         */\n        \"aria-rowcount\"?: number | undefined;\n        /**\n         * Defines an element's row index or position with respect to the total number of rows within a table, grid, or treegrid.\n         * @see aria-rowcount @see aria-rowspan.\n         */\n        \"aria-rowindex\"?: number | undefined;\n        /**\n         * Defines a human readable text alternative of aria-rowindex.\n         * @see aria-colindextext.\n         */\n        \"aria-rowindextext\"?: string | undefined;\n        /**\n         * Defines the number of rows spanned by a cell or gridcell within a table, grid, or treegrid.\n         * @see aria-rowindex @see aria-colspan.\n         */\n        \"aria-rowspan\"?: number | undefined;\n        /**\n         * Indicates the current \"selected\" state of various widgets.\n         * @see aria-checked @see aria-pressed.\n         */\n        \"aria-selected\"?: Booleanish | undefined;\n        /**\n         * Defines the number of items in the current set of listitems or treeitems. Not required if all elements in the set are present in the DOM.\n         * @see aria-posinset.\n         */\n        \"aria-setsize\"?: number | undefined;\n        /** Indicates if items in a table or grid are sorted in ascending or descending order. */\n        \"aria-sort\"?: \"none\" | \"ascending\" | \"descending\" | \"other\" | undefined;\n        /** Defines the maximum allowed value for a range widget. */\n        \"aria-valuemax\"?: number | undefined;\n        /** Defines the minimum allowed value for a range widget. */\n        \"aria-valuemin\"?: number | undefined;\n        /**\n         * Defines the current value for a range widget.\n         * @see aria-valuetext.\n         */\n        \"aria-valuenow\"?: number | undefined;\n        /** Defines the human readable text alternative of aria-valuenow for a range widget. */\n        \"aria-valuetext\"?: string | undefined;\n    }\n\n    // All the WAI-ARIA 1.1 role attribute values from https://www.w3.org/TR/wai-aria-1.1/#role_definitions\n    type AriaRole =\n        | \"alert\"\n        | \"alertdialog\"\n        | \"application\"\n        | \"article\"\n        | \"banner\"\n        | \"button\"\n        | \"cell\"\n        | \"checkbox\"\n        | \"columnheader\"\n        | \"combobox\"\n        | \"complementary\"\n        | \"contentinfo\"\n        | \"definition\"\n        | \"dialog\"\n        | \"directory\"\n        | \"document\"\n        | \"feed\"\n        | \"figure\"\n        | \"form\"\n        | \"grid\"\n        | \"gridcell\"\n        | \"group\"\n        | \"heading\"\n        | \"img\"\n        | \"link\"\n        | \"list\"\n        | \"listbox\"\n        | \"listitem\"\n        | \"log\"\n        | \"main\"\n        | \"marquee\"\n        | \"math\"\n        | \"menu\"\n        | \"menubar\"\n        | \"menuitem\"\n        | \"menuitemcheckbox\"\n        | \"menuitemradio\"\n        | \"navigation\"\n        | \"none\"\n        | \"note\"\n        | \"option\"\n        | \"presentation\"\n        | \"progressbar\"\n        | \"radio\"\n        | \"radiogroup\"\n        | \"region\"\n        | \"row\"\n        | \"rowgroup\"\n        | \"rowheader\"\n        | \"scrollbar\"\n        | \"search\"\n        | \"searchbox\"\n        | \"separator\"\n        | \"slider\"\n        | \"spinbutton\"\n        | \"status\"\n        | \"switch\"\n        | \"tab\"\n        | \"table\"\n        | \"tablist\"\n        | \"tabpanel\"\n        | \"term\"\n        | \"textbox\"\n        | \"timer\"\n        | \"toolbar\"\n        | \"tooltip\"\n        | \"tree\"\n        | \"treegrid\"\n        | \"treeitem\"\n        | (string & {});\n\n    interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        // React-specific Attributes\n        defaultChecked?: boolean | undefined;\n        defaultValue?: string | number | readonly string[] | undefined;\n        suppressContentEditableWarning?: boolean | undefined;\n        suppressHydrationWarning?: boolean | undefined;\n\n        // Standard HTML Attributes\n        accessKey?: string | undefined;\n        autoFocus?: boolean | undefined;\n        className?: string | undefined;\n        contentEditable?: Booleanish | \"inherit\" | \"plaintext-only\" | undefined;\n        contextMenu?: string | undefined;\n        dir?: string | undefined;\n        draggable?: Booleanish | undefined;\n        hidden?: boolean | undefined;\n        id?: string | undefined;\n        lang?: string | undefined;\n        nonce?: string | undefined;\n        slot?: string | undefined;\n        spellCheck?: Booleanish | undefined;\n        style?: CSSProperties | undefined;\n        tabIndex?: number | undefined;\n        title?: string | undefined;\n        translate?: \"yes\" | \"no\" | undefined;\n\n        // Unknown\n        radioGroup?: string | undefined; // <command>, <menuitem>\n\n        // WAI-ARIA\n        role?: AriaRole | undefined;\n\n        // RDFa Attributes\n        about?: string | undefined;\n        content?: string | undefined;\n        datatype?: string | undefined;\n        inlist?: any;\n        prefix?: string | undefined;\n        property?: string | undefined;\n        rel?: string | undefined;\n        resource?: string | undefined;\n        rev?: string | undefined;\n        typeof?: string | undefined;\n        vocab?: string | undefined;\n\n        // Non-standard Attributes\n        autoCapitalize?: string | undefined;\n        autoCorrect?: string | undefined;\n        autoSave?: string | undefined;\n        color?: string | undefined;\n        itemProp?: string | undefined;\n        itemScope?: boolean | undefined;\n        itemType?: string | undefined;\n        itemID?: string | undefined;\n        itemRef?: string | undefined;\n        results?: number | undefined;\n        security?: string | undefined;\n        unselectable?: \"on\" | \"off\" | undefined;\n\n        // Living Standard\n        /**\n         * Hints at the type of data that might be entered by the user while editing the element or its contents\n         * @see {@link https://html.spec.whatwg.org/multipage/interaction.html#input-modalities:-the-inputmode-attribute}\n         */\n        inputMode?: \"none\" | \"text\" | \"tel\" | \"url\" | \"email\" | \"numeric\" | \"decimal\" | \"search\" | undefined;\n        /**\n         * Specify that a standard HTML element should behave like a defined custom built-in element\n         * @see {@link https://html.spec.whatwg.org/multipage/custom-elements.html#attr-is}\n         */\n        is?: string | undefined;\n    }\n\n    /**\n     * For internal usage only.\n     * Different release channels declare additional types of ReactNode this particular release channel accepts.\n     * App or library types should never augment this interface.\n     */\n    interface DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS {}\n\n    interface AllHTMLAttributes<T> extends HTMLAttributes<T> {\n        // Standard HTML Attributes\n        accept?: string | undefined;\n        acceptCharset?: string | undefined;\n        action?:\n            | string\n            | undefined\n            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[\n                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS\n            ];\n        allowFullScreen?: boolean | undefined;\n        allowTransparency?: boolean | undefined;\n        alt?: string | undefined;\n        as?: string | undefined;\n        async?: boolean | undefined;\n        autoComplete?: string | undefined;\n        autoPlay?: boolean | undefined;\n        capture?: boolean | \"user\" | \"environment\" | undefined;\n        cellPadding?: number | string | undefined;\n        cellSpacing?: number | string | undefined;\n        charSet?: string | undefined;\n        challenge?: string | undefined;\n        checked?: boolean | undefined;\n        cite?: string | undefined;\n        classID?: string | undefined;\n        cols?: number | undefined;\n        colSpan?: number | undefined;\n        controls?: boolean | undefined;\n        coords?: string | undefined;\n        crossOrigin?: CrossOrigin;\n        data?: string | undefined;\n        dateTime?: string | undefined;\n        default?: boolean | undefined;\n        defer?: boolean | undefined;\n        disabled?: boolean | undefined;\n        download?: any;\n        encType?: string | undefined;\n        form?: string | undefined;\n        formAction?:\n            | string\n            | undefined\n            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[\n                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS\n            ];\n        formEncType?: string | undefined;\n        formMethod?: string | undefined;\n        formNoValidate?: boolean | undefined;\n        formTarget?: string | undefined;\n        frameBorder?: number | string | undefined;\n        headers?: string | undefined;\n        height?: number | string | undefined;\n        high?: number | undefined;\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        htmlFor?: string | undefined;\n        httpEquiv?: string | undefined;\n        integrity?: string | undefined;\n        keyParams?: string | undefined;\n        keyType?: string | undefined;\n        kind?: string | undefined;\n        label?: string | undefined;\n        list?: string | undefined;\n        loop?: boolean | undefined;\n        low?: number | undefined;\n        manifest?: string | undefined;\n        marginHeight?: number | undefined;\n        marginWidth?: number | undefined;\n        max?: number | string | undefined;\n        maxLength?: number | undefined;\n        media?: string | undefined;\n        mediaGroup?: string | undefined;\n        method?: string | undefined;\n        min?: number | string | undefined;\n        minLength?: number | undefined;\n        multiple?: boolean | undefined;\n        muted?: boolean | undefined;\n        name?: string | undefined;\n        noValidate?: boolean | undefined;\n        open?: boolean | undefined;\n        optimum?: number | undefined;\n        pattern?: string | undefined;\n        placeholder?: string | undefined;\n        playsInline?: boolean | undefined;\n        poster?: string | undefined;\n        preload?: string | undefined;\n        readOnly?: boolean | undefined;\n        required?: boolean | undefined;\n        reversed?: boolean | undefined;\n        rows?: number | undefined;\n        rowSpan?: number | undefined;\n        sandbox?: string | undefined;\n        scope?: string | undefined;\n        scoped?: boolean | undefined;\n        scrolling?: string | undefined;\n        seamless?: boolean | undefined;\n        selected?: boolean | undefined;\n        shape?: string | undefined;\n        size?: number | undefined;\n        sizes?: string | undefined;\n        span?: number | undefined;\n        src?: string | undefined;\n        srcDoc?: string | undefined;\n        srcLang?: string | undefined;\n        srcSet?: string | undefined;\n        start?: number | undefined;\n        step?: number | string | undefined;\n        summary?: string | undefined;\n        target?: string | undefined;\n        type?: string | undefined;\n        useMap?: string | undefined;\n        value?: string | readonly string[] | number | undefined;\n        width?: number | string | undefined;\n        wmode?: string | undefined;\n        wrap?: string | undefined;\n    }\n\n    type HTMLAttributeReferrerPolicy =\n        | \"\"\n        | \"no-referrer\"\n        | \"no-referrer-when-downgrade\"\n        | \"origin\"\n        | \"origin-when-cross-origin\"\n        | \"same-origin\"\n        | \"strict-origin\"\n        | \"strict-origin-when-cross-origin\"\n        | \"unsafe-url\";\n\n    type HTMLAttributeAnchorTarget =\n        | \"_self\"\n        | \"_blank\"\n        | \"_parent\"\n        | \"_top\"\n        | (string & {});\n\n    interface AnchorHTMLAttributes<T> extends HTMLAttributes<T> {\n        download?: any;\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        media?: string | undefined;\n        ping?: string | undefined;\n        target?: HTMLAttributeAnchorTarget | undefined;\n        type?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n    }\n\n    interface AudioHTMLAttributes<T> extends MediaHTMLAttributes<T> {}\n\n    interface AreaHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string | undefined;\n        coords?: string | undefined;\n        download?: any;\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        media?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        shape?: string | undefined;\n        target?: string | undefined;\n    }\n\n    interface BaseHTMLAttributes<T> extends HTMLAttributes<T> {\n        href?: string | undefined;\n        target?: string | undefined;\n    }\n\n    interface BlockquoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n    }\n\n    interface ButtonHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        formAction?:\n            | string\n            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[\n                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS\n            ]\n            | undefined;\n        formEncType?: string | undefined;\n        formMethod?: string | undefined;\n        formNoValidate?: boolean | undefined;\n        formTarget?: string | undefined;\n        name?: string | undefined;\n        type?: \"submit\" | \"reset\" | \"button\" | undefined;\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface CanvasHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface ColHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface ColgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        span?: number | undefined;\n    }\n\n    interface DataHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface DetailsHTMLAttributes<T> extends HTMLAttributes<T> {\n        open?: boolean | undefined;\n        onToggle?: ReactEventHandler<T> | undefined;\n        name?: string | undefined;\n    }\n\n    interface DelHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n        dateTime?: string | undefined;\n    }\n\n    interface DialogHTMLAttributes<T> extends HTMLAttributes<T> {\n        onCancel?: ReactEventHandler<T> | undefined;\n        onClose?: ReactEventHandler<T> | undefined;\n        open?: boolean | undefined;\n    }\n\n    interface EmbedHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string | undefined;\n        src?: string | undefined;\n        type?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface FieldsetHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        name?: string | undefined;\n    }\n\n    interface FormHTMLAttributes<T> extends HTMLAttributes<T> {\n        acceptCharset?: string | undefined;\n        action?:\n            | string\n            | undefined\n            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[\n                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS\n            ];\n        autoComplete?: string | undefined;\n        encType?: string | undefined;\n        method?: string | undefined;\n        name?: string | undefined;\n        noValidate?: boolean | undefined;\n        target?: string | undefined;\n    }\n\n    interface HtmlHTMLAttributes<T> extends HTMLAttributes<T> {\n        manifest?: string | undefined;\n    }\n\n    interface IframeHTMLAttributes<T> extends HTMLAttributes<T> {\n        allow?: string | undefined;\n        allowFullScreen?: boolean | undefined;\n        allowTransparency?: boolean | undefined;\n        /** @deprecated */\n        frameBorder?: number | string | undefined;\n        height?: number | string | undefined;\n        loading?: \"eager\" | \"lazy\" | undefined;\n        /** @deprecated */\n        marginHeight?: number | undefined;\n        /** @deprecated */\n        marginWidth?: number | undefined;\n        name?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        sandbox?: string | undefined;\n        /** @deprecated */\n        scrolling?: string | undefined;\n        seamless?: boolean | undefined;\n        src?: string | undefined;\n        srcDoc?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface ImgHTMLAttributes<T> extends HTMLAttributes<T> {\n        alt?: string | undefined;\n        crossOrigin?: CrossOrigin;\n        decoding?: \"async\" | \"auto\" | \"sync\" | undefined;\n        fetchPriority?: \"high\" | \"low\" | \"auto\";\n        height?: number | string | undefined;\n        loading?: \"eager\" | \"lazy\" | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        sizes?: string | undefined;\n        src?: string | undefined;\n        srcSet?: string | undefined;\n        useMap?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface InsHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n        dateTime?: string | undefined;\n    }\n\n    type HTMLInputTypeAttribute =\n        | \"button\"\n        | \"checkbox\"\n        | \"color\"\n        | \"date\"\n        | \"datetime-local\"\n        | \"email\"\n        | \"file\"\n        | \"hidden\"\n        | \"image\"\n        | \"month\"\n        | \"number\"\n        | \"password\"\n        | \"radio\"\n        | \"range\"\n        | \"reset\"\n        | \"search\"\n        | \"submit\"\n        | \"tel\"\n        | \"text\"\n        | \"time\"\n        | \"url\"\n        | \"week\"\n        | (string & {});\n\n    type AutoFillAddressKind = \"billing\" | \"shipping\";\n    type AutoFillBase = \"\" | \"off\" | \"on\";\n    type AutoFillContactField =\n        | \"email\"\n        | \"tel\"\n        | \"tel-area-code\"\n        | \"tel-country-code\"\n        | \"tel-extension\"\n        | \"tel-local\"\n        | \"tel-local-prefix\"\n        | \"tel-local-suffix\"\n        | \"tel-national\";\n    type AutoFillContactKind = \"home\" | \"mobile\" | \"work\";\n    type AutoFillCredentialField = \"webauthn\";\n    type AutoFillNormalField =\n        | \"additional-name\"\n        | \"address-level1\"\n        | \"address-level2\"\n        | \"address-level3\"\n        | \"address-level4\"\n        | \"address-line1\"\n        | \"address-line2\"\n        | \"address-line3\"\n        | \"bday-day\"\n        | \"bday-month\"\n        | \"bday-year\"\n        | \"cc-csc\"\n        | \"cc-exp\"\n        | \"cc-exp-month\"\n        | \"cc-exp-year\"\n        | \"cc-family-name\"\n        | \"cc-given-name\"\n        | \"cc-name\"\n        | \"cc-number\"\n        | \"cc-type\"\n        | \"country\"\n        | \"country-name\"\n        | \"current-password\"\n        | \"family-name\"\n        | \"given-name\"\n        | \"honorific-prefix\"\n        | \"honorific-suffix\"\n        | \"name\"\n        | \"new-password\"\n        | \"one-time-code\"\n        | \"organization\"\n        | \"postal-code\"\n        | \"street-address\"\n        | \"transaction-amount\"\n        | \"transaction-currency\"\n        | \"username\";\n    type OptionalPrefixToken<T extends string> = `${T} ` | \"\";\n    type OptionalPostfixToken<T extends string> = ` ${T}` | \"\";\n    type AutoFillField = AutoFillNormalField | `${OptionalPrefixToken<AutoFillContactKind>}${AutoFillContactField}`;\n    type AutoFillSection = `section-${string}`;\n    type AutoFill =\n        | AutoFillBase\n        | `${OptionalPrefixToken<AutoFillSection>}${OptionalPrefixToken<\n            AutoFillAddressKind\n        >}${AutoFillField}${OptionalPostfixToken<AutoFillCredentialField>}`;\n    type HTMLInputAutoCompleteAttribute = AutoFill | (string & {});\n\n    interface InputHTMLAttributes<T> extends HTMLAttributes<T> {\n        accept?: string | undefined;\n        alt?: string | undefined;\n        autoComplete?: HTMLInputAutoCompleteAttribute | undefined;\n        capture?: boolean | \"user\" | \"environment\" | undefined; // https://www.w3.org/TR/html-media-capture/#the-capture-attribute\n        checked?: boolean | undefined;\n        disabled?: boolean | undefined;\n        enterKeyHint?: \"enter\" | \"done\" | \"go\" | \"next\" | \"previous\" | \"search\" | \"send\" | undefined;\n        form?: string | undefined;\n        formAction?:\n            | string\n            | DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS[\n                keyof DO_NOT_USE_OR_YOU_WILL_BE_FIRED_EXPERIMENTAL_FORM_ACTIONS\n            ]\n            | undefined;\n        formEncType?: string | undefined;\n        formMethod?: string | undefined;\n        formNoValidate?: boolean | undefined;\n        formTarget?: string | undefined;\n        height?: number | string | undefined;\n        list?: string | undefined;\n        max?: number | string | undefined;\n        maxLength?: number | undefined;\n        min?: number | string | undefined;\n        minLength?: number | undefined;\n        multiple?: boolean | undefined;\n        name?: string | undefined;\n        pattern?: string | undefined;\n        placeholder?: string | undefined;\n        readOnly?: boolean | undefined;\n        required?: boolean | undefined;\n        size?: number | undefined;\n        src?: string | undefined;\n        step?: number | string | undefined;\n        type?: HTMLInputTypeAttribute | undefined;\n        value?: string | readonly string[] | number | undefined;\n        width?: number | string | undefined;\n\n        onChange?: ChangeEventHandler<T> | undefined;\n    }\n\n    interface KeygenHTMLAttributes<T> extends HTMLAttributes<T> {\n        challenge?: string | undefined;\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        keyType?: string | undefined;\n        keyParams?: string | undefined;\n        name?: string | undefined;\n    }\n\n    interface LabelHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string | undefined;\n        htmlFor?: string | undefined;\n    }\n\n    interface LiHTMLAttributes<T> extends HTMLAttributes<T> {\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface LinkHTMLAttributes<T> extends HTMLAttributes<T> {\n        as?: string | undefined;\n        crossOrigin?: CrossOrigin;\n        fetchPriority?: \"high\" | \"low\" | \"auto\";\n        href?: string | undefined;\n        hrefLang?: string | undefined;\n        integrity?: string | undefined;\n        media?: string | undefined;\n        imageSrcSet?: string | undefined;\n        imageSizes?: string | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        sizes?: string | undefined;\n        type?: string | undefined;\n        charSet?: string | undefined;\n    }\n\n    interface MapHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string | undefined;\n    }\n\n    interface MenuHTMLAttributes<T> extends HTMLAttributes<T> {\n        type?: string | undefined;\n    }\n\n    interface MediaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoPlay?: boolean | undefined;\n        controls?: boolean | undefined;\n        controlsList?: string | undefined;\n        crossOrigin?: CrossOrigin;\n        loop?: boolean | undefined;\n        mediaGroup?: string | undefined;\n        muted?: boolean | undefined;\n        playsInline?: boolean | undefined;\n        preload?: string | undefined;\n        src?: string | undefined;\n    }\n\n    interface MetaHTMLAttributes<T> extends HTMLAttributes<T> {\n        charSet?: string | undefined;\n        content?: string | undefined;\n        httpEquiv?: string | undefined;\n        media?: string | undefined;\n        name?: string | undefined;\n    }\n\n    interface MeterHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string | undefined;\n        high?: number | undefined;\n        low?: number | undefined;\n        max?: number | string | undefined;\n        min?: number | string | undefined;\n        optimum?: number | undefined;\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface QuoteHTMLAttributes<T> extends HTMLAttributes<T> {\n        cite?: string | undefined;\n    }\n\n    interface ObjectHTMLAttributes<T> extends HTMLAttributes<T> {\n        classID?: string | undefined;\n        data?: string | undefined;\n        form?: string | undefined;\n        height?: number | string | undefined;\n        name?: string | undefined;\n        type?: string | undefined;\n        useMap?: string | undefined;\n        width?: number | string | undefined;\n        wmode?: string | undefined;\n    }\n\n    interface OlHTMLAttributes<T> extends HTMLAttributes<T> {\n        reversed?: boolean | undefined;\n        start?: number | undefined;\n        type?: \"1\" | \"a\" | \"A\" | \"i\" | \"I\" | undefined;\n    }\n\n    interface OptgroupHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean | undefined;\n        label?: string | undefined;\n    }\n\n    interface OptionHTMLAttributes<T> extends HTMLAttributes<T> {\n        disabled?: boolean | undefined;\n        label?: string | undefined;\n        selected?: boolean | undefined;\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface OutputHTMLAttributes<T> extends HTMLAttributes<T> {\n        form?: string | undefined;\n        htmlFor?: string | undefined;\n        name?: string | undefined;\n    }\n\n    interface ParamHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string | undefined;\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface ProgressHTMLAttributes<T> extends HTMLAttributes<T> {\n        max?: number | string | undefined;\n        value?: string | readonly string[] | number | undefined;\n    }\n\n    interface SlotHTMLAttributes<T> extends HTMLAttributes<T> {\n        name?: string | undefined;\n    }\n\n    interface ScriptHTMLAttributes<T> extends HTMLAttributes<T> {\n        async?: boolean | undefined;\n        /** @deprecated */\n        charSet?: string | undefined;\n        crossOrigin?: CrossOrigin;\n        defer?: boolean | undefined;\n        integrity?: string | undefined;\n        noModule?: boolean | undefined;\n        referrerPolicy?: HTMLAttributeReferrerPolicy | undefined;\n        src?: string | undefined;\n        type?: string | undefined;\n    }\n\n    interface SelectHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoComplete?: string | undefined;\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        multiple?: boolean | undefined;\n        name?: string | undefined;\n        required?: boolean | undefined;\n        size?: number | undefined;\n        value?: string | readonly string[] | number | undefined;\n        onChange?: ChangeEventHandler<T> | undefined;\n    }\n\n    interface SourceHTMLAttributes<T> extends HTMLAttributes<T> {\n        height?: number | string | undefined;\n        media?: string | undefined;\n        sizes?: string | undefined;\n        src?: string | undefined;\n        srcSet?: string | undefined;\n        type?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface StyleHTMLAttributes<T> extends HTMLAttributes<T> {\n        media?: string | undefined;\n        scoped?: boolean | undefined;\n        type?: string | undefined;\n    }\n\n    interface TableHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | undefined;\n        bgcolor?: string | undefined;\n        border?: number | undefined;\n        cellPadding?: number | string | undefined;\n        cellSpacing?: number | string | undefined;\n        frame?: boolean | undefined;\n        rules?: \"none\" | \"groups\" | \"rows\" | \"columns\" | \"all\" | undefined;\n        summary?: string | undefined;\n        width?: number | string | undefined;\n    }\n\n    interface TextareaHTMLAttributes<T> extends HTMLAttributes<T> {\n        autoComplete?: string | undefined;\n        cols?: number | undefined;\n        dirName?: string | undefined;\n        disabled?: boolean | undefined;\n        form?: string | undefined;\n        maxLength?: number | undefined;\n        minLength?: number | undefined;\n        name?: string | undefined;\n        placeholder?: string | undefined;\n        readOnly?: boolean | undefined;\n        required?: boolean | undefined;\n        rows?: number | undefined;\n        value?: string | readonly string[] | number | undefined;\n        wrap?: string | undefined;\n\n        onChange?: ChangeEventHandler<T> | undefined;\n    }\n\n    interface TdHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\" | undefined;\n        colSpan?: number | undefined;\n        headers?: string | undefined;\n        rowSpan?: number | undefined;\n        scope?: string | undefined;\n        abbr?: string | undefined;\n        height?: number | string | undefined;\n        width?: number | string | undefined;\n        valign?: \"top\" | \"middle\" | \"bottom\" | \"baseline\" | undefined;\n    }\n\n    interface ThHTMLAttributes<T> extends HTMLAttributes<T> {\n        align?: \"left\" | \"center\" | \"right\" | \"justify\" | \"char\" | undefined;\n        colSpan?: number | undefined;\n        headers?: string | undefined;\n        rowSpan?: number | undefined;\n        scope?: string | undefined;\n        abbr?: string | undefined;\n    }\n\n    interface TimeHTMLAttributes<T> extends HTMLAttributes<T> {\n        dateTime?: string | undefined;\n    }\n\n    interface TrackHTMLAttributes<T> extends HTMLAttributes<T> {\n        default?: boolean | undefined;\n        kind?: string | undefined;\n        label?: string | undefined;\n        src?: string | undefined;\n        srcLang?: string | undefined;\n    }\n\n    interface VideoHTMLAttributes<T> extends MediaHTMLAttributes<T> {\n        height?: number | string | undefined;\n        playsInline?: boolean | undefined;\n        poster?: string | undefined;\n        width?: number | string | undefined;\n        disablePictureInPicture?: boolean | undefined;\n        disableRemotePlayback?: boolean | undefined;\n    }\n\n    // this list is \"complete\" in that it contains every SVG attribute\n    // that React supports, but the types can be improved.\n    // Full list here: https://facebook.github.io/react/docs/dom-elements.html\n    //\n    // The three broad type categories are (in order of restrictiveness):\n    //   - \"number | string\"\n    //   - \"string\"\n    //   - union of string literals\n    interface SVGAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n        // React-specific Attributes\n        suppressHydrationWarning?: boolean | undefined;\n\n        // Attributes which also defined in HTMLAttributes\n        // See comment in SVGDOMPropertyConfig.js\n        className?: string | undefined;\n        color?: string | undefined;\n        height?: number | string | undefined;\n        id?: string | undefined;\n        lang?: string | undefined;\n        max?: number | string | undefined;\n        media?: string | undefined;\n        method?: string | undefined;\n        min?: number | string | undefined;\n        name?: string | undefined;\n        style?: CSSProperties | undefined;\n        target?: string | undefined;\n        type?: string | undefined;\n        width?: number | string | undefined;\n\n        // Other HTML properties supported by SVG elements in browsers\n        role?: AriaRole | undefined;\n        tabIndex?: number | undefined;\n        crossOrigin?: CrossOrigin;\n\n        // SVG Specific attributes\n        accentHeight?: number | string | undefined;\n        accumulate?: \"none\" | \"sum\" | undefined;\n        additive?: \"replace\" | \"sum\" | undefined;\n        alignmentBaseline?:\n            | \"auto\"\n            | \"baseline\"\n            | \"before-edge\"\n            | \"text-before-edge\"\n            | \"middle\"\n            | \"central\"\n            | \"after-edge\"\n            | \"text-after-edge\"\n            | \"ideographic\"\n            | \"alphabetic\"\n            | \"hanging\"\n            | \"mathematical\"\n            | \"inherit\"\n            | undefined;\n        allowReorder?: \"no\" | \"yes\" | undefined;\n        alphabetic?: number | string | undefined;\n        amplitude?: number | string | undefined;\n        arabicForm?: \"initial\" | \"medial\" | \"terminal\" | \"isolated\" | undefined;\n        ascent?: number | string | undefined;\n        attributeName?: string | undefined;\n        attributeType?: string | undefined;\n        autoReverse?: Booleanish | undefined;\n        azimuth?: number | string | undefined;\n        baseFrequency?: number | string | undefined;\n        baselineShift?: number | string | undefined;\n        baseProfile?: number | string | undefined;\n        bbox?: number | string | undefined;\n        begin?: number | string | undefined;\n        bias?: number | string | undefined;\n        by?: number | string | undefined;\n        calcMode?: number | string | undefined;\n        capHeight?: number | string | undefined;\n        clip?: number | string | undefined;\n        clipPath?: string | undefined;\n        clipPathUnits?: number | string | undefined;\n        clipRule?: number | string | undefined;\n        colorInterpolation?: number | string | undefined;\n        colorInterpolationFilters?: \"auto\" | \"sRGB\" | \"linearRGB\" | \"inherit\" | undefined;\n        colorProfile?: number | string | undefined;\n        colorRendering?: number | string | undefined;\n        contentScriptType?: number | string | undefined;\n        contentStyleType?: number | string | undefined;\n        cursor?: number | string | undefined;\n        cx?: number | string | undefined;\n        cy?: number | string | undefined;\n        d?: string | undefined;\n        decelerate?: number | string | undefined;\n        descent?: number | string | undefined;\n        diffuseConstant?: number | string | undefined;\n        direction?: number | string | undefined;\n        display?: number | string | undefined;\n        divisor?: number | string | undefined;\n        dominantBaseline?: number | string | undefined;\n        dur?: number | string | undefined;\n        dx?: number | string | undefined;\n        dy?: number | string | undefined;\n        edgeMode?: number | string | undefined;\n        elevation?: number | string | undefined;\n        enableBackground?: number | string | undefined;\n        end?: number | string | undefined;\n        exponent?: number | string | undefined;\n        externalResourcesRequired?: Booleanish | undefined;\n        fill?: string | undefined;\n        fillOpacity?: number | string | undefined;\n        fillRule?: \"nonzero\" | \"evenodd\" | \"inherit\" | undefined;\n        filter?: string | undefined;\n        filterRes?: number | string | undefined;\n        filterUnits?: number | string | undefined;\n        floodColor?: number | string | undefined;\n        floodOpacity?: number | string | undefined;\n        focusable?: Booleanish | \"auto\" | undefined;\n        fontFamily?: string | undefined;\n        fontSize?: number | string | undefined;\n        fontSizeAdjust?: number | string | undefined;\n        fontStretch?: number | string | undefined;\n        fontStyle?: number | string | undefined;\n        fontVariant?: number | string | undefined;\n        fontWeight?: number | string | undefined;\n        format?: number | string | undefined;\n        fr?: number | string | undefined;\n        from?: number | string | undefined;\n        fx?: number | string | undefined;\n        fy?: number | string | undefined;\n        g1?: number | string | undefined;\n        g2?: number | string | undefined;\n        glyphName?: number | string | undefined;\n        glyphOrientationHorizontal?: number | string | undefined;\n        glyphOrientationVertical?: number | string | undefined;\n        glyphRef?: number | string | undefined;\n        gradientTransform?: string | undefined;\n        gradientUnits?: string | undefined;\n        hanging?: number | string | undefined;\n        horizAdvX?: number | string | undefined;\n        horizOriginX?: number | string | undefined;\n        href?: string | undefined;\n        ideographic?: number | string | undefined;\n        imageRendering?: number | string | undefined;\n        in2?: number | string | undefined;\n        in?: string | undefined;\n        intercept?: number | string | undefined;\n        k1?: number | string | undefined;\n        k2?: number | string | undefined;\n        k3?: number | string | undefined;\n        k4?: number | string | undefined;\n        k?: number | string | undefined;\n        kernelMatrix?: number | string | undefined;\n        kernelUnitLength?: number | string | undefined;\n        kerning?: number | string | undefined;\n        keyPoints?: number | string | undefined;\n        keySplines?: number | string | undefined;\n        keyTimes?: number | string | undefined;\n        lengthAdjust?: number | string | undefined;\n        letterSpacing?: number | string | undefined;\n        lightingColor?: number | string | undefined;\n        limitingConeAngle?: number | string | undefined;\n        local?: number | string | undefined;\n        markerEnd?: string | undefined;\n        markerHeight?: number | string | undefined;\n        markerMid?: string | undefined;\n        markerStart?: string | undefined;\n        markerUnits?: number | string | undefined;\n        markerWidth?: number | string | undefined;\n        mask?: string | undefined;\n        maskContentUnits?: number | string | undefined;\n        maskUnits?: number | string | undefined;\n        mathematical?: number | string | undefined;\n        mode?: number | string | undefined;\n        numOctaves?: number | string | undefined;\n        offset?: number | string | undefined;\n        opacity?: number | string | undefined;\n        operator?: number | string | undefined;\n        order?: number | string | undefined;\n        orient?: number | string | undefined;\n        orientation?: number | string | undefined;\n        origin?: number | string | undefined;\n        overflow?: number | string | undefined;\n        overlinePosition?: number | string | undefined;\n        overlineThickness?: number | string | undefined;\n        paintOrder?: number | string | undefined;\n        panose1?: number | string | undefined;\n        path?: string | undefined;\n        pathLength?: number | string | undefined;\n        patternContentUnits?: string | undefined;\n        patternTransform?: number | string | undefined;\n        patternUnits?: string | undefined;\n        pointerEvents?: number | string | undefined;\n        points?: string | undefined;\n        pointsAtX?: number | string | undefined;\n        pointsAtY?: number | string | undefined;\n        pointsAtZ?: number | string | undefined;\n        preserveAlpha?: Booleanish | undefined;\n        preserveAspectRatio?: string | undefined;\n        primitiveUnits?: number | string | undefined;\n        r?: number | string | undefined;\n        radius?: number | string | undefined;\n        refX?: number | string | undefined;\n        refY?: number | string | undefined;\n        renderingIntent?: number | string | undefined;\n        repeatCount?: number | string | undefined;\n        repeatDur?: number | string | undefined;\n        requiredExtensions?: number | string | undefined;\n        requiredFeatures?: number | string | undefined;\n        restart?: number | string | undefined;\n        result?: string | undefined;\n        rotate?: number | string | undefined;\n        rx?: number | string | undefined;\n        ry?: number | string | undefined;\n        scale?: number | string | undefined;\n        seed?: number | string | undefined;\n        shapeRendering?: number | string | undefined;\n        slope?: number | string | undefined;\n        spacing?: number | string | undefined;\n        specularConstant?: number | string | undefined;\n        specularExponent?: number | string | undefined;\n        speed?: number | string | undefined;\n        spreadMethod?: string | undefined;\n        startOffset?: number | string | undefined;\n        stdDeviation?: number | string | undefined;\n        stemh?: number | string | undefined;\n        stemv?: number | string | undefined;\n        stitchTiles?: number | string | undefined;\n        stopColor?: string | undefined;\n        stopOpacity?: number | string | undefined;\n        strikethroughPosition?: number | string | undefined;\n        strikethroughThickness?: number | string | undefined;\n        string?: number | string | undefined;\n        stroke?: string | undefined;\n        strokeDasharray?: string | number | undefined;\n        strokeDashoffset?: string | number | undefined;\n        strokeLinecap?: \"butt\" | \"round\" | \"square\" | \"inherit\" | undefined;\n        strokeLinejoin?: \"miter\" | \"round\" | \"bevel\" | \"inherit\" | undefined;\n        strokeMiterlimit?: number | string | undefined;\n        strokeOpacity?: number | string | undefined;\n        strokeWidth?: number | string | undefined;\n        surfaceScale?: number | string | undefined;\n        systemLanguage?: number | string | undefined;\n        tableValues?: number | string | undefined;\n        targetX?: number | string | undefined;\n        targetY?: number | string | undefined;\n        textAnchor?: string | undefined;\n        textDecoration?: number | string | undefined;\n        textLength?: number | string | undefined;\n        textRendering?: number | string | undefined;\n        to?: number | string | undefined;\n        transform?: string | undefined;\n        u1?: number | string | undefined;\n        u2?: number | string | undefined;\n        underlinePosition?: number | string | undefined;\n        underlineThickness?: number | string | undefined;\n        unicode?: number | string | undefined;\n        unicodeBidi?: number | string | undefined;\n        unicodeRange?: number | string | undefined;\n        unitsPerEm?: number | string | undefined;\n        vAlphabetic?: number | string | undefined;\n        values?: string | undefined;\n        vectorEffect?: number | string | undefined;\n        version?: string | undefined;\n        vertAdvY?: number | string | undefined;\n        vertOriginX?: number | string | undefined;\n        vertOriginY?: number | string | undefined;\n        vHanging?: number | string | undefined;\n        vIdeographic?: number | string | undefined;\n        viewBox?: string | undefined;\n        viewTarget?: number | string | undefined;\n        visibility?: number | string | undefined;\n        vMathematical?: number | string | undefined;\n        widths?: number | string | undefined;\n        wordSpacing?: number | string | undefined;\n        writingMode?: number | string | undefined;\n        x1?: number | string | undefined;\n        x2?: number | string | undefined;\n        x?: number | string | undefined;\n        xChannelSelector?: string | undefined;\n        xHeight?: number | string | undefined;\n        xlinkActuate?: string | undefined;\n        xlinkArcrole?: string | undefined;\n        xlinkHref?: string | undefined;\n        xlinkRole?: string | undefined;\n        xlinkShow?: string | undefined;\n        xlinkTitle?: string | undefined;\n        xlinkType?: string | undefined;\n        xmlBase?: string | undefined;\n        xmlLang?: string | undefined;\n        xmlns?: string | undefined;\n        xmlnsXlink?: string | undefined;\n        xmlSpace?: string | undefined;\n        y1?: number | string | undefined;\n        y2?: number | string | undefined;\n        y?: number | string | undefined;\n        yChannelSelector?: string | undefined;\n        z?: number | string | undefined;\n        zoomAndPan?: string | undefined;\n    }\n\n    interface WebViewHTMLAttributes<T> extends HTMLAttributes<T> {\n        allowFullScreen?: boolean | undefined;\n        allowpopups?: boolean | undefined;\n        autosize?: boolean | undefined;\n        blinkfeatures?: string | undefined;\n        disableblinkfeatures?: string | undefined;\n        disableguestresize?: boolean | undefined;\n        disablewebsecurity?: boolean | undefined;\n        guestinstance?: string | undefined;\n        httpreferrer?: string | undefined;\n        nodeintegration?: boolean | undefined;\n        partition?: string | undefined;\n        plugins?: boolean | undefined;\n        preload?: string | undefined;\n        src?: string | undefined;\n        useragent?: string | undefined;\n        webpreferences?: string | undefined;\n    }\n\n    //\n    // React.DOM\n    // ----------------------------------------------------------------------\n\n    interface ReactHTML {\n        a: DetailedHTMLFactory<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n        abbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        address: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        area: DetailedHTMLFactory<AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n        article: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        aside: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        audio: DetailedHTMLFactory<AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n        b: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        base: DetailedHTMLFactory<BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n        bdi: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        bdo: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        big: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        blockquote: DetailedHTMLFactory<BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n        body: DetailedHTMLFactory<HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n        br: DetailedHTMLFactory<HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n        button: DetailedHTMLFactory<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n        canvas: DetailedHTMLFactory<CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n        caption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        center: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        cite: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        code: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        col: DetailedHTMLFactory<ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n        colgroup: DetailedHTMLFactory<ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n        data: DetailedHTMLFactory<DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n        datalist: DetailedHTMLFactory<HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n        dd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        del: DetailedHTMLFactory<DelHTMLAttributes<HTMLModElement>, HTMLModElement>;\n        details: DetailedHTMLFactory<DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>;\n        dfn: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        dialog: DetailedHTMLFactory<DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n        div: DetailedHTMLFactory<HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n        dl: DetailedHTMLFactory<HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n        dt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        em: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        embed: DetailedHTMLFactory<EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n        fieldset: DetailedHTMLFactory<FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n        figcaption: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        figure: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        footer: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        form: DetailedHTMLFactory<FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n        h1: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h2: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h3: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h4: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h5: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        h6: DetailedHTMLFactory<HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n        head: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLHeadElement>;\n        header: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        hgroup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        hr: DetailedHTMLFactory<HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n        html: DetailedHTMLFactory<HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n        i: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        iframe: DetailedHTMLFactory<IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n        img: DetailedHTMLFactory<ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n        input: DetailedHTMLFactory<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n        ins: DetailedHTMLFactory<InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n        kbd: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        keygen: DetailedHTMLFactory<KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n        label: DetailedHTMLFactory<LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n        legend: DetailedHTMLFactory<HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n        li: DetailedHTMLFactory<LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n        link: DetailedHTMLFactory<LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n        main: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        map: DetailedHTMLFactory<MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n        mark: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        menu: DetailedHTMLFactory<MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n        menuitem: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        meta: DetailedHTMLFactory<MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n        meter: DetailedHTMLFactory<MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>;\n        nav: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        noscript: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        object: DetailedHTMLFactory<ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n        ol: DetailedHTMLFactory<OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n        optgroup: DetailedHTMLFactory<OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n        option: DetailedHTMLFactory<OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n        output: DetailedHTMLFactory<OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;\n        p: DetailedHTMLFactory<HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n        param: DetailedHTMLFactory<ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n        picture: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        pre: DetailedHTMLFactory<HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n        progress: DetailedHTMLFactory<ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n        q: DetailedHTMLFactory<QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n        rp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        rt: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        ruby: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        s: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        samp: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        search: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        slot: DetailedHTMLFactory<SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\n        script: DetailedHTMLFactory<ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n        section: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        select: DetailedHTMLFactory<SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n        small: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        source: DetailedHTMLFactory<SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n        span: DetailedHTMLFactory<HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n        strong: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        style: DetailedHTMLFactory<StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n        sub: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        summary: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        sup: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        table: DetailedHTMLFactory<TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n        template: DetailedHTMLFactory<HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n        tbody: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        td: DetailedHTMLFactory<TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n        textarea: DetailedHTMLFactory<TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n        tfoot: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        th: DetailedHTMLFactory<ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n        thead: DetailedHTMLFactory<HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n        time: DetailedHTMLFactory<TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>;\n        title: DetailedHTMLFactory<HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n        tr: DetailedHTMLFactory<HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n        track: DetailedHTMLFactory<TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n        u: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        ul: DetailedHTMLFactory<HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n        \"var\": DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        video: DetailedHTMLFactory<VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n        wbr: DetailedHTMLFactory<HTMLAttributes<HTMLElement>, HTMLElement>;\n        webview: DetailedHTMLFactory<WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n    }\n\n    interface ReactSVG {\n        animate: SVGFactory;\n        circle: SVGFactory;\n        clipPath: SVGFactory;\n        defs: SVGFactory;\n        desc: SVGFactory;\n        ellipse: SVGFactory;\n        feBlend: SVGFactory;\n        feColorMatrix: SVGFactory;\n        feComponentTransfer: SVGFactory;\n        feComposite: SVGFactory;\n        feConvolveMatrix: SVGFactory;\n        feDiffuseLighting: SVGFactory;\n        feDisplacementMap: SVGFactory;\n        feDistantLight: SVGFactory;\n        feDropShadow: SVGFactory;\n        feFlood: SVGFactory;\n        feFuncA: SVGFactory;\n        feFuncB: SVGFactory;\n        feFuncG: SVGFactory;\n        feFuncR: SVGFactory;\n        feGaussianBlur: SVGFactory;\n        feImage: SVGFactory;\n        feMerge: SVGFactory;\n        feMergeNode: SVGFactory;\n        feMorphology: SVGFactory;\n        feOffset: SVGFactory;\n        fePointLight: SVGFactory;\n        feSpecularLighting: SVGFactory;\n        feSpotLight: SVGFactory;\n        feTile: SVGFactory;\n        feTurbulence: SVGFactory;\n        filter: SVGFactory;\n        foreignObject: SVGFactory;\n        g: SVGFactory;\n        image: SVGFactory;\n        line: SVGFactory;\n        linearGradient: SVGFactory;\n        marker: SVGFactory;\n        mask: SVGFactory;\n        metadata: SVGFactory;\n        path: SVGFactory;\n        pattern: SVGFactory;\n        polygon: SVGFactory;\n        polyline: SVGFactory;\n        radialGradient: SVGFactory;\n        rect: SVGFactory;\n        stop: SVGFactory;\n        svg: SVGFactory;\n        switch: SVGFactory;\n        symbol: SVGFactory;\n        text: SVGFactory;\n        textPath: SVGFactory;\n        tspan: SVGFactory;\n        use: SVGFactory;\n        view: SVGFactory;\n    }\n\n    interface ReactDOM extends ReactHTML, ReactSVG {}\n\n    //\n    // React.PropTypes\n    // ----------------------------------------------------------------------\n\n    /**\n     * @deprecated Use `Validator` from the ´prop-types` instead.\n     */\n    type Validator<T> = PropTypes.Validator<T>;\n\n    /**\n     * @deprecated Use `Requireable` from the ´prop-types` instead.\n     */\n    type Requireable<T> = PropTypes.Requireable<T>;\n\n    /**\n     * @deprecated Use `ValidationMap` from the ´prop-types` instead.\n     */\n    type ValidationMap<T> = PropTypes.ValidationMap<T>;\n\n    /**\n     * @deprecated Use `WeakValidationMap` from the ´prop-types` instead.\n     */\n    type WeakValidationMap<T> = {\n        [K in keyof T]?: null extends T[K] ? Validator<T[K] | null | undefined>\n            : undefined extends T[K] ? Validator<T[K] | null | undefined>\n            : Validator<T[K]>;\n    };\n\n    /**\n     * @deprecated Use `PropTypes.*` where `PropTypes` comes from `import * as PropTypes from 'prop-types'` instead.\n     */\n    interface ReactPropTypes {\n        any: typeof PropTypes.any;\n        array: typeof PropTypes.array;\n        bool: typeof PropTypes.bool;\n        func: typeof PropTypes.func;\n        number: typeof PropTypes.number;\n        object: typeof PropTypes.object;\n        string: typeof PropTypes.string;\n        node: typeof PropTypes.node;\n        element: typeof PropTypes.element;\n        instanceOf: typeof PropTypes.instanceOf;\n        oneOf: typeof PropTypes.oneOf;\n        oneOfType: typeof PropTypes.oneOfType;\n        arrayOf: typeof PropTypes.arrayOf;\n        objectOf: typeof PropTypes.objectOf;\n        shape: typeof PropTypes.shape;\n        exact: typeof PropTypes.exact;\n    }\n\n    //\n    // React.Children\n    // ----------------------------------------------------------------------\n\n    /**\n     * @deprecated - Use `typeof React.Children` instead.\n     */\n    // Sync with type of `const Children`.\n    interface ReactChildren {\n        map<T, C>(\n            children: C | readonly C[],\n            fn: (child: C, index: number) => T,\n        ): C extends null | undefined ? C : Array<Exclude<T, boolean | null | undefined>>;\n        forEach<C>(children: C | readonly C[], fn: (child: C, index: number) => void): void;\n        count(children: any): number;\n        only<C>(children: C): C extends any[] ? never : C;\n        toArray(children: ReactNode | ReactNode[]): Array<Exclude<ReactNode, boolean | null | undefined>>;\n    }\n\n    //\n    // Browser Interfaces\n    // https://github.com/nikeee/2048-typescript/blob/master/2048/js/touch.d.ts\n    // ----------------------------------------------------------------------\n\n    interface AbstractView {\n        styleMedia: StyleMedia;\n        document: Document;\n    }\n\n    interface Touch {\n        identifier: number;\n        target: EventTarget;\n        screenX: number;\n        screenY: number;\n        clientX: number;\n        clientY: number;\n        pageX: number;\n        pageY: number;\n    }\n\n    interface TouchList {\n        [index: number]: Touch;\n        length: number;\n        item(index: number): Touch;\n        identifiedTouch(identifier: number): Touch;\n    }\n\n    //\n    // Error Interfaces\n    // ----------------------------------------------------------------------\n    interface ErrorInfo {\n        /**\n         * Captures which component contained the exception, and its ancestors.\n         */\n        componentStack?: string | null;\n        digest?: string | null;\n    }\n\n    // Keep in sync with JSX namespace in ./jsx-runtime.d.ts and ./jsx-dev-runtime.d.ts\n    namespace JSX {\n        type ElementType = GlobalJSXElementType;\n        interface Element extends GlobalJSXElement {}\n        interface ElementClass extends GlobalJSXElementClass {}\n        interface ElementAttributesProperty extends GlobalJSXElementAttributesProperty {}\n        interface ElementChildrenAttribute extends GlobalJSXElementChildrenAttribute {}\n\n        type LibraryManagedAttributes<C, P> = GlobalJSXLibraryManagedAttributes<C, P>;\n\n        interface IntrinsicAttributes extends GlobalJSXIntrinsicAttributes {}\n        interface IntrinsicClassAttributes<T> extends GlobalJSXIntrinsicClassAttributes<T> {}\n        interface IntrinsicElements extends GlobalJSXIntrinsicElements {}\n    }\n}\n\n// naked 'any' type in a conditional type will short circuit and union both the then/else branches\n// so boolean is only resolved for T = any\ntype IsExactlyAny<T> = boolean extends (T extends never ? true : false) ? true : false;\n\ntype ExactlyAnyPropertyKeys<T> = { [K in keyof T]: IsExactlyAny<T[K]> extends true ? K : never }[keyof T];\ntype NotExactlyAnyPropertyKeys<T> = Exclude<keyof T, ExactlyAnyPropertyKeys<T>>;\n\n// Try to resolve ill-defined props like for JS users: props can be any, or sometimes objects with properties of type any\ntype MergePropTypes<P, T> =\n    // Distribute over P in case it is a union type\n    P extends any\n        // If props is type any, use propTypes definitions\n        ? IsExactlyAny<P> extends true ? T\n            // If declared props have indexed properties, ignore inferred props entirely as keyof gets widened\n        : string extends keyof P ? P\n            // Prefer declared types which are not exactly any\n        :\n            & Pick<P, NotExactlyAnyPropertyKeys<P>>\n            // For props which are exactly any, use the type inferred from propTypes if present\n            & Pick<T, Exclude<keyof T, NotExactlyAnyPropertyKeys<P>>>\n            // Keep leftover props not specified in propTypes\n            & Pick<P, Exclude<keyof P, keyof T>>\n        : never;\n\ntype InexactPartial<T> = { [K in keyof T]?: T[K] | undefined };\n\n// Any prop that has a default prop becomes optional, but its type is unchanged\n// Undeclared default props are augmented into the resulting allowable attributes\n// If declared props have indexed properties, ignore default props entirely as keyof gets widened\n// Wrap in an outer-level conditional type to allow distribution over props that are unions\ntype Defaultize<P, D> = P extends any ? string extends keyof P ? P\n    :\n        & Pick<P, Exclude<keyof P, keyof D>>\n        & InexactPartial<Pick<P, Extract<keyof P, keyof D>>>\n        & InexactPartial<Pick<D, Exclude<keyof D, keyof P>>>\n    : never;\n\ntype ReactManagedAttributes<C, P> = C extends { propTypes: infer T; defaultProps: infer D }\n    ? Defaultize<MergePropTypes<P, PropTypes.InferProps<T>>, D>\n    : C extends { propTypes: infer T } ? MergePropTypes<P, PropTypes.InferProps<T>>\n    : C extends { defaultProps: infer D } ? Defaultize<P, D>\n    : P;\n\ndeclare global {\n    /**\n     * @deprecated Use `React.JSX` instead of the global `JSX` namespace.\n     */\n    namespace JSX {\n        // We don't just alias React.ElementType because React.ElementType\n        // historically does more than we need it to.\n        // E.g. it also contains .propTypes and so TS also verifies the declared\n        // props type does match the declared .propTypes.\n        // But if libraries declared their .propTypes but not props type,\n        // or they mismatch, you won't be able to use the class component\n        // as a JSX.ElementType.\n        // We could fix this everywhere but we're ultimately not interested in\n        // .propTypes assignability so we might as well drop it entirely here to\n        //  reduce the work of the type-checker.\n        // TODO: Check impact of making React.ElementType<P = any> = React.JSXElementConstructor<P>\n        type ElementType = string | React.JSXElementConstructor<any>;\n        interface Element extends React.ReactElement<any, any> {}\n        interface ElementClass extends React.Component<any> {\n            render(): React.ReactNode;\n        }\n        interface ElementAttributesProperty {\n            props: {};\n        }\n        interface ElementChildrenAttribute {\n            children: {};\n        }\n\n        // We can't recurse forever because `type` can't be self-referential;\n        // let's assume it's reasonable to do a single React.lazy() around a single React.memo() / vice-versa\n        type LibraryManagedAttributes<C, P> = C extends\n            React.MemoExoticComponent<infer T> | React.LazyExoticComponent<infer T>\n            ? T extends React.MemoExoticComponent<infer U> | React.LazyExoticComponent<infer U>\n                ? ReactManagedAttributes<U, P>\n            : ReactManagedAttributes<T, P>\n            : ReactManagedAttributes<C, P>;\n\n        interface IntrinsicAttributes extends React.Attributes {}\n        interface IntrinsicClassAttributes<T> extends React.ClassAttributes<T> {}\n\n        interface IntrinsicElements {\n            // HTML\n            a: React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>;\n            abbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            address: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            area: React.DetailedHTMLProps<React.AreaHTMLAttributes<HTMLAreaElement>, HTMLAreaElement>;\n            article: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            aside: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            audio: React.DetailedHTMLProps<React.AudioHTMLAttributes<HTMLAudioElement>, HTMLAudioElement>;\n            b: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            base: React.DetailedHTMLProps<React.BaseHTMLAttributes<HTMLBaseElement>, HTMLBaseElement>;\n            bdi: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            bdo: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            big: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            blockquote: React.DetailedHTMLProps<React.BlockquoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n            body: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBodyElement>, HTMLBodyElement>;\n            br: React.DetailedHTMLProps<React.HTMLAttributes<HTMLBRElement>, HTMLBRElement>;\n            button: React.DetailedHTMLProps<React.ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n            canvas: React.DetailedHTMLProps<React.CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement>;\n            caption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            center: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            cite: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            code: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            col: React.DetailedHTMLProps<React.ColHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n            colgroup: React.DetailedHTMLProps<React.ColgroupHTMLAttributes<HTMLTableColElement>, HTMLTableColElement>;\n            data: React.DetailedHTMLProps<React.DataHTMLAttributes<HTMLDataElement>, HTMLDataElement>;\n            datalist: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDataListElement>, HTMLDataListElement>;\n            dd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            del: React.DetailedHTMLProps<React.DelHTMLAttributes<HTMLModElement>, HTMLModElement>;\n            details: React.DetailedHTMLProps<React.DetailsHTMLAttributes<HTMLDetailsElement>, HTMLDetailsElement>;\n            dfn: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            dialog: React.DetailedHTMLProps<React.DialogHTMLAttributes<HTMLDialogElement>, HTMLDialogElement>;\n            div: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\n            dl: React.DetailedHTMLProps<React.HTMLAttributes<HTMLDListElement>, HTMLDListElement>;\n            dt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            em: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            embed: React.DetailedHTMLProps<React.EmbedHTMLAttributes<HTMLEmbedElement>, HTMLEmbedElement>;\n            fieldset: React.DetailedHTMLProps<React.FieldsetHTMLAttributes<HTMLFieldSetElement>, HTMLFieldSetElement>;\n            figcaption: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            figure: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            footer: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            form: React.DetailedHTMLProps<React.FormHTMLAttributes<HTMLFormElement>, HTMLFormElement>;\n            h1: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h2: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h3: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h4: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h5: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            h6: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadingElement>, HTMLHeadingElement>;\n            head: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHeadElement>, HTMLHeadElement>;\n            header: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            hgroup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            hr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLHRElement>, HTMLHRElement>;\n            html: React.DetailedHTMLProps<React.HtmlHTMLAttributes<HTMLHtmlElement>, HTMLHtmlElement>;\n            i: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            iframe: React.DetailedHTMLProps<React.IframeHTMLAttributes<HTMLIFrameElement>, HTMLIFrameElement>;\n            img: React.DetailedHTMLProps<React.ImgHTMLAttributes<HTMLImageElement>, HTMLImageElement>;\n            input: React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\n            ins: React.DetailedHTMLProps<React.InsHTMLAttributes<HTMLModElement>, HTMLModElement>;\n            kbd: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            keygen: React.DetailedHTMLProps<React.KeygenHTMLAttributes<HTMLElement>, HTMLElement>;\n            label: React.DetailedHTMLProps<React.LabelHTMLAttributes<HTMLLabelElement>, HTMLLabelElement>;\n            legend: React.DetailedHTMLProps<React.HTMLAttributes<HTMLLegendElement>, HTMLLegendElement>;\n            li: React.DetailedHTMLProps<React.LiHTMLAttributes<HTMLLIElement>, HTMLLIElement>;\n            link: React.DetailedHTMLProps<React.LinkHTMLAttributes<HTMLLinkElement>, HTMLLinkElement>;\n            main: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            map: React.DetailedHTMLProps<React.MapHTMLAttributes<HTMLMapElement>, HTMLMapElement>;\n            mark: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            menu: React.DetailedHTMLProps<React.MenuHTMLAttributes<HTMLElement>, HTMLElement>;\n            menuitem: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            meta: React.DetailedHTMLProps<React.MetaHTMLAttributes<HTMLMetaElement>, HTMLMetaElement>;\n            meter: React.DetailedHTMLProps<React.MeterHTMLAttributes<HTMLMeterElement>, HTMLMeterElement>;\n            nav: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            noindex: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            noscript: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            object: React.DetailedHTMLProps<React.ObjectHTMLAttributes<HTMLObjectElement>, HTMLObjectElement>;\n            ol: React.DetailedHTMLProps<React.OlHTMLAttributes<HTMLOListElement>, HTMLOListElement>;\n            optgroup: React.DetailedHTMLProps<React.OptgroupHTMLAttributes<HTMLOptGroupElement>, HTMLOptGroupElement>;\n            option: React.DetailedHTMLProps<React.OptionHTMLAttributes<HTMLOptionElement>, HTMLOptionElement>;\n            output: React.DetailedHTMLProps<React.OutputHTMLAttributes<HTMLOutputElement>, HTMLOutputElement>;\n            p: React.DetailedHTMLProps<React.HTMLAttributes<HTMLParagraphElement>, HTMLParagraphElement>;\n            param: React.DetailedHTMLProps<React.ParamHTMLAttributes<HTMLParamElement>, HTMLParamElement>;\n            picture: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            pre: React.DetailedHTMLProps<React.HTMLAttributes<HTMLPreElement>, HTMLPreElement>;\n            progress: React.DetailedHTMLProps<React.ProgressHTMLAttributes<HTMLProgressElement>, HTMLProgressElement>;\n            q: React.DetailedHTMLProps<React.QuoteHTMLAttributes<HTMLQuoteElement>, HTMLQuoteElement>;\n            rp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            rt: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            ruby: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            s: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            samp: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            search: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            slot: React.DetailedHTMLProps<React.SlotHTMLAttributes<HTMLSlotElement>, HTMLSlotElement>;\n            script: React.DetailedHTMLProps<React.ScriptHTMLAttributes<HTMLScriptElement>, HTMLScriptElement>;\n            section: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            select: React.DetailedHTMLProps<React.SelectHTMLAttributes<HTMLSelectElement>, HTMLSelectElement>;\n            small: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            source: React.DetailedHTMLProps<React.SourceHTMLAttributes<HTMLSourceElement>, HTMLSourceElement>;\n            span: React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement>;\n            strong: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            style: React.DetailedHTMLProps<React.StyleHTMLAttributes<HTMLStyleElement>, HTMLStyleElement>;\n            sub: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            summary: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            sup: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            table: React.DetailedHTMLProps<React.TableHTMLAttributes<HTMLTableElement>, HTMLTableElement>;\n            template: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTemplateElement>, HTMLTemplateElement>;\n            tbody: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            td: React.DetailedHTMLProps<React.TdHTMLAttributes<HTMLTableDataCellElement>, HTMLTableDataCellElement>;\n            textarea: React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>;\n            tfoot: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            th: React.DetailedHTMLProps<React.ThHTMLAttributes<HTMLTableHeaderCellElement>, HTMLTableHeaderCellElement>;\n            thead: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableSectionElement>, HTMLTableSectionElement>;\n            time: React.DetailedHTMLProps<React.TimeHTMLAttributes<HTMLTimeElement>, HTMLTimeElement>;\n            title: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTitleElement>, HTMLTitleElement>;\n            tr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLTableRowElement>, HTMLTableRowElement>;\n            track: React.DetailedHTMLProps<React.TrackHTMLAttributes<HTMLTrackElement>, HTMLTrackElement>;\n            u: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            ul: React.DetailedHTMLProps<React.HTMLAttributes<HTMLUListElement>, HTMLUListElement>;\n            \"var\": React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            video: React.DetailedHTMLProps<React.VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>;\n            wbr: React.DetailedHTMLProps<React.HTMLAttributes<HTMLElement>, HTMLElement>;\n            webview: React.DetailedHTMLProps<React.WebViewHTMLAttributes<HTMLWebViewElement>, HTMLWebViewElement>;\n\n            // SVG\n            svg: React.SVGProps<SVGSVGElement>;\n\n            animate: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateElement but is not in TypeScript's lib.dom.d.ts for now.\n            animateMotion: React.SVGProps<SVGElement>;\n            animateTransform: React.SVGProps<SVGElement>; // TODO: It is SVGAnimateTransformElement but is not in TypeScript's lib.dom.d.ts for now.\n            circle: React.SVGProps<SVGCircleElement>;\n            clipPath: React.SVGProps<SVGClipPathElement>;\n            defs: React.SVGProps<SVGDefsElement>;\n            desc: React.SVGProps<SVGDescElement>;\n            ellipse: React.SVGProps<SVGEllipseElement>;\n            feBlend: React.SVGProps<SVGFEBlendElement>;\n            feColorMatrix: React.SVGProps<SVGFEColorMatrixElement>;\n            feComponentTransfer: React.SVGProps<SVGFEComponentTransferElement>;\n            feComposite: React.SVGProps<SVGFECompositeElement>;\n            feConvolveMatrix: React.SVGProps<SVGFEConvolveMatrixElement>;\n            feDiffuseLighting: React.SVGProps<SVGFEDiffuseLightingElement>;\n            feDisplacementMap: React.SVGProps<SVGFEDisplacementMapElement>;\n            feDistantLight: React.SVGProps<SVGFEDistantLightElement>;\n            feDropShadow: React.SVGProps<SVGFEDropShadowElement>;\n            feFlood: React.SVGProps<SVGFEFloodElement>;\n            feFuncA: React.SVGProps<SVGFEFuncAElement>;\n            feFuncB: React.SVGProps<SVGFEFuncBElement>;\n            feFuncG: React.SVGProps<SVGFEFuncGElement>;\n            feFuncR: React.SVGProps<SVGFEFuncRElement>;\n            feGaussianBlur: React.SVGProps<SVGFEGaussianBlurElement>;\n            feImage: React.SVGProps<SVGFEImageElement>;\n            feMerge: React.SVGProps<SVGFEMergeElement>;\n            feMergeNode: React.SVGProps<SVGFEMergeNodeElement>;\n            feMorphology: React.SVGProps<SVGFEMorphologyElement>;\n            feOffset: React.SVGProps<SVGFEOffsetElement>;\n            fePointLight: React.SVGProps<SVGFEPointLightElement>;\n            feSpecularLighting: React.SVGProps<SVGFESpecularLightingElement>;\n            feSpotLight: React.SVGProps<SVGFESpotLightElement>;\n            feTile: React.SVGProps<SVGFETileElement>;\n            feTurbulence: React.SVGProps<SVGFETurbulenceElement>;\n            filter: React.SVGProps<SVGFilterElement>;\n            foreignObject: React.SVGProps<SVGForeignObjectElement>;\n            g: React.SVGProps<SVGGElement>;\n            image: React.SVGProps<SVGImageElement>;\n            line: React.SVGLineElementAttributes<SVGLineElement>;\n            linearGradient: React.SVGProps<SVGLinearGradientElement>;\n            marker: React.SVGProps<SVGMarkerElement>;\n            mask: React.SVGProps<SVGMaskElement>;\n            metadata: React.SVGProps<SVGMetadataElement>;\n            mpath: React.SVGProps<SVGElement>;\n            path: React.SVGProps<SVGPathElement>;\n            pattern: React.SVGProps<SVGPatternElement>;\n            polygon: React.SVGProps<SVGPolygonElement>;\n            polyline: React.SVGProps<SVGPolylineElement>;\n            radialGradient: React.SVGProps<SVGRadialGradientElement>;\n            rect: React.SVGProps<SVGRectElement>;\n            set: React.SVGProps<SVGSetElement>;\n            stop: React.SVGProps<SVGStopElement>;\n            switch: React.SVGProps<SVGSwitchElement>;\n            symbol: React.SVGProps<SVGSymbolElement>;\n            text: React.SVGTextElementAttributes<SVGTextElement>;\n            textPath: React.SVGProps<SVGTextPathElement>;\n            tspan: React.SVGProps<SVGTSpanElement>;\n            use: React.SVGProps<SVGUseElement>;\n            view: React.SVGProps<SVGViewElement>;\n        }\n    }\n}\n\n// React.JSX needs to point to global.JSX to keep global module augmentations intact.\n// But we can't access global.JSX so we need to create these aliases instead.\n// Once the global JSX namespace will be removed we replace React.JSX with the contents of global.JSX\ntype GlobalJSXElementType = JSX.ElementType;\ninterface GlobalJSXElement extends JSX.Element {}\ninterface GlobalJSXElementClass extends JSX.ElementClass {}\ninterface GlobalJSXElementAttributesProperty extends JSX.ElementAttributesProperty {}\ninterface GlobalJSXElementChildrenAttribute extends JSX.ElementChildrenAttribute {}\n\ntype GlobalJSXLibraryManagedAttributes<C, P> = JSX.LibraryManagedAttributes<C, P>;\n\ninterface GlobalJSXIntrinsicAttributes extends JSX.IntrinsicAttributes {}\ninterface GlobalJSXIntrinsicClassAttributes<T> extends JSX.IntrinsicClassAttributes<T> {}\n\ninterface GlobalJSXIntrinsicElements extends JSX.IntrinsicElements {}\n","/src/playgrounds/1/app/index.tsx":"import { createRoot } from \"react-dom/client\";\nimport React from \"react\";\nimport { useMachine } from \"@xstate/react\";\nimport { createMachine } from \"xstate\";\n\nconst toggleMachine = createMachine({\n  id: \"toggle\",\n  initial: \"inactive\",\n  states: {\n    inactive: {\n      on: { TOGGLE: \"active\" },\n    },\n    active: {\n      on: { TOGGLE: \"inactive\" },\n    },\n  },\n});\n\nexport const Toggler = () => {\n  const [state, send] = useMachine(toggleMachine);\n\n  return (\n    <button\n      onClick={() => {\n        console.log(\"TOGGLE\");\n        send({ type: \"TOGGLE\" });\n      }}\n    >\n      {state.value === \"inactive\"\n        ? \"Click to activate\"\n        : \"Active! Click to deactivate\"}\n    </button>\n  );\n};\n","/node_modules/xstate/dist/declarations/src/SimulatedClock.d.ts":"import { Clock } from \"./system.js\";\nexport interface SimulatedClock extends Clock {\n    start(speed: number): void;\n    increment(ms: number): void;\n    set(ms: number): void;\n}\nexport declare class SimulatedClock implements SimulatedClock {\n    private timeouts;\n    private _now;\n    private _id;\n    private _flushing;\n    private _flushingInvalidated;\n    now(): number;\n    private getId;\n    setTimeout(fn: (...args: any[]) => void, timeout: number): number;\n    clearTimeout(id: number): void;\n    private flushTimeouts;\n}\n","/node_modules/xstate/dist/declarations/src/State.d.ts":"import type { StateNode } from \"./StateNode.js\";\nimport type { StateMachine } from \"./StateMachine.js\";\nimport type { ProvidedActor, AnyMachineSnapshot, AnyStateMachine, EventObject, HistoryValue, MachineContext, StateConfig, StateValue, AnyActorRef, Snapshot, ParameterizedObject, IsNever, MetaObject } from \"./types.js\";\ntype ToTestStateValue<TStateValue extends StateValue> = TStateValue extends string ? TStateValue : IsNever<keyof TStateValue> extends true ? never : keyof TStateValue | {\n    [K in keyof TStateValue]?: ToTestStateValue<NonNullable<TStateValue[K]>>;\n};\nexport declare function isMachineSnapshot<TContext extends MachineContext, TEvent extends EventObject>(value: unknown): value is AnyMachineSnapshot;\ninterface MachineSnapshotBase<TContext extends MachineContext, TEvent extends EventObject, TChildren extends Record<string, AnyActorRef | undefined>, TStateValue extends StateValue, TTag extends string, TOutput, TMeta, _TUnusedButLeftForCompatReasons = never> {\n    /**\n     * The state machine that produced this state snapshot.\n     */\n    machine: StateMachine<TContext, TEvent, TChildren, ProvidedActor, ParameterizedObject, ParameterizedObject, string, TStateValue, TTag, unknown, TOutput, EventObject, // TEmitted\n    any>;\n    /**\n     * The tags of the active state nodes that represent the current state value.\n     */\n    tags: Set<string>;\n    /**\n     * The current state value.\n     *\n     * This represents the active state nodes in the state machine.\n     * - For atomic state nodes, it is a string.\n     * - For compound parent state nodes, it is an object where:\n     *   - The key is the parent state node's key\n     *   - The value is the current state value of the active child state node(s)\n     *\n     * @example\n    ```ts\n    // single-level state node\n    snapshot.value; // => 'yellow'\n  \n    // nested state nodes\n    snapshot.value; // => { red: 'wait' }\n    ```\n     */\n    value: TStateValue;\n    /**\n     * The current status of this snapshot.\n     */\n    status: 'active' | 'done' | 'error' | 'stopped';\n    error: unknown;\n    context: TContext;\n    historyValue: Readonly<HistoryValue<TContext, TEvent>>;\n    /**\n     * The enabled state nodes representative of the state value.\n     */\n    _nodes: Array<StateNode<TContext, TEvent>>;\n    /**\n     * An object mapping actor names to spawned/invoked actors.\n     */\n    children: TChildren;\n    /**\n     * Whether the current state value is a subset of the given partial state value.\n     * @param partialStateValue\n     */\n    matches: (partialStateValue: ToTestStateValue<TStateValue>) => boolean;\n    /**\n     * Whether the current state nodes has a state node with the specified `tag`.\n     * @param tag\n     */\n    hasTag: (tag: TTag) => boolean;\n    /**\n     * Determines whether sending the `event` will cause a non-forbidden transition\n     * to be selected, even if the transitions have no actions nor\n     * change the state value.\n     *\n     * @param event The event to test\n     * @returns Whether the event will cause a transition\n     */\n    can: (event: TEvent) => boolean;\n    getMeta: () => Record<string, TMeta | undefined>;\n    toJSON: () => unknown;\n}\ninterface ActiveMachineSnapshot<TContext extends MachineContext, TEvent extends EventObject, TChildren extends Record<string, AnyActorRef | undefined>, TStateValue extends StateValue, TTag extends string, TOutput, TMeta extends MetaObject> extends MachineSnapshotBase<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta> {\n    status: 'active';\n    output: undefined;\n    error: undefined;\n}\ninterface DoneMachineSnapshot<TContext extends MachineContext, TEvent extends EventObject, TChildren extends Record<string, AnyActorRef | undefined>, TStateValue extends StateValue, TTag extends string, TOutput, TMeta extends MetaObject> extends MachineSnapshotBase<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta> {\n    status: 'done';\n    output: TOutput;\n    error: undefined;\n}\ninterface ErrorMachineSnapshot<TContext extends MachineContext, TEvent extends EventObject, TChildren extends Record<string, AnyActorRef | undefined>, TStateValue extends StateValue, TTag extends string, TOutput, TMeta extends MetaObject> extends MachineSnapshotBase<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta> {\n    status: 'error';\n    output: undefined;\n    error: unknown;\n}\ninterface StoppedMachineSnapshot<TContext extends MachineContext, TEvent extends EventObject, TChildren extends Record<string, AnyActorRef | undefined>, TStateValue extends StateValue, TTag extends string, TOutput, TMeta extends MetaObject> extends MachineSnapshotBase<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta> {\n    status: 'stopped';\n    output: undefined;\n    error: undefined;\n}\nexport type MachineSnapshot<TContext extends MachineContext, TEvent extends EventObject, TChildren extends Record<string, AnyActorRef | undefined>, TStateValue extends StateValue, TTag extends string, TOutput, TMeta extends MetaObject, _TUnusedButLeftForCompatReasons = never> = ActiveMachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta> | DoneMachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta> | ErrorMachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta> | StoppedMachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta>;\nexport declare function createMachineSnapshot<TContext extends MachineContext, TEvent extends EventObject, TChildren extends Record<string, AnyActorRef | undefined>, TStateValue extends StateValue, TTag extends string, TMeta extends MetaObject>(config: StateConfig<TContext, TEvent>, machine: AnyStateMachine): MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, undefined, TMeta>;\nexport declare function cloneMachineSnapshot<TState extends AnyMachineSnapshot>(snapshot: TState, config?: Partial<StateConfig<any, any>>): TState;\nexport declare function getPersistedSnapshot<TContext extends MachineContext, TEvent extends EventObject, TChildren extends Record<string, AnyActorRef | undefined>, TStateValue extends StateValue, TTag extends string, TOutput, TMeta extends MetaObject>(snapshot: MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta>, options?: unknown): Snapshot<unknown>;\nexport {};\n","/node_modules/xstate/dist/declarations/src/StateMachine.d.ts":"import { MachineSnapshot } from \"./State.js\";\nimport { StateNode } from \"./StateNode.js\";\nimport { AnyActorSystem } from \"./system.js\";\nimport { ResolveTypegenMeta, TypegenDisabled } from \"./typegenTypes.js\";\nimport type { ActorLogic, ActorScope, AnyActorRef, AnyActorScope, DoNotInfer, Equals, EventDescriptor, EventObject, HistoryValue, InternalMachineImplementations, MachineConfig, MachineContext, MachineImplementationsSimplified, MetaObject, ParameterizedObject, ProvidedActor, Snapshot, StateMachineDefinition, StateValue, TransitionDefinition } from \"./types.js\";\nexport declare const STATE_IDENTIFIER = \"#\";\nexport declare const WILDCARD = \"*\";\nexport declare class StateMachine<TContext extends MachineContext, TEvent extends EventObject, TChildren extends Record<string, AnyActorRef | undefined>, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string, TStateValue extends StateValue, TTag extends string, TInput, TOutput, TEmitted extends EventObject = EventObject, // TODO: remove default\nTMeta extends MetaObject = MetaObject, TResolvedTypesMeta = ResolveTypegenMeta<TypegenDisabled, DoNotInfer<TEvent>, TActor, TAction, TGuard, TDelay, TTag, TEmitted>> implements ActorLogic<MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta>, TEvent, TInput, AnyActorSystem, TEmitted> {\n    /**\n     * The raw config used to create the machine.\n     */\n    config: MachineConfig<TContext, TEvent, any, any, any, any, any, any, TOutput, any, // TEmitted\n    any> & {\n        schemas?: unknown;\n    };\n    /**\n     * The machine's own version.\n     */\n    version?: string;\n    schemas: unknown;\n    implementations: MachineImplementationsSimplified<TContext, TEvent>;\n    root: StateNode<TContext, TEvent>;\n    id: string;\n    states: StateNode<TContext, TEvent>['states'];\n    events: Array<EventDescriptor<TEvent>>;\n    constructor(\n    /**\n     * The raw config used to create the machine.\n     */\n    config: MachineConfig<TContext, TEvent, any, any, any, any, any, any, TOutput, any, // TEmitted\n    any> & {\n        schemas?: unknown;\n    }, implementations?: MachineImplementationsSimplified<TContext, TEvent>);\n    /**\n     * Clones this state machine with the provided implementations\n     * and merges the `context` (if provided).\n     *\n     * @param implementations Options (`actions`, `guards`, `actors`, `delays`, `context`)\n     *  to recursively merge with the existing options.\n     *\n     * @returns A new `StateMachine` instance with the provided implementations.\n     */\n    provide(implementations: InternalMachineImplementations<TContext, TResolvedTypesMeta, true>): StateMachine<TContext, TEvent, TChildren, TActor, TAction, TGuard, TDelay, TStateValue, TTag, TInput, TOutput, TEmitted, TMeta, // TMeta\n    TResolvedTypesMeta>;\n    resolveState(config: {\n        value: StateValue;\n        context?: TContext;\n        historyValue?: HistoryValue<TContext, TEvent>;\n        status?: 'active' | 'done' | 'error' | 'stopped';\n        output?: TOutput;\n        error?: unknown;\n    } & (Equals<TContext, MachineContext> extends false ? {\n        context: unknown;\n    } : {})): MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta>;\n    /**\n     * Determines the next snapshot given the current `snapshot` and received `event`.\n     * Calculates a full macrostep from all microsteps.\n     *\n     * @param snapshot The current snapshot\n     * @param event The received event\n     */\n    transition(snapshot: MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta>, event: TEvent, actorScope: ActorScope<typeof snapshot, TEvent, AnyActorSystem, TEmitted>): MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta>;\n    /**\n     * Determines the next state given the current `state` and `event`.\n     * Calculates a microstep.\n     *\n     * @param state The current state\n     * @param event The received event\n     */\n    microstep(snapshot: MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta>, event: TEvent, actorScope: AnyActorScope): Array<MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta>>;\n    getTransitionData(snapshot: MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta>, event: TEvent): Array<TransitionDefinition<TContext, TEvent>>;\n    /**\n     * The initial state _before_ evaluating any microsteps.\n     * This \"pre-initial\" state is provided to initial actions executed in the initial state.\n     */\n    private getPreInitialState;\n    /**\n     * Returns the initial `State` instance, with reference to `self` as an `ActorRef`.\n     */\n    getInitialSnapshot(actorScope: ActorScope<MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta>, TEvent, AnyActorSystem, TEmitted>, input?: TInput): MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta>;\n    start(snapshot: MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta>): void;\n    getStateNodeById(stateId: string): StateNode<TContext, TEvent>;\n    get definition(): StateMachineDefinition<TContext, TEvent>;\n    toJSON(): StateMachineDefinition<TContext, TEvent>;\n    getPersistedSnapshot(snapshot: MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta>, options?: unknown): Snapshot<unknown>;\n    restoreSnapshot(snapshot: Snapshot<unknown>, _actorScope: ActorScope<MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta>, TEvent, AnyActorSystem, TEmitted>): MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta>;\n    /**\n     * @deprecated an internal property that was acting as a \"phantom\" type, it's not used by anything right now but it's kept around for compatibility reasons\n     **/\n    __TResolvedTypesMeta: TResolvedTypesMeta;\n}\n","/node_modules/xstate/dist/declarations/src/StateNode.d.ts":"import type { StateMachine } from \"./StateMachine.js\";\nimport type { DelayedTransitionDefinition, EventObject, InitialTransitionDefinition, InvokeDefinition, MachineContext, Mapper, StateNodeConfig, StateNodeDefinition, StateNodesConfig, TransitionDefinition, TransitionDefinitionMap, TODO, UnknownAction, ParameterizedObject, AnyStateMachine, ProvidedActor, NonReducibleUnknown, EventDescriptor } from \"./types.js\";\ninterface StateNodeOptions<TContext extends MachineContext, TEvent extends EventObject> {\n    _key: string;\n    _parent?: StateNode<TContext, TEvent>;\n    _machine: AnyStateMachine;\n}\nexport declare class StateNode<TContext extends MachineContext = MachineContext, TEvent extends EventObject = EventObject> {\n    /**\n     * The raw config used to create the machine.\n     */\n    config: StateNodeConfig<TContext, TEvent, TODO, // actors\n    TODO, // actions\n    TODO, // guards\n    TODO, // delays\n    TODO, // tags\n    TODO, // output\n    TODO, // emitted\n    TODO>;\n    /**\n     * The relative key of the state node, which represents its location in the overall state value.\n     */\n    key: string;\n    /**\n     * The unique ID of the state node.\n     */\n    id: string;\n    /**\n     * The type of this state node:\n     *\n     *  - `'atomic'` - no child state nodes\n     *  - `'compound'` - nested child state nodes (XOR)\n     *  - `'parallel'` - orthogonal nested child state nodes (AND)\n     *  - `'history'` - history state node\n     *  - `'final'` - final state node\n     */\n    type: 'atomic' | 'compound' | 'parallel' | 'final' | 'history';\n    /**\n     * The string path from the root machine node to this node.\n     */\n    path: string[];\n    /**\n     * The child state nodes.\n     */\n    states: StateNodesConfig<TContext, TEvent>;\n    /**\n     * The type of history on this state node. Can be:\n     *\n     *  - `'shallow'` - recalls only top-level historical state value\n     *  - `'deep'` - recalls historical state value at all levels\n     */\n    history: false | 'shallow' | 'deep';\n    /**\n     * The action(s) to be executed upon entering the state node.\n     */\n    entry: UnknownAction[];\n    /**\n     * The action(s) to be executed upon exiting the state node.\n     */\n    exit: UnknownAction[];\n    /**\n     * The parent state node.\n     */\n    parent?: StateNode<TContext, TEvent>;\n    /**\n     * The root machine node.\n     */\n    machine: StateMachine<TContext, TEvent, any, // children\n    any, // actor\n    any, // action\n    any, // guard\n    any, // delay\n    any, // tag\n    any, // input\n    any, // output\n    any, // emitted\n    any, // TMeta\n    any>;\n    /**\n     * The meta data associated with this state node, which will be returned in State instances.\n     */\n    meta?: any;\n    /**\n     * The output data sent with the \"xstate.done.state._id_\" event if this is a final state node.\n     */\n    output?: Mapper<MachineContext, EventObject, unknown, EventObject> | NonReducibleUnknown;\n    /**\n     * The order this state node appears. Corresponds to the implicit document order.\n     */\n    order: number;\n    description?: string;\n    tags: string[];\n    transitions: Map<string, TransitionDefinition<TContext, TEvent>[]>;\n    always?: Array<TransitionDefinition<TContext, TEvent>>;\n    constructor(\n    /**\n     * The raw config used to create the machine.\n     */\n    config: StateNodeConfig<TContext, TEvent, TODO, // actors\n    TODO, // actions\n    TODO, // guards\n    TODO, // delays\n    TODO, // tags\n    TODO, // output\n    TODO, // emitted\n    TODO>, options: StateNodeOptions<TContext, TEvent>);\n    /**\n     * The well-structured state node definition.\n     */\n    get definition(): StateNodeDefinition<TContext, TEvent>;\n    /**\n     * The logic invoked as actors by this state node.\n     */\n    get invoke(): Array<InvokeDefinition<TContext, TEvent, ProvidedActor, ParameterizedObject, ParameterizedObject, string, TODO, // TEmitted\n    TODO>>;\n    /**\n     * The mapping of events to transitions.\n     */\n    get on(): TransitionDefinitionMap<TContext, TEvent>;\n    get after(): Array<DelayedTransitionDefinition<TContext, TEvent>>;\n    get initial(): InitialTransitionDefinition<TContext, TEvent>;\n    /**\n     * All the event types accepted by this state node and its descendants.\n     */\n    get events(): Array<EventDescriptor<TEvent>>;\n    /**\n     * All the events that have transitions directly from this state node.\n     *\n     * Excludes any inert events.\n     */\n    get ownEvents(): Array<EventDescriptor<TEvent>>;\n}\nexport {};\n","/node_modules/xstate/dist/declarations/src/assert.d.ts":"import { EventObject } from \"./types.js\";\n/**\n * Asserts that the given event object is of the specified type or types.\n * Throws an error if the event object is not of the specified types.\n  @example\n\n  ```ts\n  // ...\n  entry: ({ event }) => {\n    assertEvent(event, 'doNothing');\n    // event is { type: 'doNothing' }\n  },\n  // ...\n  exit: ({ event }) => {\n    assertEvent(event, 'greet');\n    // event is { type: 'greet'; message: string }\n\n    assertEvent(event, ['greet', 'notify']);\n    // event is { type: 'greet'; message: string }\n    // or { type: 'notify'; message: string; level: 'info' | 'error' }\n  },\n  ```\n */\nexport declare function assertEvent<TEvent extends EventObject, TAssertedType extends TEvent['type']>(event: TEvent, type: TAssertedType | TAssertedType[]): asserts event is TEvent & {\n    type: TAssertedType;\n};\n","/node_modules/xstate/dist/declarations/src/actions.d.ts":"export { assign, type AssignAction, type AssignArgs } from \"./actions/assign.js\";\nexport { cancel, type CancelAction } from \"./actions/cancel.js\";\nexport { emit, type EmitAction } from \"./actions/emit.js\";\nexport { enqueueActions, type EnqueueActionsAction } from \"./actions/enqueueActions.js\";\nexport { log, type LogAction } from \"./actions/log.js\";\nexport { raise, type RaiseAction } from \"./actions/raise.js\";\nexport { forwardTo, sendParent, sendTo, type SendToAction } from \"./actions/send.js\";\nexport { spawnChild, type SpawnAction } from \"./actions/spawnChild.js\";\nexport { stop, stopChild, type StopAction } from \"./actions/stopChild.js\";\n","/node_modules/xstate/dist/declarations/src/createMachine.d.ts":"import { StateMachine } from \"./StateMachine.js\";\nimport { ResolveTypegenMeta, TypegenConstraint, TypegenDisabled } from \"./typegenTypes.js\";\nimport { AnyActorRef, EventObject, AnyEventObject, Cast, InternalMachineImplementations, IsNever, MachineConfig, MachineContext, MachineTypes, NonReducibleUnknown, ParameterizedObject, Prop, ProvidedActor, StateValue, ToChildren, MetaObject } from \"./types.js\";\ntype TestValue = string | {\n    [k: string]: TestValue | undefined;\n};\ntype _GroupTestValues<TTestValue extends string | TestValue> = TTestValue extends string ? TTestValue extends `${string}.${string}` ? [never, never] : [TTestValue, never] : [never, TTestValue];\ntype GroupTestValues<TTestValue extends string | TestValue> = {\n    leafCandidates: _GroupTestValues<TTestValue>[0];\n    nonLeaf: _GroupTestValues<TTestValue>[1];\n};\ntype FilterLeafValues<TLeafCandidate extends string, TNonLeaf extends {\n    [k: string]: TestValue | undefined;\n}> = IsNever<TNonLeaf> extends true ? TLeafCandidate : TLeafCandidate extends string ? TLeafCandidate extends keyof TNonLeaf ? never : TLeafCandidate : never;\ntype ToStateValue<TTestValue extends string | TestValue> = FilterLeafValues<GroupTestValues<TTestValue>['leafCandidates'], GroupTestValues<TTestValue>['nonLeaf']> | (IsNever<GroupTestValues<TTestValue>['nonLeaf']> extends false ? {\n    [K in keyof GroupTestValues<TTestValue>['nonLeaf']]: ToStateValue<NonNullable<GroupTestValues<TTestValue>['nonLeaf'][K]>>;\n} : never);\n/**\n * Creates a state machine (statechart) with the given configuration.\n *\n * The state machine represents the pure logic of a state machine actor.\n *\n * @param config The state machine configuration.\n * @param options DEPRECATED: use `setup({ ... })` or `machine.provide({ ... })` to provide machine implementations instead.\n *\n * @example\n  ```ts\n  import { createMachine } from 'xstate';\n\n  const lightMachine = createMachine({\n    id: 'light',\n    initial: 'green',\n    states: {\n      green: {\n        on: {\n          TIMER: { target: 'yellow' }\n        }\n      },\n      yellow: {\n        on: {\n          TIMER: { target: 'red' }\n        }\n      },\n      red: {\n        on: {\n          TIMER: { target: 'green' }\n        }\n      }\n    }\n  });\n\n  const lightActor = createActor(lightMachine);\n  lightActor.start();\n\n  lightActor.send({ type: 'TIMER' });\n  ```\n */\nexport declare function createMachine<TContext extends MachineContext, TEvent extends AnyEventObject, // TODO: consider using a stricter `EventObject` here\nTActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string, TTag extends string, TInput, TOutput extends NonReducibleUnknown, TEmitted extends EventObject, TMeta extends MetaObject, TTypesMeta extends TypegenConstraint = TypegenDisabled>(config: {\n    types?: MachineTypes<TContext, TEvent, TActor, TAction, TGuard, TDelay, TTag, TInput, TOutput, TEmitted, TMeta, TTypesMeta>;\n    schemas?: unknown;\n} & MachineConfig<TContext, TEvent, TActor, TAction, TGuard, TDelay, TTag, TInput, TOutput, TEmitted, TMeta, TTypesMeta>, implementations?: InternalMachineImplementations<TContext, ResolveTypegenMeta<TTypesMeta, TEvent, TActor, TAction, TGuard, TDelay, TTag, TEmitted>>): StateMachine<TContext, TEvent, Cast<ToChildren<TActor>, Record<string, AnyActorRef | undefined>>, TActor, TAction, TGuard, TDelay, 'matchesStates' extends keyof TTypesMeta ? ToStateValue<Cast<TTypesMeta['matchesStates'], TestValue>> : StateValue, Prop<ResolveTypegenMeta<TTypesMeta, TEvent, TActor, TAction, TGuard, TDelay, TTag, TEmitted>['resolved'], 'tags'> & string, TInput, TOutput, TEmitted, TMeta, // TMeta\nResolveTypegenMeta<TTypesMeta, TEvent, TActor, TAction, TGuard, TDelay, TTag, TEmitted>>;\nexport {};\n","/node_modules/xstate/dist/declarations/src/getNextSnapshot.d.ts":"import { AnyActorLogic, EventFromLogic, InputFrom, SnapshotFrom } from \"./types.js\";\nexport declare function getInitialSnapshot<T extends AnyActorLogic>(actorLogic: T, ...[input]: undefined extends InputFrom<T> ? [input?: InputFrom<T>] : [input: InputFrom<T>]): SnapshotFrom<T>;\n/**\n * Determines the next snapshot for the given `actorLogic` based on\n * the given `snapshot` and `event`.\n *\n * If the `snapshot` is `undefined`, the initial snapshot of the\n * `actorLogic` is used.\n *\n * @example\n  ```ts\n  import { getNextSnapshot } from 'xstate';\n  import { trafficLightMachine } from './trafficLightMachine.ts';\n\n  const nextSnapshot = getNextSnapshot(\n    trafficLightMachine, // actor logic\n    undefined, // snapshot (or initial state if undefined)\n    { type: 'TIMER' }); // event object\n\n  console.log(nextSnapshot.value);\n  // => 'yellow'\n\n  const nextSnapshot2 = getNextSnapshot(\n    trafficLightMachine, // actor logic\n    nextSnapshot, // snapshot\n    { type: 'TIMER' }); // event object\n\n  console.log(nextSnapshot2.value);\n  // =>'red'\n  ```\n */\nexport declare function getNextSnapshot<T extends AnyActorLogic>(actorLogic: T, snapshot: SnapshotFrom<T>, event: EventFromLogic<T>): SnapshotFrom<T>;\n","/node_modules/xstate/dist/declarations/src/guards.d.ts":"import type { EventObject, StateValue, MachineContext, ParameterizedObject, AnyMachineSnapshot, NoRequiredParams, WithDynamicParams, Identity, Elements, DoNotInfer } from \"./types.js\";\ntype SingleGuardArg<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TGuardArg> = [TGuardArg] extends [{\n    type: string;\n}] ? Identity<TGuardArg> : [TGuardArg] extends [string] ? TGuardArg : GuardPredicate<TContext, TExpressionEvent, TParams, ParameterizedObject>;\ntype NormalizeGuardArg<TGuardArg> = TGuardArg extends {\n    type: string;\n} ? Identity<TGuardArg> & {\n    params: unknown;\n} : TGuardArg extends string ? {\n    type: TGuardArg;\n    params: undefined;\n} : '_out_TGuard' extends keyof TGuardArg ? TGuardArg['_out_TGuard'] & ParameterizedObject : never;\ntype NormalizeGuardArgArray<TArg extends unknown[]> = Elements<{\n    [K in keyof TArg]: NormalizeGuardArg<TArg[K]>;\n}>;\nexport type GuardPredicate<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TGuard extends ParameterizedObject> = {\n    (args: GuardArgs<TContext, TExpressionEvent>, params: TParams): boolean;\n    _out_TGuard?: TGuard;\n};\nexport interface GuardArgs<TContext extends MachineContext, TExpressionEvent extends EventObject> {\n    context: TContext;\n    event: TExpressionEvent;\n}\nexport type Guard<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TGuard extends ParameterizedObject> = NoRequiredParams<TGuard> | WithDynamicParams<TContext, TExpressionEvent, TGuard> | GuardPredicate<TContext, TExpressionEvent, TParams, TGuard>;\nexport type UnknownGuard = UnknownReferencedGuard | UnknownInlineGuard;\ntype UnknownReferencedGuard = Guard<MachineContext, EventObject, ParameterizedObject['params'], ParameterizedObject>;\ntype UnknownInlineGuard = Guard<MachineContext, EventObject, undefined, ParameterizedObject>;\nexport declare function stateIn<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined>(stateValue: StateValue): GuardPredicate<TContext, TExpressionEvent, TParams, any>;\n/**\n * Higher-order guard that evaluates to `true` if the `guard` passed to it evaluates to `false`.\n *\n * @category Guards\n * @example\n  ```ts\n  import { setup, not } from 'xstate';\n\n  const machine = setup({\n    guards: {\n      someNamedGuard: () => false\n    }\n  }).createMachine({\n    on: {\n      someEvent: {\n        guard: not('someNamedGuard'),\n        actions: () => {\n          // will be executed if guard in `not(...)`\n          // evaluates to `false`\n        }\n      }\n    }\n  });\n  ```\n * @returns A guard\n */\nexport declare function not<TContext extends MachineContext, TExpressionEvent extends EventObject, TArg>(guard: SingleGuardArg<TContext, TExpressionEvent, unknown, TArg>): GuardPredicate<TContext, TExpressionEvent, unknown, NormalizeGuardArg<DoNotInfer<TArg>>>;\n/**\n * Higher-order guard that evaluates to `true` if all `guards` passed to it\n * evaluate to `true`.\n *\n * @category Guards\n * @example\n  ```ts\n  import { setup, and } from 'xstate';\n\n  const machine = setup({\n    guards: {\n      someNamedGuard: () => true\n    }\n  }).createMachine({\n    on: {\n      someEvent: {\n        guard: and([\n          ({ context }) => context.value > 0,\n          'someNamedGuard'\n        ]),\n        actions: () => {\n          // will be executed if all guards in `and(...)`\n          // evaluate to true\n        }\n      }\n    }\n  });\n  ```\n * @returns A guard action object\n */\nexport declare function and<TContext extends MachineContext, TExpressionEvent extends EventObject, TArg extends unknown[]>(guards: readonly [\n    ...{\n        [K in keyof TArg]: SingleGuardArg<TContext, TExpressionEvent, unknown, TArg[K]>;\n    }\n]): GuardPredicate<TContext, TExpressionEvent, unknown, NormalizeGuardArgArray<DoNotInfer<TArg>>>;\n/**\n * Higher-order guard that evaluates to `true` if any of the `guards` passed to it\n * evaluate to `true`.\n *\n * @category Guards\n * @example\n  ```ts\n  import { setup, or } from 'xstate';\n\n  const machine = setup({\n    guards: {\n      someNamedGuard: () => true\n    }\n  }).createMachine({\n    on: {\n      someEvent: {\n        guard: or([\n          ({ context }) => context.value > 0,\n          'someNamedGuard'\n        ]),\n        actions: () => {\n          // will be executed if any of the guards in `or(...)`\n          // evaluate to true\n        }\n      }\n    }\n  });\n  ```\n * @returns A guard action object\n */\nexport declare function or<TContext extends MachineContext, TExpressionEvent extends EventObject, TArg extends unknown[]>(guards: readonly [\n    ...{\n        [K in keyof TArg]: SingleGuardArg<TContext, TExpressionEvent, unknown, TArg[K]>;\n    }\n]): GuardPredicate<TContext, TExpressionEvent, unknown, NormalizeGuardArgArray<DoNotInfer<TArg>>>;\nexport declare function evaluateGuard<TContext extends MachineContext, TExpressionEvent extends EventObject>(guard: UnknownGuard | UnknownInlineGuard, context: TContext, event: TExpressionEvent, snapshot: AnyMachineSnapshot): boolean;\nexport {};\n","/node_modules/xstate/dist/declarations/src/index.d.ts":"export * from \"./actions.js\";\nexport * from \"./actors/index.js\";\nexport { SimulatedClock } from \"./SimulatedClock.js\";\nexport { type Spawner } from \"./spawn.js\";\nexport { isMachineSnapshot, type MachineSnapshot } from \"./State.js\";\nexport { StateMachine } from \"./StateMachine.js\";\nexport { getStateNodes } from \"./stateUtils.js\";\nexport * from \"./typegenTypes.js\";\nexport * from \"./types.js\";\nexport { waitFor } from \"./waitFor.js\";\nimport { createMachine } from \"./createMachine.js\";\nexport { getInitialSnapshot, getNextSnapshot } from \"./getNextSnapshot.js\";\nimport { Actor, createActor, interpret, Interpreter } from \"./createActor.js\";\nimport { StateNode } from \"./StateNode.js\";\nexport { and, not, or, stateIn } from \"./guards.js\";\nexport { setup } from \"./setup.js\";\nexport type { ActorSystem } from \"./system.js\";\nexport type { InspectedActorEvent, InspectedEventEvent, InspectedSnapshotEvent, InspectionEvent } from \"./inspection.js\";\nexport { toPromise } from \"./toPromise.js\";\nexport { getAllOwnEventDescriptors as __unsafe_getAllOwnEventDescriptors, matchesState, pathToStateValue, toObserver } from \"./utils.js\";\nexport { Actor, createActor, createMachine, interpret, StateNode, type Interpreter };\nexport { assertEvent } from \"./assert.js\";\ndeclare global {\n    interface SymbolConstructor {\n        readonly observable: symbol;\n    }\n}\n","/node_modules/xstate/dist/declarations/src/inspection.d.ts":"import { AnyActorRef, AnyEventObject, AnyTransitionDefinition, Snapshot } from \"./types.js\";\nexport type InspectionEvent = InspectedSnapshotEvent | InspectedEventEvent | InspectedActorEvent | InspectedMicrostepEvent | InspectedActionEvent;\nexport interface BaseInspectionEventProperties {\n    rootId: string;\n    /**\n     * The relevant actorRef for the inspection event.\n     * - For snapshot events, this is the `actorRef` of the snapshot.\n     * - For event events, this is the target `actorRef` (recipient of event).\n     * - For actor events, this is the `actorRef` of the registered actor.\n     */\n    actorRef: AnyActorRef;\n}\nexport interface InspectedSnapshotEvent extends BaseInspectionEventProperties {\n    type: '@xstate.snapshot';\n    event: AnyEventObject;\n    snapshot: Snapshot<unknown>;\n}\nexport interface InspectedMicrostepEvent extends BaseInspectionEventProperties {\n    type: '@xstate.microstep';\n    event: AnyEventObject;\n    snapshot: Snapshot<unknown>;\n    _transitions: AnyTransitionDefinition[];\n}\nexport interface InspectedActionEvent extends BaseInspectionEventProperties {\n    type: '@xstate.action';\n    action: {\n        type: string;\n        params: Record<string, unknown>;\n    };\n}\nexport interface InspectedEventEvent extends BaseInspectionEventProperties {\n    type: '@xstate.event';\n    sourceRef: AnyActorRef | undefined;\n    event: AnyEventObject;\n}\nexport interface InspectedActorEvent extends BaseInspectionEventProperties {\n    type: '@xstate.actor';\n}\n","/node_modules/xstate/dist/declarations/src/setup.d.ts":"import { StateMachine } from \"./StateMachine.js\";\nimport { GuardPredicate } from \"./guards.js\";\nimport { ResolveTypegenMeta, TypegenDisabled } from \"./typegenTypes.js\";\nimport { ActionFunction, AnyActorRef, AnyEventObject, Cast, ConditionalRequired, DelayConfig, EventObject, Invert, IsNever, MachineConfig, MachineContext, MetaObject, NonReducibleUnknown, ParameterizedObject, SetupTypes, StateSchema, ToChildren, UnknownActorLogic, Values } from \"./types.js\";\ntype ToParameterizedObject<TParameterizedMap extends Record<string, ParameterizedObject['params'] | undefined>> = IsNever<TParameterizedMap> extends true ? never : Values<{\n    [K in keyof TParameterizedMap & string]: {\n        type: K;\n        params: TParameterizedMap[K];\n    };\n}>;\ntype ToProvidedActor<TChildrenMap extends Record<string, string>, TActors extends Record<string, UnknownActorLogic>> = IsNever<TActors> extends true ? never : Values<{\n    [K in keyof TActors & string]: {\n        src: K;\n        logic: TActors[K];\n        id: IsNever<TChildrenMap> extends true ? string | undefined : K extends keyof Invert<TChildrenMap> ? Invert<TChildrenMap>[K] & string : string | undefined;\n    };\n}>;\ntype _GroupStateKeys<T extends StateSchema, S extends keyof T['states']> = S extends any ? T['states'][S] extends {\n    type: 'history';\n} ? [never, never] : T extends {\n    type: 'parallel';\n} ? [S, never] : 'states' extends keyof T['states'][S] ? [S, never] : [never, S] : never;\ntype GroupStateKeys<T extends StateSchema, S extends keyof T['states']> = {\n    nonLeaf: _GroupStateKeys<T, S & string>[0];\n    leaf: _GroupStateKeys<T, S & string>[1];\n};\ntype ToStateValue<T extends StateSchema> = T extends {\n    states: Record<infer S, any>;\n} ? IsNever<S> extends true ? {} : GroupStateKeys<T, S>['leaf'] | (IsNever<GroupStateKeys<T, S>['nonLeaf']> extends false ? ConditionalRequired<{\n    [K in GroupStateKeys<T, S>['nonLeaf']]?: ToStateValue<T['states'][K]>;\n}, T extends {\n    type: 'parallel';\n} ? true : false> : never) : {};\ntype RequiredSetupKeys<TChildrenMap> = IsNever<keyof TChildrenMap> extends true ? never : 'actors';\nexport declare function setup<TContext extends MachineContext, TEvent extends AnyEventObject, // TODO: consider using a stricter `EventObject` here\nTActors extends Record<string, UnknownActorLogic> = {}, TChildrenMap extends Record<string, string> = {}, TActions extends Record<string, ParameterizedObject['params'] | undefined> = {}, TGuards extends Record<string, ParameterizedObject['params'] | undefined> = {}, TDelay extends string = never, TTag extends string = string, TInput = NonReducibleUnknown, TOutput extends NonReducibleUnknown = NonReducibleUnknown, TEmitted extends EventObject = EventObject, TMeta extends MetaObject = MetaObject>({ schemas, actors, actions, guards, delays }: {\n    schemas?: unknown;\n    types?: SetupTypes<TContext, TEvent, TChildrenMap, TTag, TInput, TOutput, TEmitted, TMeta>;\n    actors?: {\n        [K in keyof TActors | Values<TChildrenMap>]: K extends keyof TActors ? TActors[K] : never;\n    };\n    actions?: {\n        [K in keyof TActions]: ActionFunction<TContext, TEvent, TEvent, TActions[K], ToProvidedActor<TChildrenMap, TActors>, ToParameterizedObject<TActions>, ToParameterizedObject<TGuards>, TDelay, TEmitted>;\n    };\n    guards?: {\n        [K in keyof TGuards]: GuardPredicate<TContext, TEvent, TGuards[K], ToParameterizedObject<TGuards>>;\n    };\n    delays?: {\n        [K in TDelay]: DelayConfig<TContext, TEvent, ToParameterizedObject<TActions>['params'], TEvent>;\n    };\n} & {\n    [K in RequiredSetupKeys<TChildrenMap>]: unknown;\n}): {\n    createMachine: <const TConfig extends MachineConfig<TContext, TEvent, ToProvidedActor<TChildrenMap, TActors>, ToParameterizedObject<TActions>, ToParameterizedObject<TGuards>, TDelay, TTag, TInput, TOutput, TEmitted, TMeta, ResolveTypegenMeta<TypegenDisabled, TEvent, ToProvidedActor<TChildrenMap, TActors>, ToParameterizedObject<TActions>, ToParameterizedObject<TGuards>, TDelay, TTag, TEmitted>>>(config: TConfig) => StateMachine<TContext, TEvent, Cast<ToChildren<ToProvidedActor<TChildrenMap, TActors>>, Record<string, AnyActorRef | undefined>>, ToProvidedActor<TChildrenMap, TActors>, ToParameterizedObject<TActions>, ToParameterizedObject<TGuards>, TDelay, ToStateValue<TConfig>, TTag, TInput, TOutput, TEmitted, TMeta, ResolveTypegenMeta<TypegenDisabled, TEvent, ToProvidedActor<TChildrenMap, TActors>, ToParameterizedObject<TActions>, ToParameterizedObject<TGuards>, TDelay, TTag, TEmitted>>;\n};\nexport {};\n","/node_modules/xstate/dist/declarations/src/spawn.d.ts":"import { ActorRefFrom, AnyActorLogic, AnyActorRef, AnyActorScope, AnyEventObject, AnyMachineSnapshot, ConditionalRequired, InputFrom, IsLiteralString, IsNotNever, ProvidedActor, RequiredActorOptions } from \"./types.js\";\ntype SpawnOptions<TActor extends ProvidedActor, TSrc extends TActor['src']> = TActor extends {\n    src: TSrc;\n} ? ConditionalRequired<[\n    options?: {\n        id?: TActor['id'];\n        systemId?: string;\n        input?: InputFrom<TActor['logic']>;\n        syncSnapshot?: boolean;\n    } & {\n        [K in RequiredActorOptions<TActor>]: unknown;\n    }\n], IsNotNever<RequiredActorOptions<TActor>>> : never;\ntype GetConcreteLogic<TActor extends ProvidedActor, TSrc extends TActor['src']> = Extract<TActor, {\n    src: TSrc;\n}>['logic'];\nexport type Spawner<TActor extends ProvidedActor> = IsLiteralString<TActor['src']> extends true ? {\n    <TSrc extends TActor['src']>(logic: TSrc, ...[options]: SpawnOptions<TActor, TSrc>): ActorRefFrom<GetConcreteLogic<TActor, TSrc>>;\n    <TLogic extends AnyActorLogic>(src: TLogic, options?: {\n        id?: never;\n        systemId?: string;\n        input?: InputFrom<TLogic>;\n        syncSnapshot?: boolean;\n    }): ActorRefFrom<TLogic>;\n} : <TLogic extends AnyActorLogic | string>(src: TLogic, options?: {\n    id?: string;\n    systemId?: string;\n    input?: TLogic extends string ? unknown : InputFrom<TLogic>;\n    syncSnapshot?: boolean;\n}) => TLogic extends string ? AnyActorRef : ActorRefFrom<TLogic>;\nexport declare function createSpawner(actorScope: AnyActorScope, { machine, context }: AnyMachineSnapshot, event: AnyEventObject, spawnedChildren: Record<string, AnyActorRef>): Spawner<any>;\nexport {};\n","/node_modules/xstate/dist/declarations/src/symbolObservable.d.ts":"export declare const symbolObservable: typeof Symbol.observable;\n","/node_modules/xstate/dist/declarations/src/toPromise.d.ts":"import { AnyActorRef, OutputFrom } from \"./types.js\";\n/**\n * Returns a promise that resolves to the `output` of the actor when it is done.\n *\n * @example\n * ```ts\n * const machine = createMachine({\n *   // ...\n *   output: {\n *     count: 42\n *   }\n * });\n *\n * const actor = createActor(machine);\n *\n * actor.start();\n *\n * const output = await toPromise(actor);\n *\n * console.log(output);\n * // logs { count: 42 }\n * ```\n */\nexport declare function toPromise<T extends AnyActorRef>(actor: T): Promise<OutputFrom<T>>;\n","/node_modules/xstate/dist/declarations/src/createActor.d.ts":"import { symbolObservable } from \"./symbolObservable.js\";\nimport { AnyActorSystem, Clock } from \"./system.js\";\nimport type { AnyActorLogic, AnyActorRef, ConditionalRequired, EmittedFrom, EventFromLogic, InputFrom, IsNotNever, Snapshot, SnapshotFrom } from \"./types.js\";\nimport { ActorOptions, ActorRef, EventObject, InteropSubscribable, Observer, Subscription } from \"./types.js\";\nexport declare const $$ACTOR_TYPE = 1;\nexport type SnapshotListener<TLogic extends AnyActorLogic> = (snapshot: SnapshotFrom<TLogic>) => void;\nexport type EventListener<TEvent extends EventObject = EventObject> = (event: TEvent) => void;\nexport type Listener = () => void;\nexport type ErrorListener = (error: any) => void;\nexport declare enum ProcessingStatus {\n    NotStarted = 0,\n    Running = 1,\n    Stopped = 2\n}\n/**\n * An Actor is a running process that can receive events, send events and change its behavior based on the events it receives, which can cause effects outside of the actor. When you run a state machine, it becomes an actor.\n */\nexport declare class Actor<TLogic extends AnyActorLogic> implements ActorRef<SnapshotFrom<TLogic>, EventFromLogic<TLogic>, EmittedFrom<TLogic>> {\n    logic: TLogic;\n    /**\n     * The current internal state of the actor.\n     */\n    private _snapshot;\n    /**\n     * The clock that is responsible for setting and clearing timeouts, such as delayed events and transitions.\n     */\n    clock: Clock;\n    options: Readonly<ActorOptions<TLogic>>;\n    /**\n     * The unique identifier for this actor relative to its parent.\n     */\n    id: string;\n    private mailbox;\n    private observers;\n    private eventListeners;\n    private logger;\n    _parent?: AnyActorRef;\n    ref: ActorRef<SnapshotFrom<TLogic>, EventFromLogic<TLogic>, EmittedFrom<TLogic>>;\n    private _actorScope;\n    private _systemId;\n    /**\n     * The globally unique process ID for this invocation.\n     */\n    sessionId: string;\n    /**\n     * The system to which this actor belongs.\n     */\n    system: AnyActorSystem;\n    private _doneEvent?;\n    src: string | AnyActorLogic;\n    /**\n     * Creates a new actor instance for the given logic with the provided options, if any.\n     *\n     * @param logic The logic to create an actor from\n     * @param options Actor options\n     */\n    constructor(logic: TLogic, options?: ActorOptions<TLogic>);\n    private _initState;\n    private _deferred;\n    private update;\n    /**\n     * Subscribe an observer to an actor’s snapshot values.\n     *\n     * @remarks\n     * The observer will receive the actor’s snapshot value when it is emitted. The observer can be:\n     * - A plain function that receives the latest snapshot, or\n     * - An observer object whose `.next(snapshot)` method receives the latest snapshot\n     *\n     * @example\n     * ```ts\n     * // Observer as a plain function\n     * const subscription = actor.subscribe((snapshot) => {\n     *   console.log(snapshot);\n     * });\n     * ```\n     *\n     * @example\n     * ```ts\n     * // Observer as an object\n     * const subscription = actor.subscribe({\n     *   next(snapshot) {\n     *     console.log(snapshot);\n     *   },\n     *   error(err) {\n     *     // ...\n     *   },\n     *   complete() {\n     *     // ...\n     *   },\n     * });\n     * ```\n     *\n     * The return value of `actor.subscribe(observer)` is a subscription object that has an `.unsubscribe()` method. You can call `subscription.unsubscribe()` to unsubscribe the observer:\n     *\n     * @example\n     * ```ts\n     * const subscription = actor.subscribe((snapshot) => {\n     *   // ...\n     * });\n     *\n     * // Unsubscribe the observer\n     * subscription.unsubscribe();\n     * ```\n     *\n     * When the actor is stopped, all of its observers will automatically be unsubscribed.\n     *\n     * @param observer - Either a plain function that receives the latest snapshot, or an observer object whose `.next(snapshot)` method receives the latest snapshot\n     */\n    subscribe(observer: Observer<SnapshotFrom<TLogic>>): Subscription;\n    subscribe(nextListener?: (snapshot: SnapshotFrom<TLogic>) => void, errorListener?: (error: any) => void, completeListener?: () => void): Subscription;\n    on<TType extends EmittedFrom<TLogic>['type']>(type: TType, handler: (emitted: EmittedFrom<TLogic> & {\n        type: TType;\n    }) => void): Subscription;\n    /**\n     * Starts the Actor from the initial state\n     */\n    start(): this;\n    private _process;\n    private _stop;\n    /**\n     * Stops the Actor and unsubscribe all listeners.\n     */\n    stop(): this;\n    private _complete;\n    private _reportError;\n    private _error;\n    private _stopProcedure;\n    /**\n     * Sends an event to the running Actor to trigger a transition.\n     *\n     * @param event The event to send\n     */\n    send(event: EventFromLogic<TLogic>): void;\n    private attachDevTools;\n    toJSON(): {\n        xstate$$type: number;\n        id: string;\n    };\n    /**\n     * Obtain the internal state of the actor, which can be persisted.\n     *\n     * @remarks\n     * The internal state can be persisted from any actor, not only machines.\n     *\n     * Note that the persisted state is not the same as the snapshot from {@link Actor.getSnapshot}. Persisted state represents the internal state of the actor, while snapshots represent the actor's last emitted value.\n     *\n     * Can be restored with {@link ActorOptions.state}\n     *\n     * @see https://stately.ai/docs/persistence\n     */\n    getPersistedSnapshot(): Snapshot<unknown>;\n    [symbolObservable](): InteropSubscribable<SnapshotFrom<TLogic>>;\n    /**\n     * Read an actor’s snapshot synchronously.\n     *\n     * @remarks\n     * The snapshot represent an actor's last emitted value.\n     *\n     * When an actor receives an event, its internal state may change.\n     * An actor may emit a snapshot when a state transition occurs.\n     *\n     * Note that some actors, such as callback actors generated with `fromCallback`, will not emit snapshots.\n     *\n     * @see {@link Actor.subscribe} to subscribe to an actor’s snapshot values.\n     * @see {@link Actor.getPersistedSnapshot} to persist the internal state of an actor (which is more than just a snapshot).\n     */\n    getSnapshot(): SnapshotFrom<TLogic>;\n}\ntype RequiredOptions<TLogic extends AnyActorLogic> = undefined extends InputFrom<TLogic> ? never : 'input';\n/**\n * Creates a new actor instance for the given actor logic with the provided options, if any.\n *\n * @remarks\n * When you create an actor from actor logic via `createActor(logic)`, you implicitly create an actor system where the created actor is the root actor.\n * Any actors spawned from this root actor and its descendants are part of that actor system.\n *\n * @example\n * ```ts\n * import { createActor } from 'xstate';\n * import { someActorLogic } from './someActorLogic.ts';\n *\n * // Creating the actor, which implicitly creates an actor system with itself as the root actor\n * const actor = createActor(someActorLogic);\n *\n * actor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n *\n * // Actors must be started by calling `actor.start()`, which will also start the actor system.\n * actor.start();\n *\n * // Actors can receive events\n * actor.send({ type: 'someEvent' });\n *\n * // You can stop root actors by calling `actor.stop()`, which will also stop the actor system and all actors in that system.\n * actor.stop();\n * ```\n *\n * @param logic - The actor logic to create an actor from. For a state machine actor logic creator, see {@link createMachine}. Other actor logic creators include {@link fromCallback}, {@link fromEventObservable}, {@link fromObservable}, {@link fromPromise}, and {@link fromTransition}.\n * @param options - Actor options\n */\nexport declare function createActor<TLogic extends AnyActorLogic>(logic: TLogic, ...[options]: ConditionalRequired<[\n    options?: ActorOptions<TLogic> & {\n        [K in RequiredOptions<TLogic>]: unknown;\n    }\n], IsNotNever<RequiredOptions<TLogic>>>): Actor<TLogic>;\n/**\n * Creates a new Interpreter instance for the given machine with the provided options, if any.\n *\n * @deprecated Use `createActor` instead\n */\nexport declare const interpret: typeof createActor;\n/**\n * @deprecated Use `Actor` instead.\n */\nexport type Interpreter = typeof Actor;\nexport {};\n","/node_modules/xstate/dist/declarations/src/typegenTypes.d.ts":"import { EventObject, IndexByType, IsNever, Prop, ParameterizedObject, ProvidedActor, OutputFrom, AnyActorLogic, IndexByProp } from \"./types.js\";\n/**\n * @deprecated\n */\nexport interface TypegenDisabled {\n    '@@xstate/typegen': false;\n}\n/**\n * @deprecated\n */\nexport interface TypegenEnabled {\n    '@@xstate/typegen': true;\n}\n/**\n * @deprecated\n */\nexport interface TypegenMeta extends TypegenEnabled {\n    /**\n     * Allows you to specify all the results of state.matches\n     */\n    matchesStates: string | {};\n    /**\n     * Allows you to specify all tags used by the machine\n     */\n    tags: string;\n    /**\n     * Allows you to specify all the missing implementations\n     * of the machine\n     */\n    missingImplementations: {\n        actions: string;\n        actors: string;\n        delays: string;\n        guards: string;\n    };\n    /**\n     * A map for the internal events of the machine.\n     *\n     * ```js\n     * key: 'xstate.done.actor.myActor'\n     * value: {\n     *   type: 'xstate.done.actor.myActor';\n     *   data: unknown;\n     *   __tip: 'Declare the type in event types!';\n     * }\n     * ```\n     */\n    internalEvents: {};\n    /**\n     * Maps the src of the invoked actor to the event type that includes its known id\n     *\n     * key: 'invokeSrc'\n     * value: 'xstate.done.actor.invokeName'\n     */\n    invokeSrcNameMap: Record<string, string>;\n    /**\n     * Keeps track of which events lead to which\n     * actions.\n     *\n     * Key: 'EVENT_NAME'\n     * Value: 'actionName' | 'otherActionName'\n     */\n    eventsCausingActions: Record<string, string>;\n    /**\n     * Keeps track of which events lead to which\n     * delays.\n     *\n     * Key: 'EVENT_NAME'\n     * Value: 'delayName' | 'otherDelayName'\n     */\n    eventsCausingDelays: Record<string, string>;\n    /**\n     * Keeps track of which events lead to which\n     * guards.\n     *\n     * Key: 'EVENT_NAME'\n     * Value: 'guardName' | 'otherGuardName'\n     */\n    eventsCausingGuards: Record<string, string>;\n    /**\n     * Keeps track of which events lead to which\n     * actors.\n     *\n     * Key: 'EVENT_NAME'\n     * Value: 'actorName' | 'otherActorName'\n     */\n    eventsCausingActors: Record<string, string>;\n}\n/**\n * @deprecated\n */\nexport interface ResolvedTypegenMeta extends TypegenMeta {\n    resolved: TypegenMeta & {\n        indexedActors: Record<string, ProvidedActor>;\n        indexedActions: Record<string, ParameterizedObject>;\n        indexedEvents: Record<string, EventObject>;\n        indexedGuards: Record<string, ParameterizedObject>;\n        indexedDelays: Record<string, ParameterizedObject>;\n    };\n}\n/**\n * @deprecated\n */\nexport type TypegenConstraint = TypegenEnabled | TypegenDisabled;\n/**\n * @deprecated Always resolves to `true`\n */\nexport type AreAllImplementationsAssumedToBeProvided<_TResolvedTypesMeta, _TMissingImplementations = never> = true;\n/**\n * @deprecated Always resolves to `never`\n */\nexport type MissingImplementationsError<_TResolvedTypesMeta, _TMissingImplementations = never> = never;\n/**\n * @deprecated\n */\ninterface AllImplementationsProvided {\n    missingImplementations: {\n        actions: never;\n        actors: never;\n        delays: never;\n        guards: never;\n    };\n}\ntype GenerateActorEvents<TActor extends ProvidedActor, TInvokeSrcNameMap> = string extends TActor['src'] ? never : TActor extends any ? {\n    type: TActor['id'] extends string ? `xstate.done.actor.${TActor['id']}` : TActor['src'] extends keyof TInvokeSrcNameMap ? `xstate.done.actor.${TInvokeSrcNameMap[TActor['src']] & string}` : `xstate.done.actor.${string}`;\n    output: OutputFrom<TActor['logic']>;\n} : never;\ntype MergeWithInternalEvents<TIndexedEvents, TInternalEvents> = TIndexedEvents & Pick<TInternalEvents, Exclude<keyof TInternalEvents, keyof TIndexedEvents>>;\ntype AllowAllEvents = {\n    eventsCausingActions: Record<string, string>;\n    eventsCausingActors: Record<string, string>;\n    eventsCausingDelays: Record<string, string>;\n    eventsCausingGuards: Record<string, string>;\n};\ntype IndexParameterizedImplementation<TParameterizedImplementation extends ParameterizedObject, TCausingLookup> = string extends TParameterizedImplementation['type'] ? IsNever<TCausingLookup> extends true ? never : Record<keyof TCausingLookup, ParameterizedObject> : IndexByType<TParameterizedImplementation>;\ntype WrapIntoParameterizedObject<T extends string> = T extends any ? {\n    type: T;\n} : never;\n/**\n * @deprecated\n */\nexport interface ResolveTypegenMeta<TTypesMeta extends TypegenConstraint, TEvent extends EventObject, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string, TTag extends string, TEmitted extends EventObject = EventObject> {\n    '@@xstate/typegen': TTypesMeta['@@xstate/typegen'];\n    resolved: {\n        enabled: TTypesMeta & {\n            indexedActions: IndexParameterizedImplementation<TAction, Prop<TTypesMeta, 'eventsCausingActions'>>;\n            indexedActors: string extends TActor['src'] ? Record<keyof Prop<TTypesMeta, 'eventsCausingActors'>, {\n                logic: AnyActorLogic;\n            }> : IndexByProp<TActor, 'src'>;\n            indexedEvents: MergeWithInternalEvents<IndexByType<(string extends TEvent['type'] ? never : TEvent) | GenerateActorEvents<TActor, Prop<TTypesMeta, 'invokeSrcNameMap'>>>, Prop<TTypesMeta, 'internalEvents'>>;\n            indexedGuards: IndexParameterizedImplementation<TGuard, Prop<TTypesMeta, 'eventsCausingGuards'>>;\n            indexedDelays: IndexParameterizedImplementation<WrapIntoParameterizedObject<TDelay>, Prop<TTypesMeta, 'eventsCausingDelays'>>;\n            tags: string extends TTag ? Prop<TTypesMeta, 'tags'> : TTag;\n            emitted: TEmitted;\n        };\n        disabled: TypegenDisabled & AllImplementationsProvided & AllowAllEvents & {\n            indexedActions: IndexByType<TAction>;\n            indexedActors: IndexByProp<TActor, 'src'>;\n            indexedEvents: Record<string, TEvent>;\n            indexedGuards: IndexByType<TGuard>;\n            indexedDelays: IndexByType<WrapIntoParameterizedObject<TDelay>>;\n            invokeSrcNameMap: Record<string, string>;\n            tags: TTag;\n            emitted: TEmitted;\n        };\n    }[IsNever<TTypesMeta> extends true ? 'disabled' : TTypesMeta['@@xstate/typegen'] extends true ? 'enabled' : 'disabled'];\n}\nexport {};\n","/node_modules/xstate/dist/declarations/src/stateUtils.d.ts":"import { MachineSnapshot } from \"./State.js\";\nimport type { StateNode } from \"./StateNode.js\";\nimport { AnyEventObject, AnyHistoryValue, AnyMachineSnapshot, AnyStateNode, AnyTransitionDefinition, DelayedTransitionDefinition, EventObject, InitialTransitionConfig, InitialTransitionDefinition, MachineContext, StateValue, StateValueMap, TransitionDefinition, TODO, UnknownAction, AnyTransitionConfig, AnyActorScope } from \"./types.js\";\ntype StateNodeIterable<TContext extends MachineContext, TE extends EventObject> = Iterable<StateNode<TContext, TE>>;\ntype AnyStateNodeIterable = StateNodeIterable<any, any>;\ntype AdjList = Map<AnyStateNode, Array<AnyStateNode>>;\nexport declare const isAtomicStateNode: (stateNode: StateNode<any, any>) => boolean;\nexport declare function getAllStateNodes(stateNodes: Iterable<AnyStateNode>): Set<AnyStateNode>;\nexport declare function getAdjList<TContext extends MachineContext, TE extends EventObject>(stateNodes: StateNodeIterable<TContext, TE>): AdjList;\nexport declare function getStateValue(rootNode: AnyStateNode, stateNodes: AnyStateNodeIterable): StateValue;\nexport declare function isInFinalState(stateNodeSet: Set<AnyStateNode>, stateNode: AnyStateNode): boolean;\nexport declare const isStateId: (str: string) => boolean;\nexport declare function getCandidates<TEvent extends EventObject>(stateNode: StateNode<any, TEvent>, receivedEventType: TEvent['type']): Array<TransitionDefinition<any, TEvent>>;\n/**\n * All delayed transitions from the config.\n */\nexport declare function getDelayedTransitions(stateNode: AnyStateNode): Array<DelayedTransitionDefinition<MachineContext, EventObject>>;\nexport declare function formatTransition<TContext extends MachineContext, TEvent extends EventObject>(stateNode: AnyStateNode, descriptor: string, transitionConfig: AnyTransitionConfig): AnyTransitionDefinition;\nexport declare function formatTransitions<TContext extends MachineContext, TEvent extends EventObject>(stateNode: AnyStateNode): Map<string, TransitionDefinition<TContext, TEvent>[]>;\nexport declare function formatInitialTransition<TContext extends MachineContext, TEvent extends EventObject>(stateNode: AnyStateNode, _target: string | undefined | InitialTransitionConfig<TContext, TEvent, TODO, TODO, TODO, TODO>): InitialTransitionDefinition<TContext, TEvent>;\nexport declare function resolveTarget(stateNode: AnyStateNode, targets: ReadonlyArray<string | AnyStateNode> | undefined): ReadonlyArray<AnyStateNode> | undefined;\nexport declare function getInitialStateNodesWithTheirAncestors(stateNode: AnyStateNode): Set<AnyStateNode>;\nexport declare function getInitialStateNodes(stateNode: AnyStateNode): Set<AnyStateNode>;\n/**\n * Returns the child state node from its relative `stateKey`, or throws.\n */\nexport declare function getStateNode(stateNode: AnyStateNode, stateKey: string): AnyStateNode;\n/**\n * Returns the relative state node from the given `statePath`, or throws.\n *\n * @param statePath The string or string array relative path to the state node.\n */\nexport declare function getStateNodeByPath(stateNode: AnyStateNode, statePath: string | string[]): AnyStateNode;\n/**\n * Returns the state nodes represented by the current state value.\n *\n * @param stateValue The state value or State instance\n */\nexport declare function getStateNodes<TContext extends MachineContext, TEvent extends EventObject>(stateNode: AnyStateNode, stateValue: StateValue): Array<AnyStateNode>;\nexport declare function transitionAtomicNode<TContext extends MachineContext, TEvent extends EventObject>(stateNode: AnyStateNode, stateValue: string, snapshot: MachineSnapshot<TContext, TEvent, any, any, any, any, any>, event: TEvent): Array<TransitionDefinition<TContext, TEvent>> | undefined;\nexport declare function transitionCompoundNode<TContext extends MachineContext, TEvent extends EventObject>(stateNode: AnyStateNode, stateValue: StateValueMap, snapshot: MachineSnapshot<TContext, TEvent, any, any, any, any, any>, event: TEvent): Array<TransitionDefinition<TContext, TEvent>> | undefined;\nexport declare function transitionParallelNode<TContext extends MachineContext, TEvent extends EventObject>(stateNode: AnyStateNode, stateValue: StateValueMap, snapshot: MachineSnapshot<TContext, TEvent, any, any, any, any, any>, event: TEvent): Array<TransitionDefinition<TContext, TEvent>> | undefined;\nexport declare function transitionNode<TContext extends MachineContext, TEvent extends EventObject>(stateNode: AnyStateNode, stateValue: StateValue, snapshot: MachineSnapshot<TContext, TEvent, any, any, any, any, any>, event: TEvent): Array<TransitionDefinition<TContext, TEvent>> | undefined;\nexport declare function removeConflictingTransitions(enabledTransitions: Array<AnyTransitionDefinition>, stateNodeSet: Set<AnyStateNode>, historyValue: AnyHistoryValue): Array<AnyTransitionDefinition>;\n/**\n * https://www.w3.org/TR/scxml/#microstepProcedure\n */\nexport declare function microstep<TContext extends MachineContext, TEvent extends EventObject>(transitions: Array<AnyTransitionDefinition>, currentSnapshot: AnyMachineSnapshot, actorScope: AnyActorScope, event: AnyEventObject, isInitial: boolean, internalQueue: Array<AnyEventObject>): AnyMachineSnapshot;\nexport declare function resolveActionsAndContext(currentSnapshot: AnyMachineSnapshot, event: AnyEventObject, actorScope: AnyActorScope, actions: UnknownAction[], internalQueue: AnyEventObject[], deferredActorIds?: string[]): AnyMachineSnapshot;\nexport declare function macrostep(snapshot: AnyMachineSnapshot, event: EventObject, actorScope: AnyActorScope, internalQueue?: AnyEventObject[]): {\n    snapshot: typeof snapshot;\n    microstates: Array<typeof snapshot>;\n};\n/**\n * Resolves a partial state value with its full representation in the state node's machine.\n *\n * @param stateValue The partial state value to resolve.\n */\nexport declare function resolveStateValue(rootNode: AnyStateNode, stateValue: StateValue): StateValue;\nexport declare function stateValuesEqual(a: StateValue | undefined, b: StateValue | undefined): boolean;\nexport {};\n","/node_modules/xstate/dist/declarations/src/system.d.ts":"import { InspectionEvent } from \"./inspection.js\";\nimport { ActorSystemInfo, AnyActorRef, Observer, EventObject } from \"./types.js\";\nexport interface ScheduledEvent {\n    id: string;\n    event: EventObject;\n    startedAt: number;\n    delay: number;\n    source: AnyActorRef;\n    target: AnyActorRef;\n}\nexport interface Clock {\n    setTimeout(fn: (...args: any[]) => void, timeout: number): any;\n    clearTimeout(id: any): void;\n}\nexport interface Scheduler {\n    schedule(source: AnyActorRef, target: AnyActorRef, event: EventObject, delay: number, id: string | undefined): void;\n    cancel(source: AnyActorRef, id: string): void;\n    cancelAll(actorRef: AnyActorRef): void;\n}\nexport interface ActorSystem<T extends ActorSystemInfo> {\n    get: <K extends keyof T['actors']>(key: K) => T['actors'][K] | undefined;\n    inspect: (observer: Observer<InspectionEvent>) => void;\n    scheduler: Scheduler;\n    getSnapshot: () => {\n        _scheduledEvents: Record<string, ScheduledEvent>;\n    };\n    start: () => void;\n    _clock: Clock;\n    _logger: (...args: any[]) => void;\n}\nexport type AnyActorSystem = ActorSystem<any>;\nexport declare function createSystem<T extends ActorSystemInfo>(rootActor: AnyActorRef, options: {\n    clock: Clock;\n    logger: (...args: any[]) => void;\n    snapshot?: unknown;\n}): ActorSystem<T>;\n","/node_modules/@xstate/react/dist/xstate-react.cjs.d.ts":"export * from \"./declarations/src/index\";\n//# sourceMappingURL=xstate-react.cjs.d.ts.map\n","/node_modules/xstate/dist/declarations/src/utils.d.ts":"import type { StateNode } from \"./StateNode.js\";\nimport type { AnyActorLogic, AnyActorRef, AnyEventObject, AnyMachineSnapshot, AnyStateMachine, AnyTransitionConfig, ErrorActorEvent, EventObject, MachineContext, Mapper, NonReducibleUnknown, Observer, SingleOrArray, StateLike, StateValue, TransitionConfigTarget } from \"./types.js\";\nexport declare function matchesState(parentStateId: StateValue, childStateId: StateValue): boolean;\nexport declare function toStatePath(stateId: string | string[]): string[];\nexport declare function toStateValue(stateValue: StateLike<any> | StateValue): StateValue;\nexport declare function pathToStateValue(statePath: string[]): StateValue;\nexport declare function mapValues<P, O extends Record<string, unknown>>(collection: O, iteratee: (item: O[keyof O], key: keyof O, collection: O, i: number) => P): {\n    [key in keyof O]: P;\n};\nexport declare function toArrayStrict<T>(value: readonly T[] | T): readonly T[];\nexport declare function toArray<T>(value: readonly T[] | T | undefined): readonly T[];\nexport declare function resolveOutput<TContext extends MachineContext, TExpressionEvent extends EventObject>(mapper: Mapper<TContext, TExpressionEvent, unknown, EventObject> | NonReducibleUnknown, context: TContext, event: TExpressionEvent, self: AnyActorRef): unknown;\nexport declare function isActorLogic(value: any): value is AnyActorLogic;\nexport declare function isArray(value: any): value is readonly any[];\nexport declare function isErrorActorEvent(event: AnyEventObject): event is ErrorActorEvent;\nexport declare function toTransitionConfigArray<TContext extends MachineContext, TEvent extends EventObject>(configLike: SingleOrArray<AnyTransitionConfig | TransitionConfigTarget>): Array<AnyTransitionConfig>;\nexport declare function normalizeTarget<TContext extends MachineContext, TEvent extends EventObject>(target: SingleOrArray<string | StateNode<TContext, TEvent>> | undefined): ReadonlyArray<string | StateNode<TContext, TEvent>> | undefined;\nexport declare function toObserver<T>(nextHandler?: Observer<T> | ((value: T) => void), errorHandler?: (error: any) => void, completionHandler?: () => void): Observer<T>;\nexport declare function createInvokeId(stateNodeId: string, index: number): string;\nexport declare function resolveReferencedActor(machine: AnyStateMachine, src: string): any;\nexport declare function getAllOwnEventDescriptors(snapshot: AnyMachineSnapshot): any[];\n","/node_modules/xstate/dist/declarations/src/actions/cancel.d.ts":"import { EventObject, MachineContext, ActionArgs, ParameterizedObject } from \"../types.js\";\ntype ResolvableSendId<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject> = string | ((args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams) => string);\nexport interface CancelAction<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject> {\n    (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams): void;\n}\n/**\n * Cancels a delayed `sendTo(...)` action that is waiting to be executed. The canceled `sendTo(...)` action\n * will not send its event or execute, unless the `delay` has already elapsed before `cancel(...)` is called.\n *\n * @param sendId The `id` of the `sendTo(...)` action to cancel.\n *\n * @example\n  ```ts\n  import { createMachine, sendTo, cancel } from 'xstate';\n\n  const machine = createMachine({\n    // ...\n    on: {\n      sendEvent: {\n        actions: sendTo('some-actor', { type: 'someEvent' }, {\n          id: 'some-id',\n          delay: 1000\n        })\n      },\n      cancelEvent: {\n        actions: cancel('some-id')\n      }\n    }\n  });\n  ```\n */\nexport declare function cancel<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject>(sendId: ResolvableSendId<TContext, TExpressionEvent, TParams, TEvent>): CancelAction<TContext, TExpressionEvent, TParams, TEvent>;\nexport {};\n","/node_modules/xstate/dist/declarations/src/actions/assign.d.ts":"import { Spawner } from \"../spawn.js\";\nimport type { ActionArgs, AnyEventObject, Assigner, EventObject, LowInfer, MachineContext, ParameterizedObject, PropertyAssigner, ProvidedActor, ActionFunction } from \"../types.js\";\nexport interface AssignArgs<TContext extends MachineContext, TExpressionEvent extends EventObject, TEvent extends EventObject, TActor extends ProvidedActor> extends ActionArgs<TContext, TExpressionEvent, TEvent> {\n    spawn: Spawner<TActor>;\n}\nexport interface AssignAction<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject, TActor extends ProvidedActor> {\n    (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams): void;\n    _out_TActor?: TActor;\n}\n/**\n * Updates the current context of the machine.\n *\n * @param assignment An object that represents the partial context to update, or a\n * function that returns an object that represents the partial context to update.\n *\n * @example\n  ```ts\n  import { createMachine, assign } from 'xstate';\n\n  const countMachine = createMachine({\n    context: {\n      count: 0,\n      message: ''\n    },\n    on: {\n      inc: {\n        actions: assign({\n          count: ({ context }) => context.count + 1\n        })\n      },\n      updateMessage: {\n        actions: assign(({ context, event }) => {\n          return {\n            message: event.message.trim()\n          }\n        })\n      }\n    }\n  });\n  ```\n */\nexport declare function assign<TContext extends MachineContext, TExpressionEvent extends AnyEventObject, // TODO: consider using a stricter `EventObject` here\nTParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject, TActor extends ProvidedActor>(assignment: Assigner<LowInfer<TContext>, TExpressionEvent, TParams, TEvent, TActor> | PropertyAssigner<LowInfer<TContext>, TExpressionEvent, TParams, TEvent, TActor>): ActionFunction<TContext, TExpressionEvent, TEvent, TParams, TActor, never, never, never, never>;\n","/node_modules/xstate/dist/declarations/src/actions/emit.d.ts":"import { ActionArgs, EventObject, MachineContext, SendExpr, ParameterizedObject, ActionFunction } from \"../types.js\";\nexport interface EmitAction<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject, TEmitted extends EventObject> {\n    (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams): void;\n    _out_TEmitted?: TEmitted;\n}\n/**\n * Emits an event to event handlers registered on the actor via `actor.on(event, handler)`.\n *\n * @example\n  ```ts\n  import { emit } from 'xstate';\n\n  const machine = createMachine({\n    // ...\n    on: {\n      something: {\n        actions: emit({\n          type: 'emitted',\n          some: 'data'\n        })\n      }\n    }\n    // ...\n  });\n\n  const actor = createActor(machine).start();\n\n  actor.on('emitted', (event) => {\n    console.log(event);\n  });\n\n  actor.send({ type: 'something' });\n  // logs:\n  // {\n  //   type: 'emitted',\n  //   some: 'data'\n  // }\n  ```\n */\nexport declare function emit<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject, TEmitted extends EventObject>(\n/**\n * The event to emit, or an expression that returns an event to emit.\n */\neventOrExpr: TEmitted | SendExpr<TContext, TExpressionEvent, TParams, TEmitted, TEvent>): ActionFunction<TContext, TExpressionEvent, TEvent, TParams, never, never, never, never, TEmitted>;\n","/node_modules/xstate/dist/declarations/src/actions/log.d.ts":"import { ActionArgs, EventObject, LogExpr, MachineContext, ParameterizedObject } from \"../types.js\";\ntype ResolvableLogValue<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject> = string | LogExpr<TContext, TExpressionEvent, TParams, TEvent>;\nexport interface LogAction<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject> {\n    (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams): void;\n}\n/**\n *\n * @param expr The expression function to evaluate which will be logged.\n *  Takes in 2 arguments:\n *  - `ctx` - the current state context\n *  - `event` - the event that caused this action to be executed.\n * @param label The label to give to the logged expression.\n */\nexport declare function log<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject>(value?: ResolvableLogValue<TContext, TExpressionEvent, TParams, TEvent>, label?: string): LogAction<TContext, TExpressionEvent, TParams, TEvent>;\nexport {};\n","/node_modules/xstate/dist/declarations/src/actions/enqueueActions.d.ts":"import { Guard } from \"../guards.js\";\nimport { Action, ActionArgs, ActionFunction, AnyActorRef, EventObject, MachineContext, ParameterizedObject, ProvidedActor, UnifiedArg } from \"../types.js\";\nimport { assign } from \"./assign.js\";\nimport { cancel } from \"./cancel.js\";\nimport { emit } from \"./emit.js\";\nimport { raise } from \"./raise.js\";\nimport { sendTo } from \"./send.js\";\nimport { spawnChild } from \"./spawnChild.js\";\nimport { stopChild } from \"./stopChild.js\";\ninterface ActionEnqueuer<TContext extends MachineContext, TExpressionEvent extends EventObject, TEvent extends EventObject, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string, TEmitted extends EventObject> {\n    (action: Action<TContext, TExpressionEvent, TEvent, undefined, TActor, TAction, TGuard, TDelay, TEmitted>): void;\n    assign: (...args: Parameters<typeof assign<TContext, TExpressionEvent, undefined, TEvent, TActor>>) => void;\n    cancel: (...args: Parameters<typeof cancel<TContext, TExpressionEvent, undefined, TEvent>>) => void;\n    raise: (...args: Parameters<typeof raise<TContext, TExpressionEvent, TEvent, undefined, TDelay, TDelay>>) => void;\n    sendTo: <TTargetActor extends AnyActorRef>(...args: Parameters<typeof sendTo<TContext, TExpressionEvent, undefined, TTargetActor, TEvent, TDelay, TDelay>>) => void;\n    spawnChild: (...args: Parameters<typeof spawnChild<TContext, TExpressionEvent, undefined, TEvent, TActor>>) => void;\n    stopChild: (...args: Parameters<typeof stopChild<TContext, TExpressionEvent, undefined, TEvent>>) => void;\n    emit: (...args: Parameters<typeof emit<TContext, TExpressionEvent, undefined, TEvent, TEmitted>>) => void;\n}\nexport interface EnqueueActionsAction<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string> {\n    (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams): void;\n    _out_TEvent?: TEvent;\n    _out_TActor?: TActor;\n    _out_TAction?: TAction;\n    _out_TGuard?: TGuard;\n    _out_TDelay?: TDelay;\n}\ninterface CollectActionsArg<TContext extends MachineContext, TExpressionEvent extends EventObject, TEvent extends EventObject, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string, TEmitted extends EventObject> extends UnifiedArg<TContext, TExpressionEvent, TEvent> {\n    check: (guard: Guard<TContext, TExpressionEvent, undefined, TGuard>) => boolean;\n    enqueue: ActionEnqueuer<TContext, TExpressionEvent, TEvent, TActor, TAction, TGuard, TDelay, TEmitted>;\n}\ntype CollectActions<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string, TEmitted extends EventObject> = ({ context, event, check, enqueue, self }: CollectActionsArg<TContext, TExpressionEvent, TEvent, TActor, TAction, TGuard, TDelay, TEmitted>, params: TParams) => void;\n/**\n * Creates an action object that will execute actions that are queued by the `enqueue(action)` function.\n *\n * @example\n  ```ts\n  import { createMachine, enqueueActions } from 'xstate';\n\n  const machine = createMachine({\n    entry: enqueueActions(({ enqueue, check }) => {\n      enqueue.assign({ count: 0 });\n\n      if (check('someGuard')) {\n        enqueue.assign({ count: 1 });\n      }\n\n      enqueue('someAction');\n    })\n  })\n  ```\n */\nexport declare function enqueueActions<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject = TExpressionEvent, TActor extends ProvidedActor = ProvidedActor, TAction extends ParameterizedObject = ParameterizedObject, TGuard extends ParameterizedObject = ParameterizedObject, TDelay extends string = never, TEmitted extends EventObject = EventObject>(collect: CollectActions<TContext, TExpressionEvent, TParams, TEvent, TActor, TAction, TGuard, TDelay, TEmitted>): ActionFunction<TContext, TExpressionEvent, TEvent, TParams, TActor, TAction, TGuard, TDelay, TEmitted>;\nexport {};\n","/node_modules/xstate/dist/declarations/src/actions/raise.d.ts":"import { ActionArgs, ActionFunction, DoNotInfer, EventObject, MachineContext, ParameterizedObject, RaiseActionOptions, SendExpr } from \"../types.js\";\nexport interface RaiseAction<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject, TDelay extends string> {\n    (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams): void;\n    _out_TEvent?: TEvent;\n    _out_TDelay?: TDelay;\n}\n/**\n * Raises an event. This places the event in the internal event queue, so that\n * the event is immediately consumed by the machine in the current step.\n *\n * @param eventType The event to raise.\n */\nexport declare function raise<TContext extends MachineContext, TExpressionEvent extends EventObject, TEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TDelay extends string = never, TUsedDelay extends TDelay = never>(eventOrExpr: DoNotInfer<TEvent> | SendExpr<TContext, TExpressionEvent, TParams, DoNotInfer<TEvent>, TEvent>, options?: RaiseActionOptions<TContext, TExpressionEvent, TParams, DoNotInfer<TEvent>, TUsedDelay>): ActionFunction<TContext, TExpressionEvent, TEvent, TParams, never, never, never, TDelay, never>;\n","/node_modules/xstate/dist/declarations/src/actions/stopChild.d.ts":"import { ActionArgs, AnyActorRef, EventObject, MachineContext, ParameterizedObject } from \"../types.js\";\ntype ResolvableActorRef<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject> = string | AnyActorRef | ((args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams) => AnyActorRef | string);\nexport interface StopAction<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject> {\n    (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams): void;\n}\n/**\n * Stops a child actor.\n *\n * @param actorRef The actor to stop.\n */\nexport declare function stopChild<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject>(actorRef: ResolvableActorRef<TContext, TExpressionEvent, TParams, TEvent>): StopAction<TContext, TExpressionEvent, TParams, TEvent>;\n/**\n * Stops a child actor.\n *\n * @deprecated Use `stopChild(...)` instead\n */\nexport declare const stop: typeof stopChild;\nexport {};\n","/node_modules/xstate/dist/declarations/src/actions/send.d.ts":"import { ActionArgs, ActionFunction, AnyActorRef, AnyEventObject, Cast, DoNotInfer, EventFrom, EventObject, InferEvent, MachineContext, ParameterizedObject, SendExpr, SendToActionOptions } from \"../types.js\";\nexport interface SendToAction<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject, TDelay extends string> {\n    (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams): void;\n    _out_TDelay?: TDelay;\n}\n/**\n * Sends an event to an actor.\n *\n * @param actor The `ActorRef` to send the event to.\n * @param event The event to send, or an expression that evaluates to the event to send\n * @param options Send action options\n *  - `id` - The unique send event identifier (used with `cancel()`).\n *  - `delay` - The number of milliseconds to delay the sending of the event.\n */\nexport declare function sendTo<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TTargetActor extends AnyActorRef, TEvent extends EventObject, TDelay extends string = never, TUsedDelay extends TDelay = never>(to: TTargetActor | string | ((args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams) => TTargetActor | string), eventOrExpr: EventFrom<TTargetActor> | SendExpr<TContext, TExpressionEvent, TParams, InferEvent<Cast<EventFrom<TTargetActor>, EventObject>>, TEvent>, options?: SendToActionOptions<TContext, TExpressionEvent, TParams, DoNotInfer<TEvent>, TUsedDelay>): ActionFunction<TContext, TExpressionEvent, TEvent, TParams, never, never, never, TDelay, never>;\n/**\n * Sends an event to this machine's parent.\n *\n * @param event The event to send to the parent machine.\n * @param options Options to pass into the send event.\n */\nexport declare function sendParent<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TSentEvent extends EventObject = AnyEventObject, TEvent extends EventObject = AnyEventObject, TDelay extends string = never, TUsedDelay extends TDelay = never>(event: TSentEvent | SendExpr<TContext, TExpressionEvent, TParams, TSentEvent, TEvent>, options?: SendToActionOptions<TContext, TExpressionEvent, TParams, TEvent, TUsedDelay>): ActionFunction<TContext, TExpressionEvent, TEvent, TParams, never, never, never, TDelay, never>;\ntype Target<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject> = string | AnyActorRef | ((args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams) => string | AnyActorRef);\n/**\n * Forwards (sends) an event to the `target` actor.\n *\n * @param target The target actor to forward the event to.\n * @param options Options to pass into the send action creator.\n */\nexport declare function forwardTo<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject, TDelay extends string = never, TUsedDelay extends TDelay = never>(target: Target<TContext, TExpressionEvent, TParams, TEvent>, options?: SendToActionOptions<TContext, TExpressionEvent, TParams, TEvent, TUsedDelay>): ActionFunction<TContext, TExpressionEvent, TEvent, TParams, never, never, never, TDelay, never>;\nexport {};\n","/node_modules/xstate/dist/declarations/src/actions/spawnChild.d.ts":"import { ActionArgs, ActionFunction, AnyActorLogic, ConditionalRequired, EventObject, InputFrom, IsLiteralString, IsNotNever, MachineContext, Mapper, ParameterizedObject, ProvidedActor, RequiredActorOptions, UnifiedArg } from \"../types.js\";\ntype ResolvableActorId<TContext extends MachineContext, TExpressionEvent extends EventObject, TEvent extends EventObject, TId extends string | undefined> = TId | ((args: UnifiedArg<TContext, TExpressionEvent, TEvent>) => TId);\nexport interface SpawnAction<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject, TActor extends ProvidedActor> {\n    (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams): void;\n    _out_TActor?: TActor;\n}\ninterface SpawnActionOptions<TContext extends MachineContext, TExpressionEvent extends EventObject, TEvent extends EventObject, TActor extends ProvidedActor> {\n    id?: ResolvableActorId<TContext, TExpressionEvent, TEvent, TActor['id']>;\n    systemId?: string;\n    input?: Mapper<TContext, TEvent, InputFrom<TActor['logic']>, TEvent> | InputFrom<TActor['logic']>;\n    syncSnapshot?: boolean;\n}\ntype DistributeActors<TContext extends MachineContext, TExpressionEvent extends EventObject, TEvent extends EventObject, TActor extends ProvidedActor> = (TActor extends any ? ConditionalRequired<[\n    src: TActor['src'],\n    options?: SpawnActionOptions<TContext, TExpressionEvent, TEvent, TActor> & {\n        [K in RequiredActorOptions<TActor>]: unknown;\n    }\n], IsNotNever<RequiredActorOptions<TActor>>> : never) | [\n    src: AnyActorLogic,\n    options?: SpawnActionOptions<TContext, TExpressionEvent, TEvent, ProvidedActor> & {\n        id?: never;\n    }\n];\ntype SpawnArguments<TContext extends MachineContext, TExpressionEvent extends EventObject, TEvent extends EventObject, TActor extends ProvidedActor> = IsLiteralString<TActor['src']> extends true ? DistributeActors<TContext, TExpressionEvent, TEvent, TActor> : [\n    src: string | AnyActorLogic,\n    options?: {\n        id?: ResolvableActorId<TContext, TExpressionEvent, TEvent, string>;\n        systemId?: string;\n        input?: unknown;\n        syncSnapshot?: boolean;\n    }\n];\nexport declare function spawnChild<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject, TActor extends ProvidedActor>(...[src, { id, systemId, input, syncSnapshot }]: SpawnArguments<TContext, TExpressionEvent, TEvent, TActor>): ActionFunction<TContext, TExpressionEvent, TEvent, TParams, TActor, never, never, never, never>;\nexport {};\n","/node_modules/xstate/dist/declarations/src/actors/index.d.ts":"import type { ActorRef, AnyEventObject, Snapshot } from \"../types.js\";\nexport { fromCallback, type CallbackActorLogic, type CallbackSnapshot } from \"./callback.js\";\nexport { fromEventObservable, fromObservable, type ObservableActorLogic, type ObservableSnapshot } from \"./observable.js\";\nexport { fromPromise, type PromiseActorLogic, type PromiseSnapshot } from \"./promise.js\";\nexport { fromTransition, type TransitionActorLogic, type TransitionSnapshot } from \"./transition.js\";\nexport declare function createEmptyActor(): ActorRef<Snapshot<undefined>, AnyEventObject>;\n","/node_modules/xstate/dist/declarations/src/waitFor.d.ts":"import { AnyActorRef, SnapshotFrom } from \"./types.js\";\ninterface WaitForOptions {\n    /**\n     * How long to wait before rejecting, if no emitted\n     * state satisfies the predicate.\n     *\n     * @defaultValue Infinity\n     */\n    timeout: number;\n}\n/**\n * Subscribes to an actor ref and waits for its emitted value to satisfy\n * a predicate, and then resolves with that value.\n * Will throw if the desired state is not reached after an optional timeout.\n * (defaults to Infinity).\n *\n * @example\n * ```js\n * const state = await waitFor(someService, state => {\n *   return state.hasTag('loaded');\n * });\n *\n * state.hasTag('loaded'); // true\n * ```\n *\n * @param actorRef The actor ref to subscribe to\n * @param predicate Determines if a value matches the condition to wait for\n * @param options\n * @returns A promise that eventually resolves to the emitted value\n * that matches the condition\n */\nexport declare function waitFor<TActorRef extends AnyActorRef>(actorRef: TActorRef, predicate: (emitted: SnapshotFrom<TActorRef>) => boolean, options?: Partial<WaitForOptions>): Promise<SnapshotFrom<TActorRef>>;\nexport {};\n","/node_modules/xstate/dist/declarations/src/actors/callback.d.ts":"import { AnyActorSystem } from \"../system.js\";\nimport { ActorLogic, ActorRefFrom, AnyEventObject, EventObject, NonReducibleUnknown, Snapshot } from \"../types.js\";\nexport type CallbackSnapshot<TInput> = Snapshot<undefined> & {\n    input: TInput;\n};\nexport type CallbackActorLogic<TEvent extends EventObject, TInput = NonReducibleUnknown> = ActorLogic<CallbackSnapshot<TInput>, TEvent, TInput, AnyActorSystem, EventObject>;\nexport type CallbackActorRef<TEvent extends EventObject, TInput = NonReducibleUnknown> = ActorRefFrom<CallbackActorLogic<TEvent, TInput>>;\nexport type Receiver<TEvent extends EventObject> = (listener: {\n    bivarianceHack(event: TEvent): void;\n}['bivarianceHack']) => void;\nexport type InvokeCallback<TEvent extends EventObject = AnyEventObject, TSentEvent extends EventObject = AnyEventObject, TInput = NonReducibleUnknown> = ({ input, system, self, sendBack, receive }: {\n    /**\n     * Data that was provided to the callback actor\n     * @see {@link https://stately.ai/docs/input | Input docs}\n     */\n    input: TInput;\n    /**\n     * The actor system to which the callback actor belongs\n     */\n    system: AnyActorSystem;\n    /**\n     * The parent actor of the callback actor\n     */\n    self: CallbackActorRef<TEvent>;\n    /**\n     * A function that can send events back to the parent actor\n     */\n    sendBack: (event: TSentEvent) => void;\n    /**\n     * A function that can be called with a listener function argument;\n     * the listener is then called whenever events are received by the callback actor\n     */\n    receive: Receiver<TEvent>;\n}) => (() => void) | void;\n/**\n * An actor logic creator which returns callback logic as defined by a callback function.\n *\n * @remarks\n * Useful for subscription-based or other free-form logic that can send events back to the parent actor.\n *\n * Actors created from callback logic (“callback actors”) can:\n * - Receive events via the `receive` function\n * - Send events to the parent actor via the `sendBack` function\n *\n * Callback actors are a bit different from other actors in that they:\n * - Do not work with `onDone`\n * - Do not produce a snapshot using `.getSnapshot()`\n * - Do not emit values when used with `.subscribe()`\n * - Can not be stopped with `.stop()`\n *\n * @param invokeCallback - The callback function used to describe the callback logic\n * The callback function is passed an object with the following properties:\n * - `receive` - A function that can send events back to the parent actor; the listener is then called whenever events are received by the callback actor\n * - `sendBack` - A function that can send events back to the parent actor\n * - `input` - Data that was provided to the callback actor\n * - `self` - The parent actor of the callback actor\n * - `system` - The actor system to which the callback actor belongs\n * The callback function can (optionally) return a cleanup function, which is called when the actor is stopped.\n * @see {@link InvokeCallback} for more information about the callback function and its object argument\n * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed\n\n * @returns Callback logic\n *\n * @example\n * ```typescript\n * const callbackLogic = fromCallback(({ sendBack, receive }) => {\n *   let lockStatus = 'unlocked';\n *\n *   const handler = (event) => {\n *     if (lockStatus === 'locked') {\n *       return;\n *     }\n *     sendBack(event);\n *   };\n *\n *   receive((event) => {\n *     if (event.type === 'lock') {\n *       lockStatus = 'locked';\n *     } else if (event.type === 'unlock') {\n *       lockStatus = 'unlocked';\n *     }\n *   });\n *\n *   document.body.addEventListener('click', handler);\n *\n *   return () => {\n *     document.body.removeEventListener('click', handler);\n *   };\n * });\n * ```\n */\nexport declare function fromCallback<TEvent extends EventObject, TInput = NonReducibleUnknown>(invokeCallback: InvokeCallback<TEvent, AnyEventObject, TInput>): CallbackActorLogic<TEvent, TInput>;\n","/node_modules/xstate/dist/declarations/src/actors/observable.d.ts":"import { AnyActorSystem } from \"../system.js\";\nimport { ActorLogic, ActorRefFrom, EventObject, NonReducibleUnknown, Snapshot, Subscribable, Subscription } from \"../types.js\";\nexport type ObservableSnapshot<TContext, TInput extends NonReducibleUnknown> = Snapshot<undefined> & {\n    context: TContext | undefined;\n    input: TInput | undefined;\n    _subscription: Subscription | undefined;\n};\nexport type ObservableActorLogic<TContext, TInput extends NonReducibleUnknown> = ActorLogic<ObservableSnapshot<TContext, TInput>, {\n    type: string;\n    [k: string]: unknown;\n}, TInput, AnyActorSystem, EventObject>;\nexport type ObservableActorRef<TContext> = ActorRefFrom<ObservableActorLogic<TContext, any>>;\n/**\n * Observable actor logic is described by an observable stream of values. Actors created from observable logic (“observable actors”) can:\n *\n * - Emit snapshots of the observable’s emitted value\n *\n * The observable’s emitted value is used as its observable actor’s `context`.\n *\n * Sending events to observable actors will have no effect.\n *\n * @param observableCreator A function that creates an observable. It receives one argument, an object with the following properties:\n * - `input` - Data that was provided to the observable actor\n * - `self` - The parent actor\n * - `system` - The actor system to which the observable actor belongs\n *\n * It should return a {@link Subscribable}, which is compatible with an RxJS Observable, although RxJS is not required to create them.\n *\n * @example\n * ```ts\n * import { fromObservable, createActor } from 'xstate'\n * import { interval } from 'rxjs';\n *\n * const logic = fromObservable((obj) => interval(1000));\n *\n * const actor = createActor(logic);\n *\n * actor.subscribe((snapshot) => {\n *   console.log(snapshot.context);\n * });\n *\n * actor.start();\n * // At every second:\n * // Logs 0\n * // Logs 1\n * // Logs 2\n * // ...\n * ```\n *\n * @see {@link https://rxjs.dev} for documentation on RxJS Observable and observable creators.\n * @see {@link Subscribable} interface in XState, which is based on and compatible with RxJS Observable.\n */\nexport declare function fromObservable<TContext, TInput extends NonReducibleUnknown>(observableCreator: ({ input, system }: {\n    input: TInput;\n    system: AnyActorSystem;\n    self: ObservableActorRef<TContext>;\n}) => Subscribable<TContext>): ObservableActorLogic<TContext, TInput>;\n/**\n * Creates event observable logic that listens to an observable that delivers event objects.\n *\n * Event observable actor logic is described by an observable stream of {@link https://stately.ai/docs/transitions#event-objects | event objects}. Actors created from event observable logic (“event observable actors”) can:\n *\n * - Implicitly send events to its parent actor\n * - Emit snapshots of its emitted event objects\n *\n * Sending events to event observable actors will have no effect.\n *\n * @param lazyObservable A function that creates an observable that delivers event objects. It receives one argument, an object with the following properties:\n *\n * - `input` - Data that was provided to the event observable actor\n * - `self` - The parent actor\n * - `system` - The actor system to which the event observable actor belongs.\n *\n * It should return a {@link Subscribable}, which is compatible with an RxJS Observable, although RxJS is not required to create them.\n *\n * @example\n * ```ts\n * import {\n *   fromEventObservable,\n *   Subscribable,\n *   EventObject,\n *   createMachine,\n *   createActor\n * } from 'xstate';\n * import { fromEvent } from 'rxjs';\n *\n * const mouseClickLogic = fromEventObservable(() =>\n *   fromEvent(document.body, 'click') as Subscribable<EventObject>\n * );\n *\n * const canvasMachine = createMachine({\n *   invoke: {\n *     // Will send mouse `click` events to the canvas actor\n *     src: mouseClickLogic,\n *   }\n * });\n *\n * const canvasActor = createActor(canvasMachine);\n * canvasActor.start();\n * ```\n */\nexport declare function fromEventObservable<T extends EventObject, TInput extends NonReducibleUnknown>(lazyObservable: ({ input, system }: {\n    input: TInput;\n    system: AnyActorSystem;\n    self: ObservableActorRef<T>;\n}) => Subscribable<T>): ObservableActorLogic<T, TInput>;\n","/node_modules/xstate/dist/declarations/src/actors/transition.d.ts":"import { AnyActorSystem } from \"../system.js\";\nimport { ActorLogic, ActorRefFrom, ActorScope, EventObject, NonReducibleUnknown, Snapshot } from \"../types.js\";\nexport type TransitionSnapshot<TContext> = Snapshot<undefined> & {\n    context: TContext;\n};\nexport type TransitionActorLogic<TContext, TEvent extends EventObject, TInput extends NonReducibleUnknown, TEmitted extends EventObject = EventObject> = ActorLogic<TransitionSnapshot<TContext>, TEvent, TInput, AnyActorSystem, TEmitted>;\nexport type TransitionActorRef<TContext, TEvent extends EventObject> = ActorRefFrom<TransitionActorLogic<TransitionSnapshot<TContext>, TEvent, unknown>>;\n/**\n * Returns actor logic given a transition function and its initial state.\n *\n * A “transition function” is a function that takes the current `state` and received `event` object as arguments, and returns the next state, similar to a reducer.\n *\n * Actors created from transition logic (“transition actors”) can:\n *\n * - Receive events\n * - Emit snapshots of its state\n *\n * The transition function’s `state` is used as its transition actor’s `context`.\n *\n * Note that the \"state\" for a transition function is provided by the initial state argument, and is not the same as the State object of an actor or a state within a machine configuration.\n *\n * @param transition The transition function used to describe the transition logic. It should return the next state given the current state and event. It receives the following arguments:\n * - `state` - the current state.\n * - `event` - the received event.\n * - `actorScope` - the actor scope object, with properties like `self` and `system`.\n * @param initialContext The initial state of the transition function, either an object representing the state, or a function which returns a state object. If a function, it will receive as its only argument an object with the following properties:\n * - `input` - the `input` provided to its parent transition actor.\n * - `self` - a reference to its parent transition actor.\n * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed\n * @returns Actor logic\n *\n * @example\n * ```ts\n * const transitionLogic = fromTransition(\n *   (state, event) => {\n *     if (event.type === 'increment') {\n *       return {\n *         ...state,\n *         count: state.count + 1,\n *       };\n *     }\n *     return state;\n *   },\n *   { count: 0 },\n * );\n *\n * const transitionActor = createActor(transitionLogic);\n * transitionActor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n * transitionActor.start();\n * // => {\n * //   status: 'active',\n * //   context: { count: 0 },\n * //   ...\n * // }\n *\n * transitionActor.send({ type: 'increment' });\n * // => {\n * //   status: 'active',\n * //   context: { count: 1 },\n * //   ...\n * // }\n * ```\n */\nexport declare function fromTransition<TContext, TEvent extends EventObject, TSystem extends AnyActorSystem, TInput extends NonReducibleUnknown, TEmitted extends EventObject = EventObject>(transition: (snapshot: TContext, event: TEvent, actorScope: ActorScope<TransitionSnapshot<TContext>, TEvent, TSystem>) => TContext, initialContext: TContext | (({ input, self }: {\n    input: TInput;\n    self: TransitionActorRef<TContext, TEvent>;\n}) => TContext)): TransitionActorLogic<TContext, TEvent, TInput, TEmitted>;\n","/node_modules/xstate/dist/declarations/src/actors/promise.d.ts":"import { AnyActorSystem } from \"../system.js\";\nimport { ActorLogic, ActorRefFrom, EventObject, NonReducibleUnknown, Snapshot } from \"../types.js\";\nexport type PromiseSnapshot<TOutput, TInput> = Snapshot<TOutput> & {\n    input: TInput | undefined;\n};\nexport type PromiseActorLogic<TOutput, TInput = unknown> = ActorLogic<PromiseSnapshot<TOutput, TInput>, {\n    type: string;\n    [k: string]: unknown;\n}, TInput, // input\nAnyActorSystem, EventObject>;\nexport type PromiseActorRef<TOutput> = ActorRefFrom<PromiseActorLogic<TOutput, unknown>>;\n/**\n * An actor logic creator which returns promise logic as defined by an async process that resolves or rejects after some time.\n *\n * Actors created from promise actor logic (“promise actors”) can:\n * - Emit the resolved value of the promise\n * - Output the resolved value of the promise\n *\n * Sending events to promise actors will have no effect.\n *\n * @param promiseCreator\n *   A function which returns a Promise, and accepts an object with the following properties:\n *   - `input` - Data that was provided to the promise actor\n *   - `self` - The parent actor of the promise actor\n *   - `system` - The actor system to which the promise actor belongs\n * @see {@link https://stately.ai/docs/input | Input docs} for more information about how input is passed\n *\n * @example\n * ```ts\n * const promiseLogic = fromPromise(async () => {\n *   const result = await fetch('https://example.com/...')\n *     .then((data) => data.json());\n *\n *   return result;\n * });\n *\n * const promiseActor = createActor(promiseLogic);\n * promiseActor.subscribe((snapshot) => {\n *   console.log(snapshot);\n * });\n * promiseActor.start();\n * // => {\n * //   output: undefined,\n * //   status: 'active'\n * //   ...\n * // }\n *\n * // After promise resolves\n * // => {\n * //   output: { ... },\n * //   status: 'done',\n * //   ...\n * // }\n * ```\n */\nexport declare function fromPromise<TOutput, TInput = NonReducibleUnknown>(promiseCreator: ({ input, system }: {\n    /**\n     * Data that was provided to the promise actor\n     */\n    input: TInput;\n    /**\n     * The actor system to which the promise actor belongs\n     */\n    system: AnyActorSystem;\n    /**\n     * The parent actor of the promise actor\n     */\n    self: PromiseActorRef<TOutput>;\n}) => PromiseLike<TOutput>): PromiseActorLogic<TOutput, TInput>;\n","/node_modules/@xstate/react/dist/declarations/src/shallowEqual.d.ts":"export declare function shallowEqual(objA: any, objB: any): boolean;\n","/node_modules/@xstate/react/dist/declarations/src/index.d.ts":"export { useActor } from \"./useActor.js\";\nexport { useActorRef } from \"./useActorRef.js\";\nexport { useSelector } from \"./useSelector.js\";\nexport { shallowEqual } from \"./shallowEqual.js\";\nexport { createActorContext } from \"./createActorContext.js\";\nexport { useMachine } from \"./useMachine.js\";\n","/node_modules/@xstate/react/dist/declarations/src/useActor.d.ts":"import { Actor, ActorOptions, AnyActorLogic, SnapshotFrom } from 'xstate';\nexport declare function useActor<TLogic extends AnyActorLogic>(logic: TLogic, options?: ActorOptions<TLogic>): [SnapshotFrom<TLogic>, Actor<TLogic>['send'], Actor<TLogic>];\n","/node_modules/@xstate/react/dist/declarations/src/createActorContext.d.ts":"import * as React from 'react';\nimport { Actor, ActorOptions, AnyActorLogic, SnapshotFrom } from 'xstate';\nexport declare function createActorContext<TLogic extends AnyActorLogic>(actorLogic: TLogic, actorOptions?: ActorOptions<TLogic>): {\n    useSelector: <T>(selector: (snapshot: SnapshotFrom<TLogic>) => T, compare?: (a: T, b: T) => boolean) => T;\n    useActorRef: () => Actor<TLogic>;\n    Provider: (props: {\n        children: React.ReactNode;\n        options?: ActorOptions<TLogic>;\n        /**\n         * @deprecated Use `logic` instead.\n         */\n        machine?: never;\n        logic?: TLogic;\n    }) => React.ReactElement<any, any>;\n};\n","/node_modules/@xstate/react/dist/declarations/src/useActorRef.d.ts":"import { Actor, ActorOptions, AnyActorLogic, Observer, SnapshotFrom } from 'xstate';\nexport declare function useIdleActorRef<TLogic extends AnyActorLogic>(logic: TLogic, options: Partial<ActorOptions<TLogic>>): Actor<TLogic>;\nexport declare function useActorRef<TLogic extends AnyActorLogic>(machine: TLogic, options?: ActorOptions<TLogic>, observerOrListener?: Observer<SnapshotFrom<TLogic>> | ((value: SnapshotFrom<TLogic>) => void)): Actor<TLogic>;\n","/node_modules/xstate/dist/declarations/src/types.d.ts":"import type { MachineSnapshot } from \"./State.js\";\nimport type { StateMachine } from \"./StateMachine.js\";\nimport type { StateNode } from \"./StateNode.js\";\nimport { AssignArgs } from \"./actions/assign.js\";\nimport { PromiseActorLogic } from \"./actors/promise.js\";\nimport { Guard, GuardPredicate, UnknownGuard } from \"./guards.js\";\nimport type { Actor } from \"./createActor.js\";\nimport { Spawner } from \"./spawn.js\";\nimport { AnyActorSystem, Clock } from './system.js';\nimport { InspectionEvent } from \"./inspection.js\";\nimport { ResolveTypegenMeta, TypegenConstraint, TypegenDisabled } from \"./typegenTypes.js\";\nexport type Identity<T> = {\n    [K in keyof T]: T[K];\n};\nexport type HomomorphicPick<T, K extends keyof any> = {\n    [P in keyof T as P & K]: T[P];\n};\nexport type HomomorphicOmit<T, K extends keyof any> = {\n    [P in keyof T as Exclude<P, K>]: T[P];\n};\nexport type Invert<T extends Record<PropertyKey, PropertyKey>> = {\n    [K in keyof T as T[K]]: K;\n};\nexport type GetParameterizedParams<T extends ParameterizedObject | undefined> = T extends any ? ('params' extends keyof T ? T['params'] : undefined) : never;\n/**\n *\n * @remarks\n *\n * `T | unknown` reduces to `unknown` and that can be problematic when it comes to contextual typing.\n * It especially is a problem when the union has a function member, like here:\n *\n * ```ts\n * declare function test(cbOrVal: ((arg: number) => unknown) | unknown): void;\n * test((arg) => {}) // oops, implicit any\n * ```\n *\n * This type can be used to avoid this problem. This union represents the same value space as `unknown`.\n */\nexport type NonReducibleUnknown = {} | null | undefined;\nexport type AnyFunction = (...args: any[]) => any;\ntype ReturnTypeOrValue<T> = T extends AnyFunction ? ReturnType<T> : T;\nexport type IsNever<T> = [T] extends [never] ? true : false;\nexport type IsNotNever<T> = [T] extends [never] ? false : true;\nexport type Compute<A extends any> = {\n    [K in keyof A]: A[K];\n} & unknown;\nexport type Prop<T, K> = K extends keyof T ? T[K] : never;\nexport type Values<T> = T[keyof T];\nexport type Elements<T> = T[keyof T & `${number}`];\nexport type Merge<M, N> = Omit<M, keyof N> & N;\nexport type IndexByProp<T extends Record<P, string>, P extends keyof T> = {\n    [E in T as E[P]]: E;\n};\nexport type IndexByType<T extends {\n    type: string;\n}> = IndexByProp<T, 'type'>;\nexport type Equals<A1 extends any, A2 extends any> = (<A>() => A extends A2 ? true : false) extends <A>() => A extends A1 ? true : false ? true : false;\nexport type IsAny<T> = Equals<T, any>;\nexport type Cast<A, B> = A extends B ? A : B;\nexport type DoNotInfer<T> = [T][T extends any ? 0 : any];\n/**\n * @deprecated Use the built-in `NoInfer` type instead\n */\nexport type NoInfer<T> = DoNotInfer<T>;\nexport type LowInfer<T> = T & {};\nexport type MetaObject = Record<string, any>;\nexport type Lazy<T> = () => T;\nexport type MaybeLazy<T> = T | Lazy<T>;\n/**\n * The full definition of an event, with a string `type`.\n */\nexport type EventObject = {\n    /**\n     * The type of event that is sent.\n     */\n    type: string;\n};\nexport interface AnyEventObject extends EventObject {\n    [key: string]: any;\n}\nexport interface ParameterizedObject {\n    type: string;\n    params?: NonReducibleUnknown;\n}\nexport interface UnifiedArg<TContext extends MachineContext, TExpressionEvent extends EventObject, TEvent extends EventObject> {\n    context: TContext;\n    event: TExpressionEvent;\n    self: ActorRef<MachineSnapshot<TContext, TEvent, Record<string, AnyActorRef | undefined>, // TODO: this should be replaced with `TChildren`\n    StateValue, string, unknown, TODO>, TEvent>;\n    system: AnyActorSystem;\n}\nexport type MachineContext = Record<string, any>;\nexport interface ActionArgs<TContext extends MachineContext, TExpressionEvent extends EventObject, TEvent extends EventObject> extends UnifiedArg<TContext, TExpressionEvent, TEvent> {\n}\nexport type InputFrom<T> = T extends StateMachine<infer _TContext, infer _TEvent, infer _TChildren, infer _TActor, infer _TAction, infer _TGuard, infer _TDelay, infer _TStateValue, infer _TTag, infer TInput, infer _TOutput, infer _TEmitted, infer _TMeta, infer _TResolvedTypesMeta> ? TInput : T extends ActorLogic<infer _TSnapshot, infer _TEvent, infer TInput, infer _TSystem, infer _TEmitted> ? TInput : never;\nexport type OutputFrom<T> = T extends ActorLogic<infer TSnapshot, infer _TEvent, infer _TInput, infer _TSystem, infer _TEmitted> ? (TSnapshot & {\n    status: 'done';\n})['output'] : T extends ActorRef<infer TSnapshot, infer _TEvent> ? (TSnapshot & {\n    status: 'done';\n})['output'] : never;\nexport type ActionFunction<TContext extends MachineContext, TExpressionEvent extends EventObject, TEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string, TEmitted extends EventObject> = {\n    (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams): void;\n    _out_TEvent?: TEvent;\n    _out_TActor?: TActor;\n    _out_TAction?: TAction;\n    _out_TGuard?: TGuard;\n    _out_TDelay?: TDelay;\n    _out_TEmitted?: TEmitted;\n};\nexport type NoRequiredParams<T extends ParameterizedObject> = T extends any ? undefined extends T['params'] ? T['type'] : never : never;\nexport type ConditionalRequired<T, Condition extends boolean> = Condition extends true ? Required<T> : T;\nexport type WithDynamicParams<TContext extends MachineContext, TExpressionEvent extends EventObject, T extends ParameterizedObject> = T extends any ? ConditionalRequired<{\n    type: T['type'];\n    params?: T['params'] | (({ context, event }: {\n        context: TContext;\n        event: TExpressionEvent;\n    }) => T['params']);\n}, undefined extends T['params'] ? false : true> : never;\nexport type Action<TContext extends MachineContext, TExpressionEvent extends EventObject, TEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string, TEmitted extends EventObject> = NoRequiredParams<TAction> | WithDynamicParams<TContext, TExpressionEvent, TAction> | ActionFunction<TContext, TExpressionEvent, TEvent, TParams, TActor, TAction, TGuard, TDelay, TEmitted>;\nexport type UnknownAction = Action<MachineContext, EventObject, EventObject, ParameterizedObject['params'] | undefined, ProvidedActor, ParameterizedObject, ParameterizedObject, string, EventObject>;\nexport type Actions<TContext extends MachineContext, TExpressionEvent extends EventObject, TEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string, TEmitted extends EventObject> = SingleOrArray<Action<TContext, TExpressionEvent, TEvent, TParams, TActor, TAction, TGuard, TDelay, TEmitted>>;\nexport type StateKey = string | AnyMachineSnapshot;\nexport interface StateValueMap {\n    [key: string]: StateValue | undefined;\n}\n/**\n * The string or object representing the state value relative to the parent state node.\n *\n * @remarks\n *\n * - For a child atomic state node, this is a string, e.g., `\"pending\"`.\n *\n * - For complex state nodes, this is an object, e.g., `{ success: \"someChildState\" }`.\n */\nexport type StateValue = string | StateValueMap;\nexport type TransitionTarget = SingleOrArray<string>;\nexport interface TransitionConfig<TContext extends MachineContext, TExpressionEvent extends EventObject, TEvent extends EventObject, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string, TEmitted extends EventObject = EventObject, TMeta extends MetaObject = MetaObject> {\n    guard?: Guard<TContext, TExpressionEvent, undefined, TGuard>;\n    actions?: Actions<TContext, TExpressionEvent, TEvent, undefined, TActor, TAction, TGuard, TDelay, TEmitted>;\n    reenter?: boolean;\n    target?: TransitionTarget | undefined;\n    meta?: TMeta;\n    description?: string;\n}\nexport interface InitialTransitionConfig<TContext extends MachineContext, TEvent extends EventObject, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string> extends TransitionConfig<TContext, TEvent, TEvent, TActor, TAction, TGuard, TDelay, TODO, // TEmitted\nTODO> {\n    target: string;\n}\nexport type AnyTransitionConfig = TransitionConfig<any, // TContext\nany, // TExpressionEvent\nany, // TEvent\nany, // TActor\nany, // TAction\nany, // TGuard\nany, // TDelay\nany, // TEmitted\nany>;\nexport interface InvokeDefinition<TContext extends MachineContext, TEvent extends EventObject, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string, TEmitted extends EventObject, TMeta extends MetaObject> {\n    id: string;\n    systemId: string | undefined;\n    /**\n     * The source of the actor logic to be invoked\n     */\n    src: AnyActorLogic | string;\n    input?: Mapper<TContext, TEvent, NonReducibleUnknown, TEvent> | NonReducibleUnknown;\n    /**\n     * The transition to take upon the invoked child machine reaching its final top-level state.\n     */\n    onDone?: string | SingleOrArray<TransitionConfig<TContext, DoneActorEvent<unknown>, TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta>>;\n    /**\n     * The transition to take upon the invoked child machine sending an error event.\n     */\n    onError?: string | SingleOrArray<TransitionConfig<TContext, ErrorActorEvent, TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta>>;\n    onSnapshot?: string | SingleOrArray<TransitionConfig<TContext, SnapshotEvent, TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta>>;\n    toJSON: () => Omit<InvokeDefinition<TContext, TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta>, 'onDone' | 'onError' | 'toJSON'>;\n}\ntype Delay<TDelay extends string> = TDelay | number;\nexport type DelayedTransitions<TContext extends MachineContext, TEvent extends EventObject, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string> = {\n    [K in Delay<TDelay>]?: string | SingleOrArray<TransitionConfig<TContext, TEvent, TEvent, TActor, TAction, TGuard, TDelay, TODO, // TEmitted\n    TODO>>;\n};\nexport type StateTypes = 'atomic' | 'compound' | 'parallel' | 'final' | 'history' | string;\nexport type SingleOrArray<T> = readonly T[] | T;\nexport type StateNodesConfig<TContext extends MachineContext, TEvent extends EventObject> = {\n    [K in string]: StateNode<TContext, TEvent>;\n};\nexport type StatesConfig<TContext extends MachineContext, TEvent extends EventObject, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string, TTag extends string, TOutput, TEmitted extends EventObject, TMeta extends MetaObject> = {\n    [K in string]: StateNodeConfig<TContext, TEvent, TActor, TAction, TGuard, TDelay, TTag, TOutput, TEmitted, TMeta>;\n};\nexport type StatesDefinition<TContext extends MachineContext, TEvent extends EventObject> = {\n    [K in string]: StateNodeDefinition<TContext, TEvent>;\n};\nexport type TransitionConfigTarget = string | undefined;\nexport type TransitionConfigOrTarget<TContext extends MachineContext, TExpressionEvent extends EventObject, TEvent extends EventObject, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string, TEmitted extends EventObject, TMeta extends MetaObject> = SingleOrArray<TransitionConfigTarget | TransitionConfig<TContext, TExpressionEvent, TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta>>;\nexport type TransitionsConfig<TContext extends MachineContext, TEvent extends EventObject, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string, TEmitted extends EventObject, TMeta extends MetaObject> = {\n    [K in EventDescriptor<TEvent>]?: TransitionConfigOrTarget<TContext, ExtractEvent<TEvent, K>, TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta>;\n};\ntype PartialEventDescriptor<TEventType extends string> = TEventType extends `${infer TLeading}.${infer TTail}` ? `${TLeading}.*` | `${TLeading}.${PartialEventDescriptor<TTail>}` : never;\nexport type EventDescriptor<TEvent extends EventObject> = TEvent['type'] | PartialEventDescriptor<TEvent['type']> | '*';\ntype NormalizeDescriptor<TDescriptor extends string> = TDescriptor extends '*' ? string : TDescriptor extends `${infer TLeading}.*` ? `${TLeading}.${string}` : TDescriptor;\nexport type IsLiteralString<T extends string> = string extends T ? false : true;\ntype DistributeActors<TContext extends MachineContext, TEvent extends EventObject, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string, TEmitted extends EventObject, TMeta extends MetaObject, TSpecificActor extends ProvidedActor> = TSpecificActor extends {\n    src: infer TSrc;\n} ? Compute<{\n    systemId?: string;\n    /**\n     * The source of the machine to be invoked, or the machine itself.\n     */\n    src: TSrc;\n    /**\n     * The unique identifier for the invoked machine. If not specified, this\n     * will be the machine's own `id`, or the URL (from `src`).\n     */\n    id?: TSpecificActor['id'];\n    input?: Mapper<TContext, TEvent, InputFrom<TSpecificActor['logic']>, TEvent> | InputFrom<TSpecificActor['logic']>;\n    /**\n     * The transition to take upon the invoked child machine reaching its final top-level state.\n     */\n    onDone?: string | SingleOrArray<TransitionConfigOrTarget<TContext, DoneActorEvent<OutputFrom<TSpecificActor['logic']>>, TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta>>;\n    /**\n     * The transition to take upon the invoked child machine sending an error event.\n     */\n    onError?: string | SingleOrArray<TransitionConfigOrTarget<TContext, ErrorActorEvent, TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta>>;\n    onSnapshot?: string | SingleOrArray<TransitionConfigOrTarget<TContext, SnapshotEvent<SnapshotFrom<TSpecificActor['logic']>>, TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta>>;\n} & {\n    [K in RequiredActorOptions<TSpecificActor>]: unknown;\n}> | {\n    id?: never;\n    systemId?: string;\n    src: AnyActorLogic;\n    input?: Mapper<TContext, TEvent, NonReducibleUnknown, TEvent> | NonReducibleUnknown;\n    onDone?: string | SingleOrArray<TransitionConfigOrTarget<TContext, DoneActorEvent<unknown>, TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta>>;\n    onError?: string | SingleOrArray<TransitionConfigOrTarget<TContext, ErrorActorEvent, TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta>>;\n    onSnapshot?: string | SingleOrArray<TransitionConfigOrTarget<TContext, SnapshotEvent, TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta>>;\n} : never;\nexport type InvokeConfig<TContext extends MachineContext, TEvent extends EventObject, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string, TEmitted extends EventObject, TMeta extends MetaObject> = IsLiteralString<TActor['src']> extends true ? DistributeActors<TContext, TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta, TActor> : {\n    /**\n     * The unique identifier for the invoked machine. If not specified, this\n     * will be the machine's own `id`, or the URL (from `src`).\n     */\n    id?: string;\n    systemId?: string;\n    /**\n     * The source of the machine to be invoked, or the machine itself.\n     */\n    src: AnyActorLogic | string;\n    input?: Mapper<TContext, TEvent, NonReducibleUnknown, TEvent> | NonReducibleUnknown;\n    /**\n     * The transition to take upon the invoked child machine reaching its final top-level state.\n     */\n    onDone?: string | SingleOrArray<TransitionConfigOrTarget<TContext, DoneActorEvent<any>, // TODO: consider replacing with `unknown`\n    TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta>>;\n    /**\n     * The transition to take upon the invoked child machine sending an error event.\n     */\n    onError?: string | SingleOrArray<TransitionConfigOrTarget<TContext, ErrorActorEvent, TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta>>;\n    onSnapshot?: string | SingleOrArray<TransitionConfigOrTarget<TContext, SnapshotEvent, TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta>>;\n};\nexport type AnyInvokeConfig = InvokeConfig<any, any, any, any, any, any, any, any>;\nexport interface StateNodeConfig<TContext extends MachineContext, TEvent extends EventObject, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string, TTag extends string, TOutput, TEmitted extends EventObject, TMeta extends MetaObject> {\n    /**\n     * The initial state transition.\n     */\n    initial?: InitialTransitionConfig<TContext, TEvent, TActor, TAction, TGuard, TDelay> | string | undefined;\n    /**\n     * The type of this state node:\n     *\n     *  - `'atomic'` - no child state nodes\n     *  - `'compound'` - nested child state nodes (XOR)\n     *  - `'parallel'` - orthogonal nested child state nodes (AND)\n     *  - `'history'` - history state node\n     *  - `'final'` - final state node\n     */\n    type?: 'atomic' | 'compound' | 'parallel' | 'final' | 'history';\n    /**\n     * Indicates whether the state node is a history state node, and what\n     * type of history:\n     * shallow, deep, true (shallow), false (none), undefined (none)\n     */\n    history?: 'shallow' | 'deep' | boolean | undefined;\n    /**\n     * The mapping of state node keys to their state node configurations (recursive).\n     */\n    states?: StatesConfig<TContext, TEvent, TActor, TAction, TGuard, TDelay, TTag, NonReducibleUnknown, TEmitted, TMeta> | undefined;\n    /**\n     * The services to invoke upon entering this state node. These services will be stopped upon exiting this state node.\n     */\n    invoke?: SingleOrArray<InvokeConfig<TContext, TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta>>;\n    /**\n     * The mapping of event types to their potential transition(s).\n     */\n    on?: TransitionsConfig<TContext, TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta>;\n    /**\n     * The action(s) to be executed upon entering the state node.\n     */\n    entry?: Actions<TContext, TEvent, TEvent, undefined, TActor, TAction, TGuard, TDelay, TEmitted>;\n    /**\n     * The action(s) to be executed upon exiting the state node.\n     */\n    exit?: Actions<TContext, TEvent, TEvent, undefined, TActor, TAction, TGuard, TDelay, TEmitted>;\n    /**\n     * The potential transition(s) to be taken upon reaching a final child state node.\n     *\n     * This is equivalent to defining a `[done(id)]` transition on this state node's `on` property.\n     */\n    onDone?: string | SingleOrArray<TransitionConfig<TContext, DoneStateEvent, TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta>> | undefined;\n    /**\n     * The mapping (or array) of delays (in milliseconds) to their potential transition(s).\n     * The delayed transitions are taken after the specified delay in an interpreter.\n     */\n    after?: DelayedTransitions<TContext, TEvent, TActor, TAction, TGuard, TDelay>;\n    /**\n     * An eventless transition that is always taken when this state node is active.\n     */\n    always?: TransitionConfigOrTarget<TContext, TEvent, TEvent, TActor, TAction, TGuard, TDelay, TEmitted, TMeta>;\n    parent?: StateNode<TContext, TEvent>;\n    /**\n     * The meta data associated with this state node, which will be returned in State instances.\n     */\n    meta?: TMeta;\n    /**\n     * The output data sent with the \"xstate.done.state._id_\" event if this is a final state node.\n     *\n     * The output data will be evaluated with the current `context` and placed on the `.data` property\n     * of the event.\n     */\n    output?: Mapper<TContext, TEvent, unknown, TEvent> | NonReducibleUnknown;\n    /**\n     * The unique ID of the state node, which can be referenced as a transition target via the\n     * `#id` syntax.\n     */\n    id?: string | undefined;\n    /**\n     * The order this state node appears. Corresponds to the implicit document order.\n     */\n    order?: number;\n    /**\n     * The tags for this state node, which are accumulated into the `state.tags` property.\n     */\n    tags?: SingleOrArray<TTag>;\n    /**\n     * A text description of the state node\n     */\n    description?: string;\n    /**\n     * A default target for a history state\n     */\n    target?: string;\n}\nexport type AnyStateNodeConfig = StateNodeConfig<any, any, any, any, any, any, any, any, any, // emitted\nany>;\nexport interface StateNodeDefinition<TContext extends MachineContext, TEvent extends EventObject> {\n    id: string;\n    version?: string | undefined;\n    key: string;\n    type: 'atomic' | 'compound' | 'parallel' | 'final' | 'history';\n    initial: InitialTransitionDefinition<TContext, TEvent> | undefined;\n    history: boolean | 'shallow' | 'deep' | undefined;\n    states: StatesDefinition<TContext, TEvent>;\n    on: TransitionDefinitionMap<TContext, TEvent>;\n    transitions: Array<TransitionDefinition<TContext, TEvent>>;\n    entry: UnknownAction[];\n    exit: UnknownAction[];\n    meta: any;\n    order: number;\n    output?: StateNodeConfig<TContext, TEvent, ProvidedActor, ParameterizedObject, ParameterizedObject, string, string, unknown, EventObject, // TEmitted\n    any>['output'];\n    invoke: Array<InvokeDefinition<TContext, TEvent, TODO, TODO, TODO, TODO, TODO, // TEmitted\n    TODO>>;\n    description?: string;\n    tags: string[];\n}\nexport interface StateMachineDefinition<TContext extends MachineContext, TEvent extends EventObject> extends StateNodeDefinition<TContext, TEvent> {\n}\nexport type AnyStateNode = StateNode<any, any>;\nexport type AnyStateNodeDefinition = StateNodeDefinition<any, any>;\nexport type AnyMachineSnapshot = MachineSnapshot<any, any, any, any, any, any, any>;\n/** @deprecated use `AnyMachineSnapshot` instead */\nexport type AnyState = AnyMachineSnapshot;\nexport type AnyStateMachine = StateMachine<any, // context\nany, // event\nany, // children\nany, // actor\nany, // action\nany, // guard\nany, // delay\nany, // state value\nany, // tag\nany, // input\nany, // output\nany, // emitted\nany, // TMeta\nany>;\nexport type AnyStateConfig = StateConfig<any, AnyEventObject>;\nexport interface AtomicStateNodeConfig<TContext extends MachineContext, TEvent extends EventObject> extends StateNodeConfig<TContext, TEvent, TODO, TODO, TODO, TODO, TODO, TODO, TODO, // emitted\nTODO> {\n    initial?: undefined;\n    parallel?: false | undefined;\n    states?: undefined;\n    onDone?: undefined;\n}\nexport interface HistoryStateNodeConfig<TContext extends MachineContext, TEvent extends EventObject> extends AtomicStateNodeConfig<TContext, TEvent> {\n    history: 'shallow' | 'deep' | true;\n    target: string | undefined;\n}\nexport type SimpleOrStateNodeConfig<TContext extends MachineContext, TEvent extends EventObject> = AtomicStateNodeConfig<TContext, TEvent> | StateNodeConfig<TContext, TEvent, TODO, TODO, TODO, TODO, TODO, TODO, TODO, // emitted\nTODO>;\nexport type ActionFunctionMap<TContext extends MachineContext, TEvent extends EventObject, TActor extends ProvidedActor, TAction extends ParameterizedObject = ParameterizedObject, TGuard extends ParameterizedObject = ParameterizedObject, TDelay extends string = string, TEmitted extends EventObject = EventObject> = {\n    [K in TAction['type']]?: ActionFunction<TContext, TEvent, TEvent, GetParameterizedParams<TAction extends {\n        type: K;\n    } ? TAction : never>, TActor, TAction, TGuard, TDelay, TEmitted>;\n};\ntype GuardMap<TContext extends MachineContext, TEvent extends EventObject, TGuard extends ParameterizedObject> = {\n    [K in TGuard['type']]?: GuardPredicate<TContext, TEvent, GetParameterizedParams<TGuard extends {\n        type: K;\n    } ? TGuard : never>, TGuard>;\n};\nexport type DelayFunctionMap<TContext extends MachineContext, TEvent extends EventObject, TAction extends ParameterizedObject> = Record<string, DelayConfig<TContext, TEvent, TAction['params'], TEvent>>;\nexport type DelayConfig<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject> = number | DelayExpr<TContext, TExpressionEvent, TParams, TEvent>;\n/**\n * @hidden\n */\nexport interface MachineImplementationsSimplified<TContext extends MachineContext, TEvent extends EventObject, TActor extends ProvidedActor = ProvidedActor, TAction extends ParameterizedObject = ParameterizedObject, TGuard extends ParameterizedObject = ParameterizedObject> {\n    guards: GuardMap<TContext, TEvent, TGuard>;\n    actions: ActionFunctionMap<TContext, TEvent, TActor, TAction>;\n    actors: Record<string, AnyActorLogic | {\n        src: AnyActorLogic;\n        input: Mapper<TContext, TEvent, unknown, TEvent> | NonReducibleUnknown;\n    }>;\n    delays: DelayFunctionMap<TContext, TEvent, TAction>;\n}\ntype MaybeNarrowedEvent<TIndexedEvents, TCausingLookup, K> = Cast<Prop<TIndexedEvents, K extends keyof TCausingLookup ? TCausingLookup[K] : TIndexedEvents[keyof TIndexedEvents]>, EventObject>;\ntype MachineImplementationsActions<TContext extends MachineContext, TResolvedTypesMeta, TEventsCausingActions = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'eventsCausingActions'>, TIndexedEvents = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedEvents'>, TIndexedActors = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedActors'>, TIndexedActions = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedActions'>, TIndexedGuards = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedGuards'>, TIndexedDelays = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedDelays'>, TEmitted = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'emitted'>> = {\n    [K in keyof TIndexedActions]?: ActionFunction<TContext, MaybeNarrowedEvent<TIndexedEvents, TEventsCausingActions, K>, Cast<Prop<TIndexedEvents, keyof TIndexedEvents>, EventObject>, GetParameterizedParams<Cast<TIndexedActions[K], ParameterizedObject>>, Cast<Prop<TIndexedActors, keyof TIndexedActors>, ProvidedActor>, Cast<Prop<TIndexedActions, keyof TIndexedActions>, ParameterizedObject>, Cast<Prop<TIndexedGuards, keyof TIndexedGuards>, ParameterizedObject>, Cast<Prop<TIndexedDelays, keyof TIndexedDelays>, ParameterizedObject>['type'], Cast<TEmitted, EventObject>>;\n};\ntype MachineImplementationsActors<_TContext extends MachineContext, TResolvedTypesMeta, TIndexedActors = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedActors'>, _TInvokeSrcNameMap = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'invokeSrcNameMap'>> = {\n    [K in keyof TIndexedActors]?: Cast<Prop<TIndexedActors[K], 'logic'>, AnyActorLogic>;\n};\ntype MachineImplementationsDelays<TContext extends MachineContext, TResolvedTypesMeta, TEventsCausingDelays = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'eventsCausingDelays'>, TIndexedEvents = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedEvents'>, TIndexedActions = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedActions'>, TIndexedDelays = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedDelays'>> = {\n    [K in keyof TIndexedDelays]?: DelayConfig<TContext, MaybeNarrowedEvent<TIndexedEvents, TEventsCausingDelays, K>, Cast<Prop<Prop<TIndexedActions, keyof TIndexedActions>, 'params'>, ParameterizedObject['params'] | undefined> | undefined, Cast<Prop<TIndexedEvents, keyof TIndexedEvents>, EventObject>>;\n};\ntype MachineImplementationsGuards<TContext extends MachineContext, TResolvedTypesMeta, TEventsCausingGuards = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'eventsCausingGuards'>, TIndexedEvents = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedEvents'>, TIndexedGuards = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'indexedGuards'>> = {\n    [K in keyof TIndexedGuards]?: Guard<TContext, MaybeNarrowedEvent<TIndexedEvents, TEventsCausingGuards, K>, GetParameterizedParams<Cast<TIndexedGuards[K], ParameterizedObject | undefined>>, Cast<Prop<TIndexedGuards, keyof TIndexedGuards>, ParameterizedObject>>;\n};\ntype MakeKeysRequired<T extends string> = {\n    [K in T]: unknown;\n};\ntype MaybeMakeMissingImplementationsRequired<TImplementationType, TMissingImplementationsForType, TRequireMissingImplementations> = TRequireMissingImplementations extends true ? IsNever<TMissingImplementationsForType> extends true ? {} : {\n    [K in Cast<TImplementationType, string>]: MakeKeysRequired<Cast<TMissingImplementationsForType, string>>;\n} : {};\ntype GenerateActionsImplementationsPart<TContext extends MachineContext, TResolvedTypesMeta, TRequireMissingImplementations, TMissingImplementations> = Compute<MaybeMakeMissingImplementationsRequired<'actions', Prop<TMissingImplementations, 'actions'>, TRequireMissingImplementations> & {\n    actions?: MachineImplementationsActions<TContext, TResolvedTypesMeta>;\n}>;\ntype GenerateActorsImplementationsPart<TContext extends MachineContext, TResolvedTypesMeta, TRequireMissingImplementations, TMissingImplementations> = Compute<MaybeMakeMissingImplementationsRequired<'actors', Prop<TMissingImplementations, 'actors'>, TRequireMissingImplementations> & {\n    actors?: MachineImplementationsActors<TContext, TResolvedTypesMeta>;\n}>;\ntype GenerateDelaysImplementationsPart<TContext extends MachineContext, TResolvedTypesMeta, TRequireMissingImplementations, TMissingImplementations> = Compute<MaybeMakeMissingImplementationsRequired<'delays', Prop<TMissingImplementations, 'delays'>, TRequireMissingImplementations> & {\n    delays?: MachineImplementationsDelays<TContext, TResolvedTypesMeta>;\n}>;\ntype GenerateGuardsImplementationsPart<TContext extends MachineContext, TResolvedTypesMeta, TRequireMissingImplementations, TMissingImplementations> = Compute<MaybeMakeMissingImplementationsRequired<'guards', Prop<TMissingImplementations, 'guards'>, TRequireMissingImplementations> & {\n    guards?: MachineImplementationsGuards<TContext, TResolvedTypesMeta>;\n}>;\nexport type InternalMachineImplementations<TContext extends MachineContext, TResolvedTypesMeta, TRequireMissingImplementations extends boolean = false, TMissingImplementations = Prop<Prop<TResolvedTypesMeta, 'resolved'>, 'missingImplementations'>> = Compute<GenerateActionsImplementationsPart<TContext, TResolvedTypesMeta, TRequireMissingImplementations, TMissingImplementations> & GenerateActorsImplementationsPart<TContext, TResolvedTypesMeta, TRequireMissingImplementations, TMissingImplementations> & GenerateDelaysImplementationsPart<TContext, TResolvedTypesMeta, TRequireMissingImplementations, TMissingImplementations> & GenerateGuardsImplementationsPart<TContext, TResolvedTypesMeta, TRequireMissingImplementations, TMissingImplementations>>;\nexport type MachineImplementations<TContext extends MachineContext, TEvent extends EventObject, TActor extends ProvidedActor = ProvidedActor, TAction extends ParameterizedObject = ParameterizedObject, TGuard extends ParameterizedObject = ParameterizedObject, TDelay extends string = string, TTag extends string = string, TTypesMeta extends TypegenConstraint = TypegenDisabled> = InternalMachineImplementations<TContext, ResolveTypegenMeta<TTypesMeta, TEvent, TActor, TAction, TGuard, TDelay, TTag>>;\ntype InitialContext<TContext extends MachineContext, TActor extends ProvidedActor, TInput, TEvent extends EventObject> = TContext | ContextFactory<TContext, TActor, TInput, TEvent>;\nexport type ContextFactory<TContext extends MachineContext, TActor extends ProvidedActor, TInput, TEvent extends EventObject = EventObject> = ({ spawn, input, self }: {\n    spawn: Spawner<TActor>;\n    input: TInput;\n    self: ActorRef<MachineSnapshot<TContext, TEvent, Record<string, AnyActorRef | undefined>, // TODO: this should be replaced with `TChildren`\n    StateValue, string, unknown, TODO>, TEvent>;\n}) => TContext;\nexport type MachineConfig<TContext extends MachineContext, TEvent extends EventObject, TActor extends ProvidedActor = ProvidedActor, TAction extends ParameterizedObject = ParameterizedObject, TGuard extends ParameterizedObject = ParameterizedObject, TDelay extends string = string, TTag extends string = string, TInput = any, TOutput = unknown, TEmitted extends EventObject = EventObject, TMeta extends MetaObject = MetaObject, TTypesMeta = TypegenDisabled> = (Omit<StateNodeConfig<DoNotInfer<TContext>, DoNotInfer<TEvent>, DoNotInfer<TActor>, DoNotInfer<TAction>, DoNotInfer<TGuard>, DoNotInfer<TDelay>, DoNotInfer<TTag>, DoNotInfer<TOutput>, DoNotInfer<TEmitted>, DoNotInfer<TMeta>>, 'output'> & {\n    /**\n     * The initial context (extended state)\n     */\n    /**\n     * The machine's own version.\n     */\n    version?: string;\n    output?: Mapper<TContext, DoneStateEvent, TOutput, TEvent> | TOutput;\n}) & (MachineContext extends TContext ? {\n    context?: InitialContext<LowInfer<TContext>, TActor, TInput, TEvent>;\n} : {\n    context: InitialContext<LowInfer<TContext>, TActor, TInput, TEvent>;\n});\nexport type UnknownMachineConfig = MachineConfig<MachineContext, EventObject>;\nexport interface ProvidedActor {\n    src: string;\n    logic: UnknownActorLogic;\n    id?: string;\n}\nexport interface SetupTypes<TContext extends MachineContext, TEvent extends EventObject, TChildrenMap extends Record<string, string>, TTag extends string, TInput, TOutput, TEmitted extends EventObject, TMeta extends MetaObject> {\n    context?: TContext;\n    events?: TEvent;\n    children?: TChildrenMap;\n    tags?: TTag;\n    input?: TInput;\n    output?: TOutput;\n    emitted?: TEmitted;\n    meta?: TMeta;\n}\nexport interface MachineTypes<TContext extends MachineContext, TEvent extends EventObject, TActor extends ProvidedActor, TAction extends ParameterizedObject, TGuard extends ParameterizedObject, TDelay extends string, TTag extends string, TInput, TOutput, TEmitted extends EventObject, TMeta extends MetaObject, TTypesMeta = TypegenDisabled> extends SetupTypes<TContext, TEvent, never, TTag, TInput, TOutput, TEmitted, TMeta> {\n    actors?: TActor;\n    actions?: TAction;\n    guards?: TGuard;\n    delays?: TDelay;\n    typegen?: TTypesMeta;\n    meta?: TMeta;\n}\nexport interface HistoryStateNode<TContext extends MachineContext> extends StateNode<TContext> {\n    history: 'shallow' | 'deep';\n    target: string | undefined;\n}\nexport type HistoryValue<TContext extends MachineContext, TEvent extends EventObject> = Record<string, Array<StateNode<TContext, TEvent>>>;\nexport type AnyHistoryValue = HistoryValue<any, any>;\nexport type StateFrom<T extends AnyStateMachine | ((...args: any[]) => AnyStateMachine)> = T extends AnyStateMachine ? ReturnType<T['transition']> : T extends (...args: any[]) => AnyStateMachine ? ReturnType<ReturnType<T>['transition']> : never;\nexport type Transitions<TContext extends MachineContext, TEvent extends EventObject> = Array<TransitionDefinition<TContext, TEvent>>;\nexport interface DoneActorEvent<TOutput = unknown> {\n    type: `xstate.done.actor.${string}`;\n    output: TOutput;\n}\nexport interface ErrorActorEvent<TErrorData = unknown> extends EventObject {\n    type: `xstate.error.actor.${string}`;\n    error: TErrorData;\n}\nexport interface SnapshotEvent<TSnapshot extends Snapshot<unknown> = Snapshot<unknown>> extends EventObject {\n    type: `xstate.snapshot.${string}`;\n    snapshot: TSnapshot;\n}\nexport interface DoneStateEvent<TOutput = unknown> extends EventObject {\n    type: `xstate.done.state.${string}`;\n    output: TOutput;\n}\nexport type DelayExpr<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject> = (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams) => number;\nexport type LogExpr<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject> = (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams) => unknown;\nexport type SendExpr<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TSentEvent extends EventObject, TEvent extends EventObject> = (args: ActionArgs<TContext, TExpressionEvent, TEvent>, params: TParams) => TSentEvent;\nexport declare enum SpecialTargets {\n    Parent = \"#_parent\",\n    Internal = \"#_internal\"\n}\nexport interface SendToActionOptions<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject, TDelay extends string> extends RaiseActionOptions<TContext, TExpressionEvent, TParams, TEvent, TDelay> {\n}\nexport interface RaiseActionOptions<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject, TDelay extends string> {\n    id?: string;\n    delay?: Delay<TDelay> | DelayExpr<TContext, TExpressionEvent, TParams, TEvent>;\n}\nexport interface RaiseActionParams<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject, TDelay extends string> extends RaiseActionOptions<TContext, TExpressionEvent, TParams, TEvent, TDelay> {\n    event: TEvent | SendExpr<TContext, TExpressionEvent, TParams, TEvent, TEvent>;\n}\nexport interface SendToActionParams<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TSentEvent extends EventObject, TEvent extends EventObject, TDelay extends string> extends SendToActionOptions<TContext, TExpressionEvent, TParams, TEvent, TDelay> {\n    event: TSentEvent | SendExpr<TContext, TExpressionEvent, TParams, TSentEvent, TEvent>;\n}\nexport type Assigner<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject, TActor extends ProvidedActor> = (args: AssignArgs<TContext, TExpressionEvent, TEvent, TActor>, params: TParams) => Partial<TContext>;\nexport type PartialAssigner<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject, TActor extends ProvidedActor, TKey extends keyof TContext> = (args: AssignArgs<TContext, TExpressionEvent, TEvent, TActor>, params: TParams) => TContext[TKey];\nexport type PropertyAssigner<TContext extends MachineContext, TExpressionEvent extends EventObject, TParams extends ParameterizedObject['params'] | undefined, TEvent extends EventObject, TActor extends ProvidedActor> = {\n    [K in keyof TContext]?: PartialAssigner<TContext, TExpressionEvent, TParams, TEvent, TActor, K> | TContext[K];\n};\nexport type Mapper<TContext extends MachineContext, TExpressionEvent extends EventObject, TResult, TEvent extends EventObject> = (args: {\n    context: TContext;\n    event: TExpressionEvent;\n    self: ActorRef<MachineSnapshot<TContext, TEvent, Record<string, AnyActorRef>, // TODO: this should be replaced with `TChildren`\n    StateValue, string, unknown, TODO>, TEvent>;\n}) => TResult;\nexport interface TransitionDefinition<TContext extends MachineContext, TEvent extends EventObject> extends Omit<TransitionConfig<TContext, TEvent, TEvent, TODO, TODO, TODO, TODO, TODO, // TEmitted\nTODO>, 'target' | 'guard'> {\n    target: ReadonlyArray<StateNode<TContext, TEvent>> | undefined;\n    source: StateNode<TContext, TEvent>;\n    actions: readonly UnknownAction[];\n    reenter: boolean;\n    guard?: UnknownGuard;\n    eventType: EventDescriptor<TEvent>;\n    toJSON: () => {\n        target: string[] | undefined;\n        source: string;\n        actions: readonly UnknownAction[];\n        guard?: UnknownGuard;\n        eventType: EventDescriptor<TEvent>;\n        meta?: Record<string, any>;\n    };\n}\nexport type AnyTransitionDefinition = TransitionDefinition<any, any>;\nexport interface InitialTransitionDefinition<TContext extends MachineContext, TEvent extends EventObject> extends TransitionDefinition<TContext, TEvent> {\n    target: ReadonlyArray<StateNode<TContext, TEvent>>;\n    guard?: never;\n}\nexport type TransitionDefinitionMap<TContext extends MachineContext, TEvent extends EventObject> = {\n    [K in EventDescriptor<TEvent>]: Array<TransitionDefinition<TContext, ExtractEvent<TEvent, K>>>;\n};\nexport interface DelayedTransitionDefinition<TContext extends MachineContext, TEvent extends EventObject> extends TransitionDefinition<TContext, TEvent> {\n    delay: number | string | DelayExpr<TContext, TEvent, undefined, TEvent>;\n}\nexport interface StateLike<TContext extends MachineContext> {\n    value: StateValue;\n    context: TContext;\n    event: EventObject;\n}\nexport interface StateConfig<TContext extends MachineContext, TEvent extends EventObject> {\n    context: TContext;\n    historyValue?: HistoryValue<TContext, TEvent>;\n    children: Record<string, AnyActorRef>;\n    status: 'active' | 'done' | 'error' | 'stopped';\n    output?: any;\n    error?: unknown;\n    machine?: StateMachine<TContext, TEvent, any, any, any, any, any, any, any, any, any, any, // TMeta\n    any>;\n}\nexport interface ActorOptions<TLogic extends AnyActorLogic> {\n    /**\n     * The clock that is responsible for setting and clearing timeouts, such as delayed events and transitions.\n     *\n     * @remarks\n     * You can create your own “clock”. The clock interface is an object with two functions/methods:\n     *\n     * - `setTimeout` - same arguments as `window.setTimeout(fn, timeout)`\n     * - `clearTimeout` - same arguments as `window.clearTimeout(id)`\n     *\n     * By default, the native `setTimeout` and `clearTimeout` functions are used.\n     *\n     * For testing, XState provides `SimulatedClock`.\n     *\n     * @see {@link Clock}\n     * @see {@link SimulatedClock}\n     */\n    clock?: Clock;\n    /**\n     * Specifies the logger to be used for `log(...)` actions. Defaults to the native `console.log(...)` method.\n     */\n    logger?: (...args: any[]) => void;\n    parent?: AnyActorRef;\n    /**\n     * The custom `id` for referencing this service.\n     */\n    id?: string;\n    /**\n     * @deprecated Use `inspect` instead.\n     */\n    devTools?: never;\n    /**\n     * The system ID to register this actor under.\n     */\n    systemId?: string;\n    /**\n     * The input data to pass to the actor.\n     */\n    input?: InputFrom<TLogic>;\n    /**\n     * Initializes actor logic from a specific persisted internal state.\n     *\n     * @remarks\n     *\n     * If the state is compatible with the actor logic, when the actor is started it will be at that persisted state.\n     * Actions from machine actors will not be re-executed, because they are assumed to have been already executed.\n     * However, invocations will be restarted, and spawned actors will be restored recursively.\n     *\n     * Can be generated with {@link Actor.getPersistedSnapshot}.\n     *\n     * @see https://stately.ai/docs/persistence\n     */\n    snapshot?: Snapshot<unknown>;\n    /**\n     * @deprecated Use `snapshot` instead.\n     */\n    state?: Snapshot<unknown>;\n    /**\n     * The source actor logic.\n     */\n    src?: string | AnyActorLogic;\n    /**\n     * A callback function or observer object which can be used to inspect actor system updates.\n     *\n     * @remarks\n     * If a callback function is provided, it can accept an inspection event argument. The types of inspection events that can be observed include:\n     *\n     * - `@xstate.actor` - An actor ref has been created in the system\n     * - `@xstate.event` - An event was sent from a source actor ref to a target actor ref in the system\n     * - `@xstate.snapshot` - An actor ref emitted a snapshot due to a received event\n     *\n     * @example\n     * ```ts\n     * import { createMachine } from 'xstate';\n     *\n     * const machine = createMachine({\n     *   // ...\n     * });\n     *\n     * const actor = createActor(machine, {\n     *   inspect: (inspectionEvent) => {\n     *     if (inspectionEvent.actorRef === actor) {\n     *       // This event is for the root actor\n     *     }\n     *\n     *     if (inspectionEvent.type === '@xstate.actor') {\n     *       console.log(inspectionEvent.actorRef);\n     *     }\n     *\n     *     if (inspectionEvent.type === '@xstate.event') {\n     *       console.log(inspectionEvent.sourceRef);\n     *       console.log(inspectionEvent.actorRef);\n     *       console.log(inspectionEvent.event);\n     *     }\n     *\n     *     if (inspectionEvent.type === '@xstate.snapshot') {\n     *       console.log(inspectionEvent.actorRef);\n     *       console.log(inspectionEvent.event);\n     *       console.log(inspectionEvent.snapshot);\n     *     }\n     *   }\n     * });\n     * ```\n     *\n     * Alternately, an observer object (`{ next?, error?, complete? }`) can be provided:\n     *\n     * @example\n     * ```ts\n     * const actor = createActor(machine, {\n     *   inspect: {\n     *     next: (inspectionEvent) => {\n     *       if (inspectionEvent.actorRef === actor) {\n     *         // This event is for the root actor\n     *       }\n     *\n     *       if (inspectionEvent.type === '@xstate.actor') {\n     *         console.log(inspectionEvent.actorRef);\n     *       }\n     *\n     *       if (inspectionEvent.type === '@xstate.event') {\n     *         console.log(inspectionEvent.sourceRef);\n     *         console.log(inspectionEvent.actorRef);\n     *         console.log(inspectionEvent.event);\n     *       }\n     *\n     *       if (inspectionEvent.type === '@xstate.snapshot') {\n     *         console.log(inspectionEvent.actorRef);\n     *         console.log(inspectionEvent.event);\n     *         console.log(inspectionEvent.snapshot);\n     *       }\n     *     }\n     *   }\n     * });\n     * ```\n     */\n    inspect?: Observer<InspectionEvent> | ((inspectionEvent: InspectionEvent) => void);\n}\nexport type AnyActor = Actor<any>;\n/**\n * @deprecated Use `AnyActor` instead.\n */\nexport type AnyInterpreter = AnyActor;\nexport type Observer<T> = {\n    next?: (value: T) => void;\n    error?: (err: unknown) => void;\n    complete?: () => void;\n};\nexport interface Subscription {\n    unsubscribe(): void;\n}\nexport interface InteropObservable<T> {\n    [Symbol.observable]: () => InteropSubscribable<T>;\n}\nexport interface InteropSubscribable<T> {\n    subscribe(observer: Observer<T>): Subscription;\n}\nexport interface Subscribable<T> extends InteropSubscribable<T> {\n    subscribe(observer: Observer<T>): Subscription;\n    subscribe(next: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n}\ntype EventDescriptorMatches<TEventType extends string, TNormalizedDescriptor> = TEventType extends TNormalizedDescriptor ? true : false;\nexport type ExtractEvent<TEvent extends EventObject, TDescriptor extends EventDescriptor<TEvent>> = string extends TEvent['type'] ? TEvent : NormalizeDescriptor<TDescriptor> extends infer TNormalizedDescriptor ? TEvent extends any ? true extends EventDescriptorMatches<TEvent['type'], TNormalizedDescriptor> ? TEvent : never : never : never;\nexport interface BaseActorRef<TEvent extends EventObject> {\n    send: (event: TEvent) => void;\n}\nexport interface ActorLike<TCurrent, TEvent extends EventObject> extends Subscribable<TCurrent> {\n    send: (event: TEvent) => void;\n}\nexport interface ActorRef<TSnapshot extends Snapshot<unknown>, TEvent extends EventObject, TEmitted extends EventObject = EventObject> extends Subscribable<TSnapshot>, InteropObservable<TSnapshot> {\n    /**\n     * The unique identifier for this actor relative to its parent.\n     */\n    id: string;\n    sessionId: string;\n    send: (event: TEvent) => void;\n    start: () => void;\n    getSnapshot: () => TSnapshot;\n    getPersistedSnapshot: () => Snapshot<unknown>;\n    stop: () => void;\n    toJSON?: () => any;\n    _parent?: AnyActorRef;\n    system: AnyActorSystem;\n    src: string | AnyActorLogic;\n    on: <TType extends TEmitted['type']>(type: TType, handler: (emitted: TEmitted & {\n        type: TType;\n    }) => void) => Subscription;\n}\nexport type AnyActorRef = ActorRef<any, any, any>;\nexport type ActorLogicFrom<T> = ReturnTypeOrValue<T> extends infer R ? R extends StateMachine<any, any, any, any, any, any, any, any, any, any, any, any, // TMeta\nany> ? R : R extends Promise<infer U> ? PromiseActorLogic<U> : never : never;\nexport type ActorRefFrom<T> = ReturnTypeOrValue<T> extends infer R ? R extends StateMachine<infer TContext, infer TEvent, infer TChildren, infer _TActor, infer _TAction, infer _TGuard, infer _TDelay, infer TStateValue, infer TTag, infer _TInput, infer TOutput, infer TEmitted, infer TMeta, infer _TResolvedTypesMeta> ? ActorRef<MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta>, TEvent, TEmitted> : R extends Promise<infer U> ? ActorRefFrom<PromiseActorLogic<U>> : R extends ActorLogic<infer TSnapshot, infer TEvent, infer _TInput, infer _TSystem, infer TEmitted> ? ActorRef<TSnapshot, TEvent, TEmitted> : never : never;\nexport type DevToolsAdapter = (service: AnyActor) => void;\n/**\n * @deprecated Use `Actor<T>` instead.\n */\nexport type InterpreterFrom<T extends AnyStateMachine | ((...args: any[]) => AnyStateMachine)> = ReturnTypeOrValue<T> extends StateMachine<infer TContext, infer TEvent, infer TChildren, infer _TActor, infer _TAction, infer _TGuard, infer _TDelay, infer TStateValue, infer TTag, infer TInput, infer TOutput, infer TEmitted, infer TMeta, infer _TResolvedTypesMeta> ? Actor<ActorLogic<MachineSnapshot<TContext, TEvent, TChildren, TStateValue, TTag, TOutput, TMeta>, TEvent, TInput, AnyActorSystem, TEmitted>> : never;\nexport type MachineImplementationsFrom<T extends AnyStateMachine | ((...args: any[]) => AnyStateMachine), TRequireMissingImplementations extends boolean = false> = ReturnTypeOrValue<T> extends StateMachine<infer TContext, infer _TEvent, infer _TChildren, infer _TActor, infer _TAction, infer _TGuard, infer _TDelay, infer _TStateValue, infer _TTag, infer _TInput, infer _TOutput, infer _TEmitted, infer _TMeta, infer TResolvedTypesMeta> ? InternalMachineImplementations<TContext, TResolvedTypesMeta, TRequireMissingImplementations> : never;\nexport type __ResolvedTypesMetaFrom<T> = T extends StateMachine<any, // context\nany, // event\nany, // children\nany, // actor\nany, // action\nany, // guard\nany, // delay\nany, // state value\nany, // tag\nany, // input\nany, // output\nany, // emitted\nany, // TMeta\ninfer TResolvedTypesMeta> ? TResolvedTypesMeta : never;\nexport interface ActorScope<TSnapshot extends Snapshot<unknown>, TEvent extends EventObject, TSystem extends AnyActorSystem = AnyActorSystem, TEmitted extends EventObject = EventObject> {\n    self: ActorRef<TSnapshot, TEvent, TEmitted>;\n    id: string;\n    sessionId: string;\n    logger: (...args: any[]) => void;\n    defer: (fn: () => void) => void;\n    emit: (event: TEmitted) => void;\n    system: TSystem;\n    stopChild: (child: AnyActorRef) => void;\n}\nexport type AnyActorScope = ActorScope<any, // TSnapshot\nany, // TEvent\nAnyActorSystem, any>;\nexport type Snapshot<TOutput> = {\n    status: 'active';\n    output: undefined;\n    error: undefined;\n} | {\n    status: 'done';\n    output: TOutput;\n    error: undefined;\n} | {\n    status: 'error';\n    output: undefined;\n    error: unknown;\n} | {\n    status: 'stopped';\n    output: undefined;\n    error: undefined;\n};\n/**\n * Represents logic which can be used by an actor.\n *\n * @template TSnapshot - The type of the snapshot.\n * @template TEvent - The type of the event object.\n * @template TInput - The type of the input.\n * @template TSystem - The type of the actor system.\n */\nexport interface ActorLogic<in out TSnapshot extends Snapshot<unknown>, // it's invariant because it's also part of `ActorScope[\"self\"][\"getSnapshot\"]`\nin out TEvent extends EventObject, // it's invariant because it's also part of `ActorScope[\"self\"][\"send\"]`\nin TInput = NonReducibleUnknown, TSystem extends AnyActorSystem = AnyActorSystem, in out TEmitted extends EventObject = EventObject> {\n    /** The initial setup/configuration used to create the actor logic. */\n    config?: unknown;\n    /**\n     * Transition function that processes the current state and an incoming message\n     * to produce a new state.\n     * @param snapshot - The current state.\n     * @param message - The incoming message.\n     * @param actorScope - The actor scope.\n     * @returns The new state.\n     */\n    transition: (snapshot: TSnapshot, message: TEvent, actorScope: ActorScope<TSnapshot, TEvent, TSystem, TEmitted>) => TSnapshot;\n    /**\n     * Called to provide the initial state of the actor.\n     * @param actorScope - The actor scope.\n     * @param input - The input for the initial state.\n     * @returns The initial state.\n     */\n    getInitialSnapshot: (actorScope: ActorScope<TSnapshot, TEvent, TSystem, TEmitted>, input: TInput) => TSnapshot;\n    /**\n     * Called when Actor is created to restore the internal state of the actor given a persisted state.\n     * The persisted state can be created by `getPersistedSnapshot`.\n     * @param persistedState - The persisted state to restore from.\n     * @param actorScope - The actor scope.\n     * @returns The restored state.\n     */\n    restoreSnapshot?: (persistedState: Snapshot<unknown>, actorScope: ActorScope<TSnapshot, TEvent, AnyActorSystem, TEmitted>) => TSnapshot;\n    /**\n     * Called when the actor is started.\n     * @param snapshot - The starting state.\n     * @param actorScope - The actor scope.\n     */\n    start?: (snapshot: TSnapshot, actorScope: ActorScope<TSnapshot, TEvent, AnyActorSystem, TEmitted>) => void;\n    /**\n     * Obtains the internal state of the actor in a representation which can be be persisted.\n     * The persisted state can be restored by `restoreSnapshot`.\n     * @param snapshot - The current state.\n     * @returns The a representation of the internal state to be persisted.\n     */\n    getPersistedSnapshot: (snapshot: TSnapshot, options?: unknown) => Snapshot<unknown>;\n}\nexport type AnyActorLogic = ActorLogic<any, // snapshot\nany, // event\nany, // input\nany, // system\nany>;\nexport type UnknownActorLogic = ActorLogic<any, // snapshot\nany, // event\nnever, // input\nAnyActorSystem, any>;\nexport type SnapshotFrom<T> = ReturnTypeOrValue<T> extends infer R ? R extends ActorRef<infer TSnapshot, infer _> ? TSnapshot : R extends Actor<infer TLogic> ? SnapshotFrom<TLogic> : R extends ActorLogic<infer _TSnapshot, infer _TEvent, infer _TInput, infer _TEmitted, infer _TSystem> ? ReturnType<R['transition']> : R extends ActorScope<infer TSnapshot, infer _TEvent, infer _TEmitted, infer _TSystem> ? TSnapshot : never : never;\nexport type EventFromLogic<TLogic extends AnyActorLogic> = TLogic extends ActorLogic<infer _TSnapshot, infer TEvent, infer _TInput, infer _TEmitted, infer _TSystem> ? TEvent : never;\nexport type EmittedFrom<TLogic extends AnyActorLogic> = TLogic extends ActorLogic<infer _TSnapshot, infer _TEvent, infer _TInput, infer _TSystem, infer TEmitted> ? TEmitted : never;\ntype ResolveEventType<T> = ReturnTypeOrValue<T> extends infer R ? R extends StateMachine<infer _TContext, infer TEvent, infer _TChildren, infer _TActor, infer _TAction, infer _TGuard, infer _TDelay, infer _TStateValue, infer _TTag, infer _TInput, infer _TOutput, infer _TEmitted, infer _TMeta, infer _TResolvedTypesMeta> ? TEvent : R extends MachineSnapshot<infer _TContext, infer TEvent, infer _TChildren, infer _TStateValue, infer _TTag, infer _TOutput, infer _TMeta> ? TEvent : R extends ActorRef<infer _, infer TEvent> ? TEvent : never : never;\nexport type EventFrom<T, K extends Prop<TEvent, 'type'> = never, TEvent extends EventObject = ResolveEventType<T>> = IsNever<K> extends true ? TEvent : ExtractEvent<TEvent, K>;\nexport type ContextFrom<T> = ReturnTypeOrValue<T> extends infer R ? R extends StateMachine<infer TContext, infer _TEvent, infer _TChildren, infer _TActor, infer _TAction, infer _TGuard, infer _TDelay, infer _TStateValue, infer _TTag, infer _TInput, infer _TOutput, infer _TEmitted, infer _TMeta, infer _TResolvedTypesMeta> ? TContext : R extends MachineSnapshot<infer TContext, infer _TEvent, infer _TChildren, infer _TStateValue, infer _TTag, infer _TOutput, infer _TMeta> ? TContext : R extends Actor<infer TActorLogic> ? TActorLogic extends StateMachine<infer TContext, infer _TEvent, infer _TChildren, infer _TActor, infer _TAction, infer _TGuard, infer _TDelay, infer _TTag, infer _TInput, infer _TOutput, infer _TEmitted, infer _TMeta, infer _TResolvedTypesMeta> ? TContext : never : never : never;\nexport type InferEvent<E extends EventObject> = {\n    [T in E['type']]: {\n        type: T;\n    } & Extract<E, {\n        type: T;\n    }>;\n}[E['type']];\nexport type TODO = any;\nexport type StateValueFrom<TMachine extends AnyStateMachine> = Parameters<StateFrom<TMachine>['matches']>[0];\nexport type TagsFrom<TMachine extends AnyStateMachine> = Parameters<StateFrom<TMachine>['hasTag']>[0];\nexport interface ActorSystemInfo {\n    actors: Record<string, AnyActorRef>;\n}\nexport type RequiredActorOptions<TActor extends ProvidedActor> = (undefined extends TActor['id'] ? never : 'id') | (undefined extends InputFrom<TActor['logic']> ? never : 'input');\ntype ExtractLiteralString<T extends string | undefined> = T extends string ? string extends T ? never : T : never;\ntype ToConcreteChildren<TActor extends ProvidedActor> = {\n    [A in TActor as ExtractLiteralString<A['id']>]?: ActorRefFrom<A['logic']>;\n};\nexport type ToChildren<TActor extends ProvidedActor> = string extends TActor['src'] ? Record<string, AnyActorRef> : Compute<ToConcreteChildren<TActor> & {\n    include: {\n        [id: string]: TActor extends any ? ActorRefFrom<TActor['logic']> | undefined : never;\n    };\n    exclude: {};\n}[undefined extends TActor['id'] ? 'include' : string extends TActor['id'] ? 'include' : 'exclude']>;\nexport type StateSchema = {\n    states?: Record<string, StateSchema>;\n};\nexport {};\n","/node_modules/@xstate/react/dist/declarations/src/useSelector.d.ts":"import { AnyActorRef } from 'xstate';\nexport declare function useSelector<TActor extends Pick<AnyActorRef, 'subscribe' | 'getSnapshot'> | undefined, T>(actor: TActor, selector: (snapshot: TActor extends {\n    getSnapshot(): infer TSnapshot;\n} ? TSnapshot : undefined) => T, compare?: (a: T, b: T) => boolean): T;\n","/node_modules/@xstate/react/dist/declarations/src/useMachine.d.ts":"import { Actor, ActorOptions, AnyStateMachine, StateFrom } from 'xstate';\n/**\n * @alias useActor\n */\nexport declare function useMachine<TMachine extends AnyStateMachine>(machine: TMachine, options?: ActorOptions<TMachine>): [StateFrom<TMachine>, Actor<TMachine>['send'], Actor<TMachine>];\n","/node_modules/csstype/index.d.ts":"export {};\n\nexport type PropertyValue<TValue> = TValue extends Array<infer AValue>\n  ? Array<AValue extends infer TUnpacked & {} ? TUnpacked : AValue>\n  : TValue extends infer TUnpacked & {}\n  ? TUnpacked\n  : TValue;\n\nexport type Fallback<T> = { [P in keyof T]: T[P] | readonly NonNullable<T[P]>[] };\n\nexport interface StandardLonghandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`accent-color`** CSS property sets the accent color for user-interface controls generated by some elements.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **93** | **92**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/accent-color\n   */\n  accentColor?: Property.AccentColor | undefined;\n  /**\n   * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-content\n   */\n  alignContent?: Property.AlignContent | undefined;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-items\n   */\n  alignItems?: Property.AlignItems | undefined;\n  /**\n   * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-self\n   */\n  alignSelf?: Property.AlignSelf | undefined;\n  /**\n   * The **`align-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their block axis.\n   *\n   * **Syntax**: `[ normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-tracks\n   */\n  alignTracks?: Property.AlignTracks | undefined;\n  /**\n   * The **`animation-composition`** CSS property specifies the composite operation to use when multiple animations affect the same property simultaneously.\n   *\n   * **Syntax**: `<single-animation-composition>#`\n   *\n   * **Initial value**: `replace`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **112** | **115** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-composition\n   */\n  animationComposition?: Property.AnimationComposition | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-delay\n   */\n  animationDelay?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-direction\n   */\n  animationDirection?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-duration\n   */\n  animationDuration?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 5 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode\n   */\n  animationFillMode?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count\n   */\n  animationIterationCount?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-name\n   */\n  animationName?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-play-state\n   */\n  animationPlayState?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-range-end`** CSS property is used to set the end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will end.\n   *\n   * **Syntax**: `[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range-end\n   */\n  animationRangeEnd?: Property.AnimationRangeEnd<TLength> | undefined;\n  /**\n   * The **`animation-range-start`** CSS property is used to set the start of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start.\n   *\n   * **Syntax**: `[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range-start\n   */\n  animationRangeStart?: Property.AnimationRangeStart<TLength> | undefined;\n  /**\n   * The **`animation-timeline`** CSS property specifies the timeline that is used to control the progress of an animation.\n   *\n   * **Syntax**: `<single-animation-timeline>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timeline\n   */\n  animationTimeline?: Property.AnimationTimeline | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timing-function\n   */\n  animationTimingFunction?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | auto | textfield | menulist-button | <compat-auto>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  |   Edge   | IE  |\n   * | :-----: | :-----: | :------: | :------: | :-: |\n   * | **84**  | **80**  | **15.4** |  **84**  | No  |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_  | 12 _-x-_ |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/appearance\n   */\n  appearance?: Property.Appearance | undefined;\n  /**\n   * The **`aspect-ratio`** CSS property sets a **preferred aspect ratio** for the box, which will be used in the calculation of auto sizes and some other layout functions.\n   *\n   * **Syntax**: `auto | <ratio>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **88** | **89**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/aspect-ratio\n   */\n  aspectRatio?: Property.AspectRatio | undefined;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari    |  Edge  | IE  |\n   * | :----: | :-----: | :---------: | :----: | :-: |\n   * | **76** | **103** | **9** _-x-_ | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backdrop-filter\n   */\n  backdropFilter?: Property.BackdropFilter | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **36**  | **16**  | **15.4**  | **12** | **10** |\n   * | 12 _-x-_ |         | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backface-visibility\n   */\n  backfaceVisibility?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-attachment`** CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-attachment\n   */\n  backgroundAttachment?: Property.BackgroundAttachment | undefined;\n  /**\n   * The **`background-blend-mode`** CSS property sets how an element's background images should blend with each other and with the element's background color.\n   *\n   * **Syntax**: `<blend-mode>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **35** | **30**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-blend-mode\n   */\n  backgroundBlendMode?: Property.BackgroundBlendMode | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **4**  |  **5**  | **12** | **9** |\n   * |        |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-clip\n   */\n  backgroundClip?: Property.BackgroundClip | undefined;\n  /**\n   * The **`background-color`** CSS property sets the background color of an element.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `transparent`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-color\n   */\n  backgroundColor?: Property.BackgroundColor | undefined;\n  /**\n   * The **`background-image`** CSS property sets one or more background images on an element.\n   *\n   * **Syntax**: `<bg-image>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-image\n   */\n  backgroundImage?: Property.BackgroundImage | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **4**  | **3**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-origin\n   */\n  backgroundOrigin?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-position-x`** CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-x\n   */\n  backgroundPositionX?: Property.BackgroundPositionX<TLength> | undefined;\n  /**\n   * The **`background-position-y`** CSS property sets the initial vertical position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-y\n   */\n  backgroundPositionY?: Property.BackgroundPositionY<TLength> | undefined;\n  /**\n   * The **`background-repeat`** CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-repeat\n   */\n  backgroundRepeat?: Property.BackgroundRepeat | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **3**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-size\n   */\n  backgroundSize?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * **Syntax**: `clip | ellipsis | <string>`\n   *\n   * **Initial value**: `clip`\n   */\n  blockOverflow?: Property.BlockOverflow | undefined;\n  /**\n   * The **`block-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/block-size\n   */\n  blockSize?: Property.BlockSize<TLength> | undefined;\n  /**\n   * The **`border-block-color`** CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-color\n   */\n  borderBlockColor?: Property.BorderBlockColor | undefined;\n  /**\n   * The **`border-block-end-color`** CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-color\n   */\n  borderBlockEndColor?: Property.BorderBlockEndColor | undefined;\n  /**\n   * The **`border-block-end-style`** CSS property defines the style of the logical block-end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-style\n   */\n  borderBlockEndStyle?: Property.BorderBlockEndStyle | undefined;\n  /**\n   * The **`border-block-end-width`** CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-width\n   */\n  borderBlockEndWidth?: Property.BorderBlockEndWidth<TLength> | undefined;\n  /**\n   * The **`border-block-start-color`** CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-color\n   */\n  borderBlockStartColor?: Property.BorderBlockStartColor | undefined;\n  /**\n   * The **`border-block-start-style`** CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-style\n   */\n  borderBlockStartStyle?: Property.BorderBlockStartStyle | undefined;\n  /**\n   * The **`border-block-start-width`** CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-width\n   */\n  borderBlockStartWidth?: Property.BorderBlockStartWidth<TLength> | undefined;\n  /**\n   * The **`border-block-style`** CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-style\n   */\n  borderBlockStyle?: Property.BorderBlockStyle | undefined;\n  /**\n   * The **`border-block-width`** CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-width\n   */\n  borderBlockWidth?: Property.BorderBlockWidth<TLength> | undefined;\n  /**\n   * The **`border-bottom-color`** CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties `border-color` or `border-bottom`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-color\n   */\n  borderBottomColor?: Property.BorderBottomColor | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius\n   */\n  borderBottomLeftRadius?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius\n   */\n  borderBottomRightRadius?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-style`** CSS property sets the line style of an element's bottom `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-style\n   */\n  borderBottomStyle?: Property.BorderBottomStyle | undefined;\n  /**\n   * The **`border-bottom-width`** CSS property sets the width of the bottom border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-width\n   */\n  borderBottomWidth?: Property.BorderBottomWidth<TLength> | undefined;\n  /**\n   * The **`border-collapse`** CSS property sets whether cells inside a `<table>` have shared or separate borders.\n   *\n   * **Syntax**: `collapse | separate`\n   *\n   * **Initial value**: `separate`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-collapse\n   */\n  borderCollapse?: Property.BorderCollapse | undefined;\n  /**\n   * The **`border-end-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius\n   */\n  borderEndEndRadius?: Property.BorderEndEndRadius<TLength> | undefined;\n  /**\n   * The **`border-end-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius\n   */\n  borderEndStartRadius?: Property.BorderEndStartRadius<TLength> | undefined;\n  /**\n   * The **`border-image-outset`** CSS property sets the distance by which an element's border image is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-outset\n   */\n  borderImageOutset?: Property.BorderImageOutset<TLength> | undefined;\n  /**\n   * The **`border-image-repeat`** CSS property defines how the edge regions and middle region of a source image are adjusted to fit the dimensions of an element's border image. The middle region can be displayed by using the keyword \"fill\" in the border-image-slice property.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-repeat\n   */\n  borderImageRepeat?: Property.BorderImageRepeat | undefined;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-slice\n   */\n  borderImageSlice?: Property.BorderImageSlice | undefined;\n  /**\n   * The **`border-image-source`** CSS property sets the source image used to create an element's border image.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-source\n   */\n  borderImageSource?: Property.BorderImageSource | undefined;\n  /**\n   * The **`border-image-width`** CSS property sets the width of an element's border image.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **13**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-width\n   */\n  borderImageWidth?: Property.BorderImageWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-color`** CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-color\n   */\n  borderInlineColor?: Property.BorderInlineColor | undefined;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-color)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color\n   */\n  borderInlineEndColor?: Property.BorderInlineEndColor | undefined;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-style)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style\n   */\n  borderInlineEndStyle?: Property.BorderInlineEndStyle | undefined;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-width)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width\n   */\n  borderInlineEndWidth?: Property.BorderInlineEndWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |            Firefox            |  Safari  | Edge | IE  |\n   * | :----: | :---------------------------: | :------: | :--: | :-: |\n   * | **69** |            **41**             | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-start-color)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color\n   */\n  borderInlineStartColor?: Property.BorderInlineStartColor | undefined;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |            Firefox            |  Safari  | Edge | IE  |\n   * | :----: | :---------------------------: | :------: | :--: | :-: |\n   * | **69** |            **41**             | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-start-style)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style\n   */\n  borderInlineStartStyle?: Property.BorderInlineStartStyle | undefined;\n  /**\n   * The **`border-inline-start-width`** CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width\n   */\n  borderInlineStartWidth?: Property.BorderInlineStartWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-style`** CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-style\n   */\n  borderInlineStyle?: Property.BorderInlineStyle | undefined;\n  /**\n   * The **`border-inline-width`** CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-width\n   */\n  borderInlineWidth?: Property.BorderInlineWidth<TLength> | undefined;\n  /**\n   * The **`border-left-color`** CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties `border-color` or `border-left`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-color\n   */\n  borderLeftColor?: Property.BorderLeftColor | undefined;\n  /**\n   * The **`border-left-style`** CSS property sets the line style of an element's left `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-style\n   */\n  borderLeftStyle?: Property.BorderLeftStyle | undefined;\n  /**\n   * The **`border-left-width`** CSS property sets the width of the left border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-width\n   */\n  borderLeftWidth?: Property.BorderLeftWidth<TLength> | undefined;\n  /**\n   * The **`border-right-color`** CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties `border-color` or `border-right`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-color\n   */\n  borderRightColor?: Property.BorderRightColor | undefined;\n  /**\n   * The **`border-right-style`** CSS property sets the line style of an element's right `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-style\n   */\n  borderRightStyle?: Property.BorderRightStyle | undefined;\n  /**\n   * The **`border-right-width`** CSS property sets the width of the right border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-width\n   */\n  borderRightWidth?: Property.BorderRightWidth<TLength> | undefined;\n  /**\n   * The **`border-spacing`** CSS property sets the distance between the borders of adjacent cells in a `<table>`. This property applies only when `border-collapse` is `separate`.\n   *\n   * **Syntax**: `<length> <length>?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-spacing\n   */\n  borderSpacing?: Property.BorderSpacing<TLength> | undefined;\n  /**\n   * The **`border-start-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius\n   */\n  borderStartEndRadius?: Property.BorderStartEndRadius<TLength> | undefined;\n  /**\n   * The **`border-start-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius\n   */\n  borderStartStartRadius?: Property.BorderStartStartRadius<TLength> | undefined;\n  /**\n   * The **`border-top-color`** CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties `border-color` or `border-top`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-color\n   */\n  borderTopColor?: Property.BorderTopColor | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius\n   */\n  borderTopLeftRadius?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius\n   */\n  borderTopRightRadius?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`border-top-style`** CSS property sets the line style of an element's top `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-style\n   */\n  borderTopStyle?: Property.BorderTopStyle | undefined;\n  /**\n   * The **`border-top-width`** CSS property sets the width of the top border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-width\n   */\n  borderTopWidth?: Property.BorderTopWidth<TLength> | undefined;\n  /**\n   * The **`bottom`** CSS property participates in setting the vertical position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/bottom\n   */\n  bottom?: Property.Bottom<TLength> | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * |    Chrome    | Firefox |   Safari    | Edge | IE  |\n   * | :----------: | :-----: | :---------: | :--: | :-: |\n   * | **22** _-x-_ | **32**  | **7** _-x-_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-decoration-break\n   */\n  boxDecorationBreak?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  |  **4**  | **5.1** | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-shadow\n   */\n  boxShadow?: Property.BoxShadow | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  | **29**  | **5.1** | **12** | **8** |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-sizing\n   */\n  boxSizing?: Property.BoxSizing | undefined;\n  /**\n   * The **`break-after`** CSS property sets how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-after\n   */\n  breakAfter?: Property.BreakAfter | undefined;\n  /**\n   * The **`break-before`** CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-before\n   */\n  breakBefore?: Property.BreakBefore | undefined;\n  /**\n   * The **`break-inside`** CSS property sets how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | avoid-page | avoid-column | avoid-region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-inside\n   */\n  breakInside?: Property.BreakInside | undefined;\n  /**\n   * The **`caption-side`** CSS property puts the content of a table's `<caption>` on the specified side. The values are relative to the `writing-mode` of the table.\n   *\n   * **Syntax**: `top | bottom | block-start | block-end | inline-start | inline-end`\n   *\n   * **Initial value**: `top`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caption-side\n   */\n  captionSide?: Property.CaptionSide | undefined;\n  /**\n   * The **`caret-color`** CSS property sets the color of the **insertion caret**, the visible marker where the next character typed will be inserted. This is sometimes referred to as the **text input cursor**. The caret appears in elements such as `<input>` or those with the `contenteditable` attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **53**  | **11.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caret-color\n   */\n  caretColor?: Property.CaretColor | undefined;\n  /**\n   * **Syntax**: `auto | bar | block | underscore`\n   *\n   * **Initial value**: `auto`\n   */\n  caretShape?: Property.CaretShape | undefined;\n  /**\n   * The **`clear`** CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The `clear` property applies to floating and non-floating elements.\n   *\n   * **Syntax**: `none | left | right | both | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clear\n   */\n  clear?: Property.Clear | undefined;\n  /**\n   * The **`clip-path`** CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **55**  | **3.5** | **9.1** | **79** | **10** |\n   * | 23 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clip-path\n   */\n  clipPath?: Property.ClipPath | undefined;\n  /**\n   * The **`color`** CSS property sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value. `currentcolor` may be used as an indirect value on _other_ properties and is the default for other color properties, such as `border-color`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `canvastext`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color\n   */\n  color?: Property.Color | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |    Chrome    |       Firefox       |  Safari  |     Edge     | IE  |\n   * | :----------: | :-----------------: | :------: | :----------: | :-: |\n   * | **17** _-x-_ |       **97**        | **15.4** | **79** _-x-_ | No  |\n   * |              | 48 _(color-adjust)_ | 6 _-x-_  |              |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/print-color-adjust\n   */\n  colorAdjust?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`color-scheme`** CSS property allows an element to indicate which color schemes it can comfortably be rendered in.\n   *\n   * **Syntax**: `normal | [ light | dark | <custom-ident> ]+ && only?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **81** | **96**  | **13** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color-scheme\n   */\n  colorScheme?: Property.ColorScheme | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-count\n   */\n  columnCount?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-fill\n   */\n  columnFill?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **3**  | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-gap\n   */\n  columnGap?: Property.ColumnGap<TLength> | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-color\n   */\n  columnRuleColor?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-style\n   */\n  columnRuleStyle?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-width\n   */\n  columnRuleWidth?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **50**  | **71**  |   **9**   | **12** | **10** |\n   * | 6 _-x-_ |         | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-span\n   */\n  columnSpan?: Property.ColumnSpan | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **50**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-width\n   */\n  columnWidth?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`contain`** CSS property indicates that an element and its contents are, as much as possible, independent from the rest of the document tree. Containment enables isolating a subsection of the DOM, providing performance benefits by limiting calculations of layout, style, paint, size, or any combination to a DOM subtree rather than the entire page. Containment can also be used to scope CSS counters and quotes.\n   *\n   * **Syntax**: `none | strict | content | [ [ size || inline-size ] || layout || style || paint ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **52** | **69**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain\n   */\n  contain?: Property.Contain | undefined;\n  /**\n   * The **`contain-intrinsic-block-size`** CSS logical property defines the block size of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-block-size\n   */\n  containIntrinsicBlockSize?: Property.ContainIntrinsicBlockSize<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-length`** CSS property sets the height of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height\n   */\n  containIntrinsicHeight?: Property.ContainIntrinsicHeight<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-inline-size`** CSS logical property defines the inline-size of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-inline-size\n   */\n  containIntrinsicInlineSize?: Property.ContainIntrinsicInlineSize<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-width`** CSS property sets the width of an element that a browser will use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width\n   */\n  containIntrinsicWidth?: Property.ContainIntrinsicWidth<TLength> | undefined;\n  /**\n   * The **container-name** CSS property specifies a list of query container names used by the @container at-rule in a container query. A container query will apply styles to elements based on the size of the nearest ancestor with a containment context. When a containment context is given a name, it can be specifically targeted using the `@container` at-rule instead of the nearest ancestor with containment.\n   *\n   * **Syntax**: `none | <custom-ident>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container-name\n   */\n  containerName?: Property.ContainerName | undefined;\n  /**\n   * The **container-type** CSS property is used to define the type of containment used in a container query.\n   *\n   * **Syntax**: `normal | size | inline-size`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container-type\n   */\n  containerType?: Property.ContainerType | undefined;\n  /**\n   * The **`content`** CSS property replaces an element with a generated value. Objects inserted using the `content` property are **anonymous replaced elements**.\n   *\n   * **Syntax**: `normal | none | [ <content-replacement> | <content-list> ] [/ [ <string> | <counter> ]+ ]?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content\n   */\n  content?: Property.Content | undefined;\n  /**\n   * The **`content-visibility`** CSS property controls whether or not an element renders its contents at all, along with forcing a strong set of containments, allowing user agents to potentially omit large swathes of layout and rendering work until it becomes needed. It enables the user agent to skip an element's rendering work (including layout and painting) until it is needed — which makes the initial page load much faster.\n   *\n   * **Syntax**: `visible | auto | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome |   Firefox   | Safari | Edge | IE  |\n   * | :----: | :---------: | :----: | :--: | :-: |\n   * | **85** | **preview** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content-visibility\n   */\n  contentVisibility?: Property.ContentVisibility | undefined;\n  /**\n   * The **`counter-increment`** CSS property increases or decreases the value of a CSS counter by a given value.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-increment\n   */\n  counterIncrement?: Property.CounterIncrement | undefined;\n  /**\n   * The **`counter-reset`** CSS property resets a CSS counter to a given value. This property will create a new counter or reversed counter with the given name on the specified element.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? | <reversed-counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-reset\n   */\n  counterReset?: Property.CounterReset | undefined;\n  /**\n   * The **`counter-set`** CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **85** | **68**  | **17.2** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-set\n   */\n  counterSet?: Property.CounterSet | undefined;\n  /**\n   * The **`cursor`** CSS property sets the mouse cursor, if any, to show when the mouse pointer is over an element.\n   *\n   * **Syntax**: `[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/cursor\n   */\n  cursor?: Property.Cursor | undefined;\n  /**\n   * The **`direction`** CSS property sets the direction of text, table columns, and horizontal overflow. Use `rtl` for languages written from right to left (like Hebrew or Arabic), and `ltr` for those written from left to right (like English and most other languages).\n   *\n   * **Syntax**: `ltr | rtl`\n   *\n   * **Initial value**: `ltr`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/direction\n   */\n  direction?: Property.Direction | undefined;\n  /**\n   * The **`display`** CSS property sets whether an element is treated as a block or inline element and the layout used for its children, such as flow layout, grid or flex.\n   *\n   * **Syntax**: `[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>`\n   *\n   * **Initial value**: `inline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/display\n   */\n  display?: Property.Display | undefined;\n  /**\n   * The **`empty-cells`** CSS property sets whether borders and backgrounds appear around `<table>` cells that have no visible content.\n   *\n   * **Syntax**: `show | hide`\n   *\n   * **Initial value**: `show`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/empty-cells\n   */\n  emptyCells?: Property.EmptyCells | undefined;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **53**  | **35**  | **9.1** | **12** | No  |\n   * | 18 _-x-_ |         | 6 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/filter\n   */\n  filter?: Property.Filter | undefined;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **22**  |  **9**  | **12** | **11** |\n   * | 22 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-basis\n   */\n  flexBasis?: Property.FlexBasis<TLength> | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |    IE    |\n   * | :------: | :------: | :-----: | :----: | :------: |\n   * |  **29**  |  **81**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ | 49 _-x-_ | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-direction\n   */\n  flexDirection?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |            IE            |\n   * | :------: | :-----: | :-----: | :----: | :----------------------: |\n   * |  **29**  | **20**  |  **9**  | **12** |          **11**          |\n   * | 22 _-x-_ |         | 7 _-x-_ |        | 10 _(-ms-flex-positive)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-grow\n   */\n  flexGrow?: Property.FlexGrow | undefined;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 22 _-x-_ |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-shrink\n   */\n  flexShrink?: Property.FlexShrink | undefined;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-wrap\n   */\n  flexWrap?: Property.FlexWrap | undefined;\n  /**\n   * The **`float`** CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning).\n   *\n   * **Syntax**: `left | right | none | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/float\n   */\n  float?: Property.Float | undefined;\n  /**\n   * The **`font-family`** CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element.\n   *\n   * **Syntax**: `[ <family-name> | <generic-family> ]#`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-family\n   */\n  fontFamily?: Property.FontFamily | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **48**  |  **34**  | **9.1** | **15** | **10** |\n   * | 16 _-x-_ | 15 _-x-_ |         |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-feature-settings\n   */\n  fontFeatureSettings?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **33** | **32**  |  **9**  | n/a  | No  |\n   * |        |         | 6 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-kerning\n   */\n  fontKerning?: Property.FontKerning | undefined;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  |   No   | n/a  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-language-override\n   */\n  fontLanguageOverride?: Property.FontLanguageOverride | undefined;\n  /**\n   * The **`font-optical-sizing`** CSS property sets whether text rendering is optimized for viewing at different sizes.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing\n   */\n  fontOpticalSizing?: Property.FontOpticalSizing | undefined;\n  /**\n   * **Syntax**: `normal | light | dark | <palette-identifier>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **101** | **107** | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-palette\n   */\n  fontPalette?: Property.FontPalette | undefined;\n  /**\n   * The **`font-size`** CSS property sets the size of the font. Changing the font size also updates the sizes of the font size-relative `<length>` units, such as `em`, `ex`, and so forth.\n   *\n   * **Syntax**: `<absolute-size> | <relative-size> | <length-percentage>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size\n   */\n  fontSize?: Property.FontSize<TLength> | undefined;\n  /**\n   * The **`font-size-adjust`** CSS property sets the size of lower-case letters relative to the current font size (which defines the size of upper-case letters).\n   *\n   * **Syntax**: `none | [ ex-height | cap-height | ch-width | ic-width | ic-height ]? [ from-font | <number> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   |  **3**  | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size-adjust\n   */\n  fontSizeAdjust?: Property.FontSizeAdjust | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |              Chrome              |              Firefox               |              Safari              | Edge | IE  |\n   * | :------------------------------: | :--------------------------------: | :------------------------------: | :--: | :-: |\n   * | **5** _(-webkit-font-smoothing)_ | **25** _(-moz-osx-font-smoothing)_ | **4** _(-webkit-font-smoothing)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-smooth\n   */\n  fontSmooth?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * The **`font-stretch`** CSS property selects a normal, condensed, or expanded face from a font.\n   *\n   * **Syntax**: `<font-stretch-absolute>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **60** |  **9**  | **11** | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-stretch\n   */\n  fontStretch?: Property.FontStretch | undefined;\n  /**\n   * The **`font-style`** CSS property sets whether a font should be styled with a normal, italic, or oblique face from its `font-family`.\n   *\n   * **Syntax**: `normal | italic | oblique <angle>?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-style\n   */\n  fontStyle?: Property.FontStyle | undefined;\n  /**\n   * The **`font-synthesis`** CSS property controls which missing typefaces, bold, italic, or small-caps, may be synthesized by the browser.\n   *\n   * **Syntax**: `none | [ weight || style || small-caps || position]`\n   *\n   * **Initial value**: `weight style small-caps position `\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **97** | **34**  | **9**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis\n   */\n  fontSynthesis?: Property.FontSynthesis | undefined;\n  /**\n   * The **`font-synthesis-position`** CSS property lets you specify whether or not a browser may synthesize the subscript and superscript \"position\" typefaces when they are missing in a font family, while using `font-variant-position` to set the positions.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **118** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-position\n   */\n  fontSynthesisPosition?: Property.FontSynthesisPosition | undefined;\n  /**\n   * The **`font-synthesis-small-caps`** CSS property lets you specify whether or not the browser may synthesize small-caps typeface when it is missing in a font family. Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **97** | **111** | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-small-caps\n   */\n  fontSynthesisSmallCaps?: Property.FontSynthesisSmallCaps | undefined;\n  /**\n   * The **`font-synthesis-style`** CSS property lets you specify whether or not the browser may synthesize the oblique typeface when it is missing in a font family.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **97** | **111** | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-style\n   */\n  fontSynthesisStyle?: Property.FontSynthesisStyle | undefined;\n  /**\n   * The **`font-synthesis-weight`** CSS property lets you specify whether or not the browser may synthesize the bold typeface when it is missing in a font family.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **97** | **111** | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-weight\n   */\n  fontSynthesisWeight?: Property.FontSynthesisWeight | undefined;\n  /**\n   * The **`font-variant`** CSS shorthand property allows you to set all the font variants for a font.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant\n   */\n  fontVariant?: Property.FontVariant | undefined;\n  /**\n   * The **`font-variant-alternates`** CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in `@font-feature-values`.\n   *\n   * **Syntax**: `normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :-----: | :-----: | :-----: | :--: | :-: |\n   * | **111** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates\n   */\n  fontVariantAlternates?: Property.FontVariantAlternates | undefined;\n  /**\n   * The **`font-variant-caps`** CSS property controls the use of alternate glyphs for capital letters.\n   *\n   * **Syntax**: `normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **52** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-caps\n   */\n  fontVariantCaps?: Property.FontVariantCaps | undefined;\n  /**\n   * The **`font-variant-east-asian`** CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese.\n   *\n   * **Syntax**: `normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **63** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian\n   */\n  fontVariantEastAsian?: Property.FontVariantEastAsian | undefined;\n  /**\n   * **Syntax**: `normal | text | emoji | unicode`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-emoji\n   */\n  fontVariantEmoji?: Property.FontVariantEmoji | undefined;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :------: | :-----: | :-----: | :--: | :-: |\n   * |  **34**  | **34**  | **9.1** | n/a  | No  |\n   * | 31 _-x-_ |         | 7 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures\n   */\n  fontVariantLigatures?: Property.FontVariantLigatures | undefined;\n  /**\n   * The **`font-variant-numeric`** CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.\n   *\n   * **Syntax**: `normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **52** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric\n   */\n  fontVariantNumeric?: Property.FontVariantNumeric | undefined;\n  /**\n   * The **`font-variant-position`** CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript.\n   *\n   * **Syntax**: `normal | sub | super`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :-----: | :-----: | :-----: | :--: | :-: |\n   * | **117** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-position\n   */\n  fontVariantPosition?: Property.FontVariantPosition | undefined;\n  /**\n   * The **`font-variation-settings`** CSS property provides low-level control over variable font characteristics, by specifying the four letter axis names of the characteristics you want to vary, along with their values.\n   *\n   * **Syntax**: `normal | [ <string> <number> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **62** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variation-settings\n   */\n  fontVariationSettings?: Property.FontVariationSettings | undefined;\n  /**\n   * The **`font-weight`** CSS property sets the weight (or boldness) of the font. The weights available depend on the `font-family` that is currently set.\n   *\n   * **Syntax**: `<font-weight-absolute> | bolder | lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-weight\n   */\n  fontWeight?: Property.FontWeight | undefined;\n  /**\n   * The **`forced-color-adjust`** CSS property allows authors to opt certain elements out of forced colors mode. This then restores the control of those values to CSS.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |              Edge               |                 IE                  |\n   * | :----: | :-----: | :----: | :-----------------------------: | :---------------------------------: |\n   * | **89** | **113** |   No   |             **79**              | **10** _(-ms-high-contrast-adjust)_ |\n   * |        |         |        | 12 _(-ms-high-contrast-adjust)_ |                                     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust\n   */\n  forcedColorAdjust?: Property.ForcedColorAdjust | undefined;\n  /**\n   * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track or pattern of tracks.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |             IE              |\n   * | :----: | :-----: | :------: | :----: | :-------------------------: |\n   * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns\n   */\n  gridAutoColumns?: Property.GridAutoColumns<TLength> | undefined;\n  /**\n   * The **`grid-auto-flow`** CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.\n   *\n   * **Syntax**: `[ row | column ] || dense`\n   *\n   * **Initial value**: `row`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow\n   */\n  gridAutoFlow?: Property.GridAutoFlow | undefined;\n  /**\n   * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track or pattern of tracks.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |            IE            |\n   * | :----: | :-----: | :------: | :----: | :----------------------: |\n   * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows\n   */\n  gridAutoRows?: Property.GridAutoRows<TLength> | undefined;\n  /**\n   * The **`grid-column-end`** CSS property specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-end\n   */\n  gridColumnEnd?: Property.GridColumnEnd | undefined;\n  /**\n   * The **`grid-column-start`** CSS property specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-start\n   */\n  gridColumnStart?: Property.GridColumnStart | undefined;\n  /**\n   * The **`grid-row-end`** CSS property specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-end\n   */\n  gridRowEnd?: Property.GridRowEnd | undefined;\n  /**\n   * The **`grid-row-start`** CSS property specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-start\n   */\n  gridRowStart?: Property.GridRowStart | undefined;\n  /**\n   * The **`grid-template-areas`** CSS property specifies named grid areas, establishing the cells in the grid and assigning them names.\n   *\n   * **Syntax**: `none | <string>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-areas\n   */\n  gridTemplateAreas?: Property.GridTemplateAreas | undefined;\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |             IE              |\n   * | :----: | :-----: | :------: | :----: | :-------------------------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-columns\n   */\n  gridTemplateColumns?: Property.GridTemplateColumns<TLength> | undefined;\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |            IE            |\n   * | :----: | :-----: | :------: | :----: | :----------------------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-rows\n   */\n  gridTemplateRows?: Property.GridTemplateRows<TLength> | undefined;\n  /**\n   * The **`hanging-punctuation`** CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.\n   *\n   * **Syntax**: `none | [ first || [ force-end | allow-end ] || last ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    | **10** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation\n   */\n  hangingPunctuation?: Property.HangingPunctuation | undefined;\n  /**\n   * The **`height`** CSS property specifies the height of an element. By default, the property defines the height of the content area. If `box-sizing` is set to `border-box`, however, it instead determines the height of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/height\n   */\n  height?: Property.Height<TLength> | undefined;\n  /**\n   * The **`hyphenate-character`** CSS property sets the character (or string) used at the end of a line before a hyphenation break.\n   *\n   * **Syntax**: `auto | <string>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |  Safari   | Edge | IE  |\n   * | :-----: | :-----: | :-------: | :--: | :-: |\n   * | **106** | **98**  |  **17**   | n/a  | No  |\n   * | 6 _-x-_ |         | 5.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphenate-character\n   */\n  hyphenateCharacter?: Property.HyphenateCharacter | undefined;\n  /**\n   * The **`hyphenate-limit-chars`** CSS property specifies the minimum word length to allow hyphenation of words as well as the the minimum number of characters before and after the hyphen.\n   *\n   * **Syntax**: `[ auto | <integer> ]{1,3}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** |   No    |   No   | n/a  | No  |\n   */\n  hyphenateLimitChars?: Property.HyphenateLimitChars | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |      IE      |\n   * | :------: | :-----: | :-------: | :----: | :----------: |\n   * |  **55**  | **43**  |  **17**   | **79** | **10** _-x-_ |\n   * | 13 _-x-_ | 6 _-x-_ | 5.1 _-x-_ |        |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphens\n   */\n  hyphens?: Property.Hyphens | undefined;\n  /**\n   * The **`image-orientation`** CSS property specifies a layout-independent correction to the orientation of an image.\n   *\n   * **Syntax**: `from-image | <angle> | [ <angle>? flip ]`\n   *\n   * **Initial value**: `from-image`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **81** | **26**  | **13.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-orientation\n   */\n  imageOrientation?: Property.ImageOrientation | undefined;\n  /**\n   * The **`image-rendering`** CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants.\n   *\n   * **Syntax**: `auto | crisp-edges | pixelated`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **13** | **3.6** | **6**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-rendering\n   */\n  imageRendering?: Property.ImageRendering | undefined;\n  /**\n   * **Syntax**: `[ from-image || <resolution> ] && snap?`\n   *\n   * **Initial value**: `1dppx`\n   */\n  imageResolution?: Property.ImageResolution | undefined;\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |   Safari    | Edge | IE  |\n   * | :-----: | :-----: | :---------: | :--: | :-: |\n   * | **110** |   No    | **9** _-x-_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/initial-letter\n   */\n  initialLetter?: Property.InitialLetter | undefined;\n  /**\n   * The **`inline-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inline-size\n   */\n  inlineSize?: Property.InlineSize<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  inputSecurity?: Property.InputSecurity | undefined;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-end\n   */\n  insetBlockEnd?: Property.InsetBlockEnd<TLength> | undefined;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-start\n   */\n  insetBlockStart?: Property.InsetBlockStart<TLength> | undefined;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-end\n   */\n  insetInlineEnd?: Property.InsetInlineEnd<TLength> | undefined;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-start\n   */\n  insetInlineStart?: Property.InsetInlineStart<TLength> | undefined;\n  /**\n   * The **`isolation`** CSS property determines whether an element must create a new stacking context.\n   *\n   * **Syntax**: `auto | isolate`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **41** | **36**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/isolation\n   */\n  isolation?: Property.Isolation | undefined;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-content\n   */\n  justifyContent?: Property.JustifyContent | undefined;\n  /**\n   * The CSS **`justify-items`** property defines the default `justify-self` for all items of the box, giving them all a default way of justifying each box along the appropriate axis.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]`\n   *\n   * **Initial value**: `legacy`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **52** | **20**  | **9**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-items\n   */\n  justifyItems?: Property.JustifyItems | undefined;\n  /**\n   * The CSS **`justify-self`** property sets the way a box is justified inside its alignment container along the appropriate axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :------: | :----: | :----: |\n   * | **57** | **45**  | **10.1** | **16** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-self\n   */\n  justifySelf?: Property.JustifySelf | undefined;\n  /**\n   * The **`justify-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their inline axis.\n   *\n   * **Syntax**: `[ normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ] ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-tracks\n   */\n  justifyTracks?: Property.JustifyTracks | undefined;\n  /**\n   * The **`left`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/left\n   */\n  left?: Property.Left<TLength> | undefined;\n  /**\n   * The **`letter-spacing`** CSS property sets the horizontal spacing behavior between text characters. This value is added to the natural spacing between characters while rendering the text. Positive values of `letter-spacing` causes characters to spread farther apart, while negative values of `letter-spacing` bring characters closer together.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/letter-spacing\n   */\n  letterSpacing?: Property.LetterSpacing<TLength> | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE    |\n   * | :-----: | :-----: | :-----: | :----: | :-----: |\n   * | **58**  | **69**  | **11**  | **14** | **5.5** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |         |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-break\n   */\n  lineBreak?: Property.LineBreak | undefined;\n  /**\n   * The **`line-height`** CSS property sets the height of a line box. It's commonly used to set the distance between lines of text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.\n   *\n   * **Syntax**: `normal | <number> | <length> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height\n   */\n  lineHeight?: Property.LineHeight<TLength> | undefined;\n  /**\n   * The **`line-height-step`** CSS property sets the step unit for line box heights. When the property is set, line box heights are rounded up to the closest multiple of the unit.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height-step\n   */\n  lineHeightStep?: Property.LineHeightStep<TLength> | undefined;\n  /**\n   * The **`list-style-image`** CSS property sets an image to be used as the list item marker.\n   *\n   * **Syntax**: `<image> | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-image\n   */\n  listStyleImage?: Property.ListStyleImage | undefined;\n  /**\n   * The **`list-style-position`** CSS property sets the position of the `::marker` relative to a list item.\n   *\n   * **Syntax**: `inside | outside`\n   *\n   * **Initial value**: `outside`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-position\n   */\n  listStylePosition?: Property.ListStylePosition | undefined;\n  /**\n   * The **`list-style-type`** CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.\n   *\n   * **Syntax**: `<counter-style> | <string> | none`\n   *\n   * **Initial value**: `disc`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-type\n   */\n  listStyleType?: Property.ListStyleType | undefined;\n  /**\n   * The **`margin-block-end`** CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-end\n   */\n  marginBlockEnd?: Property.MarginBlockEnd<TLength> | undefined;\n  /**\n   * The **`margin-block-start`** CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-start\n   */\n  marginBlockStart?: Property.MarginBlockStart<TLength> | undefined;\n  /**\n   * The **`margin-bottom`** CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom\n   */\n  marginBottom?: Property.MarginBottom<TLength> | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome          |        Firefox        |          Safari          | Edge | IE  |\n   * | :----------------------: | :-------------------: | :----------------------: | :--: | :-: |\n   * |          **69**          |        **41**         |         **12.1**         | n/a  | No  |\n   * | 2 _(-webkit-margin-end)_ | 3 _(-moz-margin-end)_ | 3 _(-webkit-margin-end)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-end\n   */\n  marginInlineEnd?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome           |         Firefox         |           Safari           | Edge | IE  |\n   * | :------------------------: | :---------------------: | :------------------------: | :--: | :-: |\n   * |           **69**           |         **41**          |          **12.1**          | n/a  | No  |\n   * | 2 _(-webkit-margin-start)_ | 3 _(-moz-margin-start)_ | 3 _(-webkit-margin-start)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-start\n   */\n  marginInlineStart?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * The **`margin-left`** CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-left\n   */\n  marginLeft?: Property.MarginLeft<TLength> | undefined;\n  /**\n   * The **`margin-right`** CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-right\n   */\n  marginRight?: Property.MarginRight<TLength> | undefined;\n  /**\n   * The **`margin-top`** CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-top\n   */\n  marginTop?: Property.MarginTop<TLength> | undefined;\n  /**\n   * The `margin-trim` property allows the container to trim the margins of its children where they adjoin the container's edges.\n   *\n   * **Syntax**: `none | in-flow | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   |   No    | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-trim\n   */\n  marginTrim?: Property.MarginTrim | undefined;\n  /**\n   * The **`mask-border-mode`** CSS property specifies the blending mode used in a mask border.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `alpha`\n   */\n  maskBorderMode?: Property.MaskBorderMode | undefined;\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * |                 Chrome                  | Firefox |                Safari                 | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :-----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-outset)_ |   No    |               **17.2**                | n/a  | No  |\n   * |                                         |         | 3.1 _(-webkit-mask-box-image-outset)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-outset\n   */\n  maskBorderOutset?: Property.MaskBorderOutset<TLength> | undefined;\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * |                 Chrome                  | Firefox |                Safari                 | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :-----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-repeat)_ |   No    |               **17.2**                | n/a  | No  |\n   * |                                         |         | 3.1 _(-webkit-mask-box-image-repeat)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat\n   */\n  maskBorderRepeat?: Property.MaskBorderRepeat | undefined;\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   *\n   * |                 Chrome                 | Firefox |                Safari                | Edge | IE  |\n   * | :------------------------------------: | :-----: | :----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-slice)_ |   No    |               **17.2**               | n/a  | No  |\n   * |                                        |         | 3.1 _(-webkit-mask-box-image-slice)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-slice\n   */\n  maskBorderSlice?: Property.MaskBorderSlice | undefined;\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * |                 Chrome                  | Firefox |                Safari                 | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :-----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-source)_ |   No    |               **17.2**                | n/a  | No  |\n   * |                                         |         | 3.1 _(-webkit-mask-box-image-source)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-source\n   */\n  maskBorderSource?: Property.MaskBorderSource | undefined;\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   *\n   * |                 Chrome                 | Firefox |                Safari                | Edge | IE  |\n   * | :------------------------------------: | :-----: | :----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-width)_ |   No    |               **17.2**               | n/a  | No  |\n   * |                                        |         | 3.1 _(-webkit-mask-box-image-width)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-width\n   */\n  maskBorderWidth?: Property.MaskBorderWidth<TLength> | undefined;\n  /**\n   * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <geometry-box> | no-clip ]#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **120** | **53**  | **15.4** | n/a  | No  |\n   * | 1 _-x-_ |         | 4 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-clip\n   */\n  maskClip?: Property.MaskClip | undefined;\n  /**\n   * The **`mask-composite`** CSS property represents a compositing operation used on the current mask layer with the mask layers below it.\n   *\n   * **Syntax**: `<compositing-operator>#`\n   *\n   * **Initial value**: `add`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge  | IE  |\n   * | :-----: | :-----: | :------: | :---: | :-: |\n   * | **120** | **53**  | **15.4** | 18-79 | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-composite\n   */\n  maskComposite?: Property.MaskComposite | undefined;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the `mask-mode` property.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge  | IE  |\n   * | :-----: | :-----: | :------: | :---: | :-: |\n   * | **120** | **53**  | **15.4** | 16-79 | No  |\n   * | 1 _-x-_ |         | 4 _-x-_  |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-image\n   */\n  maskImage?: Property.MaskImage | undefined;\n  /**\n   * The **`mask-mode`** CSS property sets whether the mask reference defined by `mask-image` is treated as a luminance or alpha mask.\n   *\n   * **Syntax**: `<masking-mode>#`\n   *\n   * **Initial value**: `match-source`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **120** | **53**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-mode\n   */\n  maskMode?: Property.MaskMode | undefined;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `<geometry-box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **120** | **53**  | **15.4** | n/a  | No  |\n   * | 1 _-x-_ |         | 4 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-origin\n   */\n  maskOrigin?: Property.MaskOrigin | undefined;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `center`\n   *\n   * | Chrome  | Firefox |  Safari   | Edge  | IE  |\n   * | :-----: | :-----: | :-------: | :---: | :-: |\n   * | **120** | **53**  | **15.4**  | 18-79 | No  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-position\n   */\n  maskPosition?: Property.MaskPosition<TLength> | undefined;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * | Chrome  | Firefox |  Safari   | Edge  | IE  |\n   * | :-----: | :-----: | :-------: | :---: | :-: |\n   * | **120** | **53**  | **15.4**  | 18-79 | No  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-repeat\n   */\n  maskRepeat?: Property.MaskRepeat | undefined;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge  | IE  |\n   * | :-----: | :-----: | :------: | :---: | :-: |\n   * | **120** | **53**  | **15.4** | 18-79 | No  |\n   * | 4 _-x-_ |         | 4 _-x-_  |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-size\n   */\n  maskSize?: Property.MaskSize<TLength> | undefined;\n  /**\n   * The **`mask-type`** CSS property sets whether an SVG `<mask>` element is used as a _luminance_ or an _alpha_ mask. It applies to the `<mask>` element itself.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `luminance`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **24** | **35**  | **7**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-type\n   */\n  maskType?: Property.MaskType | undefined;\n  /**\n   * This feature is not Baseline because it does not work in some of the most widely-used browsers.\n   *\n   * **Syntax**: `[ pack | next ] || [ definite-first | ordered ]`\n   *\n   * **Initial value**: `pack`\n   *\n   * | Chrome | Firefox |   Safari    | Edge | IE  |\n   * | :----: | :-----: | :---------: | :--: | :-: |\n   * |   No   |   No    | **preview** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/masonry-auto-flow\n   */\n  masonryAutoFlow?: Property.MasonryAutoFlow | undefined;\n  /**\n   * The **`math-depth`** property describes a notion of _depth_ for each element of a mathematical formula, with respect to the top-level container of that formula. Concretely, this is used to determine the computed value of the font-size property when its specified value is `math`.\n   *\n   * **Syntax**: `auto-add | add(<integer>) | <integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** | **117** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-depth\n   */\n  mathDepth?: Property.MathDepth | undefined;\n  /**\n   * The `math-shift` property indicates whether superscripts inside MathML formulas should be raised by a normal or compact shift.\n   *\n   * **Syntax**: `normal | compact`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-shift\n   */\n  mathShift?: Property.MathShift | undefined;\n  /**\n   * The `math-style` property indicates whether MathML equations should render with normal or compact height.\n   *\n   * **Syntax**: `normal | compact`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **109** | **117** | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-style\n   */\n  mathStyle?: Property.MathStyle | undefined;\n  /**\n   * The **`max-block-size`** CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by `writing-mode`. That is, if the writing direction is horizontal, then `max-block-size` is equivalent to `max-height`; if the writing direction is vertical, `max-block-size` is the same as `max-width`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-block-size\n   */\n  maxBlockSize?: Property.MaxBlockSize<TLength> | undefined;\n  /**\n   * The **`max-height`** CSS property sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `max-height`.\n   *\n   * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **18** |  **1**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-height\n   */\n  maxHeight?: Property.MaxHeight<TLength> | undefined;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari   | Edge | IE  |\n   * | :----: | :-----: | :--------: | :--: | :-: |\n   * | **57** | **41**  |  **12.1**  | n/a  | No  |\n   * |        |         | 10.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-inline-size\n   */\n  maxInlineSize?: Property.MaxInlineSize<TLength> | undefined;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  maxLines?: Property.MaxLines | undefined;\n  /**\n   * The **`max-width`** CSS property sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `max-width`.\n   *\n   * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-width\n   */\n  maxWidth?: Property.MaxWidth<TLength> | undefined;\n  /**\n   * The **`min-block-size`** CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-block-size\n   */\n  minBlockSize?: Property.MinBlockSize<TLength> | undefined;\n  /**\n   * The **`min-height`** CSS property sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `min-height`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **3**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-height\n   */\n  minHeight?: Property.MinHeight<TLength> | undefined;\n  /**\n   * The **`min-inline-size`** CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-inline-size\n   */\n  minInlineSize?: Property.MinInlineSize<TLength> | undefined;\n  /**\n   * The **`min-width`** CSS property sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `min-width`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-width\n   */\n  minWidth?: Property.MinWidth<TLength> | undefined;\n  /**\n   * The **`mix-blend-mode`** CSS property sets how an element's content should blend with the content of the element's parent and the element's background.\n   *\n   * **Syntax**: `<blend-mode> | plus-lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **41** | **32**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode\n   */\n  mixBlendMode?: Property.MixBlendMode | undefined;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **55**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-distance)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  motionDistance?: Property.OffsetDistance<TLength> | undefined;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | <offset-path> || <coord-box>`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox |  Safari  | Edge | IE  |\n   * | :----------------: | :-----: | :------: | :--: | :-: |\n   * |       **55**       | **72**  | **15.4** | n/a  | No  |\n   * | 46 _(motion-path)_ |         |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  motionPath?: Property.OffsetPath | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **56**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  motionRotation?: Property.OffsetRotate | undefined;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **32** | **36**  | **10** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-fit\n   */\n  objectFit?: Property.ObjectFit | undefined;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **32** | **36**  | **10** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-position\n   */\n  objectPosition?: Property.ObjectPosition<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **116** | **72**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-anchor\n   */\n  offsetAnchor?: Property.OffsetAnchor<TLength> | undefined;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **55**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-distance)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  offsetDistance?: Property.OffsetDistance<TLength> | undefined;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | <offset-path> || <coord-box>`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox |  Safari  | Edge | IE  |\n   * | :----------------: | :-----: | :------: | :--: | :-: |\n   * |       **55**       | **72**  | **15.4** | n/a  | No  |\n   * | 46 _(motion-path)_ |         |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  offsetPath?: Property.OffsetPath | undefined;\n  /**\n   * **Syntax**: `normal | auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **116** |   n/a   | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-position\n   */\n  offsetPosition?: Property.OffsetPosition<TLength> | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **56**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  offsetRotate?: Property.OffsetRotate | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **56**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  offsetRotation?: Property.OffsetRotate | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **2**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/opacity\n   */\n  opacity?: Property.Opacity | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/order\n   */\n  order?: Property.Order | undefined;\n  /**\n   * The **`orphans`** CSS property sets the minimum number of lines in a block container that must be shown at the _bottom_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/orphans\n   */\n  orphans?: Property.Orphans | undefined;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-color\n   */\n  outlineColor?: Property.OutlineColor | undefined;\n  /**\n   * The **`outline-offset`** CSS property sets the amount of space between an outline and the edge or border of an element.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **1**  | **1.5** | **1.2** | **15** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-offset\n   */\n  outlineOffset?: Property.OutlineOffset<TLength> | undefined;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-style\n   */\n  outlineStyle?: Property.OutlineStyle | undefined;\n  /**\n   * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-width\n   */\n  outlineWidth?: Property.OutlineWidth<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **56** | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-anchor\n   */\n  overflowAnchor?: Property.OverflowAnchor | undefined;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-block\n   */\n  overflowBlock?: Property.OverflowBlock | undefined;\n  /**\n   * The **`overflow-clip-box`** CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the `overflow-clip-box-inline` and `overflow-clip-box-block` properties.\n   *\n   * **Syntax**: `padding-box | content-box`\n   *\n   * **Initial value**: `padding-box`\n   */\n  overflowClipBox?: Property.OverflowClipBox | undefined;\n  /**\n   * **Syntax**: `<visual-box> || <length [0,∞]>`\n   *\n   * **Initial value**: `0px`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **90** | **102** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin\n   */\n  overflowClipMargin?: Property.OverflowClipMargin<TLength> | undefined;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-inline\n   */\n  overflowInline?: Property.OverflowInline | undefined;\n  /**\n   * The **`overflow-wrap`** CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.\n   *\n   * **Syntax**: `normal | break-word | anywhere`\n   *\n   * **Initial value**: `normal`\n   *\n   * |     Chrome      |      Firefox      |     Safari      |       Edge       |          IE           |\n   * | :-------------: | :---------------: | :-------------: | :--------------: | :-------------------: |\n   * |     **23**      |      **49**       |      **7**      |      **18**      | **5.5** _(word-wrap)_ |\n   * | 1 _(word-wrap)_ | 3.5 _(word-wrap)_ | 1 _(word-wrap)_ | 12 _(word-wrap)_ |                       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap\n   */\n  overflowWrap?: Property.OverflowWrap | undefined;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-x\n   */\n  overflowX?: Property.OverflowX | undefined;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-y\n   */\n  overflowY?: Property.OverflowY | undefined;\n  /**\n   * The **`overlay`** CSS property specifies whether an element appearing in the top layer (for example, a shown popover or modal `<dialog>` element) is actually rendered in the top layer. This property is only relevant within a list of `transition-property` values, and only if `allow-discrete` is set as the `transition-behavior`.\n   *\n   * **Syntax**: `none | auto`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **117** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overlay\n   */\n  overlay?: Property.Overlay | undefined;\n  /**\n   * The **`overscroll-behavior-block`** CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **77** | **73**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block\n   */\n  overscrollBehaviorBlock?: Property.OverscrollBehaviorBlock | undefined;\n  /**\n   * The **`overscroll-behavior-inline`** CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **77** | **73**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline\n   */\n  overscrollBehaviorInline?: Property.OverscrollBehaviorInline | undefined;\n  /**\n   * The **`overscroll-behavior-x`** CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x\n   */\n  overscrollBehaviorX?: Property.OverscrollBehaviorX | undefined;\n  /**\n   * The **`overscroll-behavior-y`** CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y\n   */\n  overscrollBehaviorY?: Property.OverscrollBehaviorY | undefined;\n  /**\n   * The **`padding-block-end`** CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-end\n   */\n  paddingBlockEnd?: Property.PaddingBlockEnd<TLength> | undefined;\n  /**\n   * The **`padding-block-start`** CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-start\n   */\n  paddingBlockStart?: Property.PaddingBlockStart<TLength> | undefined;\n  /**\n   * The **`padding-bottom`** CSS property sets the height of the padding area on the bottom of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom\n   */\n  paddingBottom?: Property.PaddingBottom<TLength> | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome           |        Firefox         |          Safari           | Edge | IE  |\n   * | :-----------------------: | :--------------------: | :-----------------------: | :--: | :-: |\n   * |          **69**           |         **41**         |         **12.1**          | n/a  | No  |\n   * | 2 _(-webkit-padding-end)_ | 3 _(-moz-padding-end)_ | 3 _(-webkit-padding-end)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-end\n   */\n  paddingInlineEnd?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome            |         Firefox          |           Safari            | Edge | IE  |\n   * | :-------------------------: | :----------------------: | :-------------------------: | :--: | :-: |\n   * |           **69**            |          **41**          |          **12.1**           | n/a  | No  |\n   * | 2 _(-webkit-padding-start)_ | 3 _(-moz-padding-start)_ | 3 _(-webkit-padding-start)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-start\n   */\n  paddingInlineStart?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * The **`padding-left`** CSS property sets the width of the padding area to the left of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-left\n   */\n  paddingLeft?: Property.PaddingLeft<TLength> | undefined;\n  /**\n   * The **`padding-right`** CSS property sets the width of the padding area on the right of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-right\n   */\n  paddingRight?: Property.PaddingRight<TLength> | undefined;\n  /**\n   * The **`padding-top`** CSS property sets the height of the padding area on the top of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-top\n   */\n  paddingTop?: Property.PaddingTop<TLength> | undefined;\n  /**\n   * The **`page`** CSS property is used to specify the named page, a specific type of page defined by the `@page` at-rule.\n   *\n   * **Syntax**: `auto | <custom-ident>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari   | Edge | IE  |\n   * | :----: | :-----: | :-------: | :--: | :-: |\n   * | **85** | **110** | **≤13.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page\n   */\n  page?: Property.Page | undefined;\n  /**\n   * The **`page-break-after`** CSS property adjusts page breaks _after_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-after\n   */\n  pageBreakAfter?: Property.PageBreakAfter | undefined;\n  /**\n   * The **`page-break-before`** CSS property adjusts page breaks _before_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-before\n   */\n  pageBreakBefore?: Property.PageBreakBefore | undefined;\n  /**\n   * The **`page-break-inside`** CSS property adjusts page breaks _inside_ the current element.\n   *\n   * **Syntax**: `auto | avoid`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **19**  | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-inside\n   */\n  pageBreakInside?: Property.PageBreakInside | undefined;\n  /**\n   * The **`paint-order`** CSS property lets you control the order in which the fill and stroke (and painting markers) of text content and shapes are drawn.\n   *\n   * **Syntax**: `normal | [ fill || stroke || markers ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **35** | **60**  | **8**  | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/paint-order\n   */\n  paintOrder?: Property.PaintOrder | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **36**  | **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ |         | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective\n   */\n  perspective?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **36**  | **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ |         | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective-origin\n   */\n  perspectiveOrigin?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`pointer-events`** CSS property sets under what circumstances (if any) a particular graphic element can become the target of pointer events.\n   *\n   * **Syntax**: `auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **4**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/pointer-events\n   */\n  pointerEvents?: Property.PointerEvents | undefined;\n  /**\n   * The **`position`** CSS property sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements.\n   *\n   * **Syntax**: `static | relative | absolute | sticky | fixed`\n   *\n   * **Initial value**: `static`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/position\n   */\n  position?: Property.Position | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |    Chrome    |       Firefox       |  Safari  |     Edge     | IE  |\n   * | :----------: | :-----------------: | :------: | :----------: | :-: |\n   * | **17** _-x-_ |       **97**        | **15.4** | **79** _-x-_ | No  |\n   * |              | 48 _(color-adjust)_ | 6 _-x-_  |              |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/print-color-adjust\n   */\n  printColorAdjust?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`quotes`** CSS property sets how the browser should render quotation marks that are added using the `open-quotes` or `close-quotes` values of the CSS `content` property.\n   *\n   * **Syntax**: `none | auto | [ <string> <string> ]+`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **11** | **1.5** | **9**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/quotes\n   */\n  quotes?: Property.Quotes | undefined;\n  /**\n   * The **`resize`** CSS property sets whether an element is resizable, and if so, in which directions.\n   *\n   * **Syntax**: `none | both | horizontal | vertical | block | inline`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **1**  |  **4**  | **3**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/resize\n   */\n  resize?: Property.Resize | undefined;\n  /**\n   * The **`right`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/right\n   */\n  right?: Property.Right<TLength> | undefined;\n  /**\n   * The **`rotate`** CSS property allows you to specify rotation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` property.\n   *\n   * **Syntax**: `none | <angle> | [ x | y | z | <number>{3} ] && <angle>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/rotate\n   */\n  rotate?: Property.Rotate | undefined;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's rows.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **47** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/row-gap\n   */\n  rowGap?: Property.RowGap<TLength> | undefined;\n  /**\n   * The **`ruby-align`** CSS property defines the distribution of the different ruby elements over the base.\n   *\n   * **Syntax**: `start | center | space-between | space-around`\n   *\n   * **Initial value**: `space-around`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **38**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-align\n   */\n  rubyAlign?: Property.RubyAlign | undefined;\n  /**\n   * **Syntax**: `separate | collapse | auto`\n   *\n   * **Initial value**: `separate`\n   */\n  rubyMerge?: Property.RubyMerge | undefined;\n  /**\n   * The **`ruby-position`** CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (`over`), under it (`under`), or between the characters on their right side (`inter-character`).\n   *\n   * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`\n   *\n   * **Initial value**: `alternate`\n   *\n   * | Chrome  | Firefox |   Safari    | Edge  | IE  |\n   * | :-----: | :-----: | :---------: | :---: | :-: |\n   * | **84**  | **38**  | **7** _-x-_ | 12-79 | No  |\n   * | 1 _-x-_ |         |             |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-position\n   */\n  rubyPosition?: Property.RubyPosition | undefined;\n  /**\n   * The **`scale`** CSS property allows you to specify scale transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <number>{1,3}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scale\n   */\n  scale?: Property.Scale | undefined;\n  /**\n   * The **`scroll-behavior`** CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.\n   *\n   * **Syntax**: `auto | smooth`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **61** | **36**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-behavior\n   */\n  scrollBehavior?: Property.ScrollBehavior | undefined;\n  /**\n   * The `scroll-margin-block-end` property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end\n   */\n  scrollMarginBlockEnd?: Property.ScrollMarginBlockEnd<TLength> | undefined;\n  /**\n   * The `scroll-margin-block-start` property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start\n   */\n  scrollMarginBlockStart?: Property.ScrollMarginBlockStart<TLength> | undefined;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari              | Edge | IE  |\n   * | :----: | :-----: | :------------------------------: | :--: | :-: |\n   * | **69** | **68**  |             **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-bottom)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  scrollMarginBottom?: Property.ScrollMarginBottom<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline-end` property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end\n   */\n  scrollMarginInlineEnd?: Property.ScrollMarginInlineEnd<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline-start` property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start\n   */\n  scrollMarginInlineStart?: Property.ScrollMarginInlineStart<TLength> | undefined;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari             | Edge | IE  |\n   * | :----: | :-----: | :----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-left)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  scrollMarginLeft?: Property.ScrollMarginLeft<TLength> | undefined;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari              | Edge | IE  |\n   * | :----: | :-----: | :-----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-right)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  scrollMarginRight?: Property.ScrollMarginRight<TLength> | undefined;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             | Edge | IE  |\n   * | :----: | :-----: | :---------------------------: | :--: | :-: |\n   * | **69** | **68**  |           **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-top)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  scrollMarginTop?: Property.ScrollMarginTop<TLength> | undefined;\n  /**\n   * The `scroll-padding-block-end` property defines offsets for the end edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end\n   */\n  scrollPaddingBlockEnd?: Property.ScrollPaddingBlockEnd<TLength> | undefined;\n  /**\n   * The `scroll-padding-block-start` property defines offsets for the start edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start\n   */\n  scrollPaddingBlockStart?: Property.ScrollPaddingBlockStart<TLength> | undefined;\n  /**\n   * The `scroll-padding-bottom` property defines offsets for the bottom of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom\n   */\n  scrollPaddingBottom?: Property.ScrollPaddingBottom<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline-end` property defines offsets for the end edge in the inline dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end\n   */\n  scrollPaddingInlineEnd?: Property.ScrollPaddingInlineEnd<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline-start` property defines offsets for the start edge in the inline dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start\n   */\n  scrollPaddingInlineStart?: Property.ScrollPaddingInlineStart<TLength> | undefined;\n  /**\n   * The `scroll-padding-left` property defines offsets for the left of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left\n   */\n  scrollPaddingLeft?: Property.ScrollPaddingLeft<TLength> | undefined;\n  /**\n   * The `scroll-padding-right` property defines offsets for the right of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right\n   */\n  scrollPaddingRight?: Property.ScrollPaddingRight<TLength> | undefined;\n  /**\n   * The **`scroll-padding-top`** property defines offsets for the top of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top\n   */\n  scrollPaddingTop?: Property.ScrollPaddingTop<TLength> | undefined;\n  /**\n   * The `scroll-snap-align` property specifies the box's snap position as an alignment of its snap area (as the alignment subject) within its snap container's snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value.\n   *\n   * **Syntax**: `[ none | start | end | center ]{1,2}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align\n   */\n  scrollSnapAlign?: Property.ScrollSnapAlign | undefined;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari              | Edge | IE  |\n   * | :----: | :-----: | :------------------------------: | :--: | :-: |\n   * | **69** | **68**  |             **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-bottom)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  scrollSnapMarginBottom?: Property.ScrollMarginBottom<TLength> | undefined;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari             | Edge | IE  |\n   * | :----: | :-----: | :----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-left)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  scrollSnapMarginLeft?: Property.ScrollMarginLeft<TLength> | undefined;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari              | Edge | IE  |\n   * | :----: | :-----: | :-----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-right)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  scrollSnapMarginRight?: Property.ScrollMarginRight<TLength> | undefined;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             | Edge | IE  |\n   * | :----: | :-----: | :---------------------------: | :--: | :-: |\n   * | **69** | **68**  |           **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-top)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  scrollSnapMarginTop?: Property.ScrollMarginTop<TLength> | undefined;\n  /**\n   * The **`scroll-snap-stop`** CSS property defines whether or not the scroll container is allowed to \"pass over\" possible snap positions.\n   *\n   * **Syntax**: `normal | always`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **75** | **103** | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop\n   */\n  scrollSnapStop?: Property.ScrollSnapStop | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |      IE      |\n   * | :----: | :-----: | :-----: | :----: | :----------: |\n   * | **69** |  39-68  | **11**  | **79** | **10** _-x-_ |\n   * |        |         | 9 _-x-_ |        |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type\n   */\n  scrollSnapType?: Property.ScrollSnapType | undefined;\n  /**\n   * The **`scroll-timeline-axis`** CSS property can be used to specify the scrollbar that will be used to provide the timeline for a scroll-timeline animation.\n   *\n   * **Syntax**: `[ block | inline | x | y ]#`\n   *\n   * **Initial value**: `block`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-axis\n   */\n  scrollTimelineAxis?: Property.ScrollTimelineAxis | undefined;\n  /**\n   * The **`scroll-timeline-name`** CSS property defines a name that can be used to identify an element as the source of a scroll timeline for an animation.\n   *\n   * **Syntax**: `none | <dashed-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-name\n   */\n  scrollTimelineName?: Property.ScrollTimelineName | undefined;\n  /**\n   * The **`scrollbar-color`** CSS property sets the color of the scrollbar track and thumb.\n   *\n   * **Syntax**: `auto | <color>{2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **121** | **64**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-color\n   */\n  scrollbarColor?: Property.ScrollbarColor | undefined;\n  /**\n   * The **`scrollbar-gutter`** CSS property allows authors to reserve space for the scrollbar, preventing unwanted layout changes as the content grows while also avoiding unnecessary visuals when scrolling isn't needed.\n   *\n   * **Syntax**: `auto | stable && both-edges?`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **94** | **97**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter\n   */\n  scrollbarGutter?: Property.ScrollbarGutter | undefined;\n  /**\n   * The **`scrollbar-width`** property allows the author to set the maximum thickness of an element's scrollbars when they are shown.\n   *\n   * **Syntax**: `auto | thin | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **121** | **64**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-width\n   */\n  scrollbarWidth?: Property.ScrollbarWidth | undefined;\n  /**\n   * The **`shape-image-threshold`** CSS property sets the alpha channel threshold used to extract the shape using an image as the value for `shape-outside`.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `0.0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold\n   */\n  shapeImageThreshold?: Property.ShapeImageThreshold | undefined;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-margin\n   */\n  shapeMargin?: Property.ShapeMargin<TLength> | undefined;\n  /**\n   * The **`shape-outside`** CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; `shape-outside` provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes.\n   *\n   * **Syntax**: `none | [ <shape-box> || <basic-shape> ] | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-outside\n   */\n  shapeOutside?: Property.ShapeOutside | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **21** | **91**  | **7**  | n/a  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/tab-size\n   */\n  tabSize?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`table-layout`** CSS property sets the algorithm used to lay out `<table>` cells, rows, and columns.\n   *\n   * **Syntax**: `auto | fixed`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **14** |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/table-layout\n   */\n  tableLayout?: Property.TableLayout | undefined;\n  /**\n   * The **`text-align`** CSS property sets the horizontal alignment of the inline-level content inside a block element or table-cell box. This means it works like `vertical-align` but in the horizontal direction.\n   *\n   * **Syntax**: `start | end | left | right | center | justify | match-parent`\n   *\n   * **Initial value**: `start`, or a nameless value that acts as `left` if _direction_ is `ltr`, `right` if _direction_ is `rtl` if `start` is not supported by the browser.\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align\n   */\n  textAlign?: Property.TextAlign | undefined;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **47** | **49**  | **16** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align-last\n   */\n  textAlignLast?: Property.TextAlignLast | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |           Chrome           | Firefox |            Safari            |  Edge  |                   IE                   |\n   * | :------------------------: | :-----: | :--------------------------: | :----: | :------------------------------------: |\n   * |           **48**           | **48**  |           **15.4**           | **79** | **11** _(-ms-text-combine-horizontal)_ |\n   * | 9 _(-webkit-text-combine)_ |         | 5.1 _(-webkit-text-combine)_ |        |                                        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-combine-upright\n   */\n  textCombineUpright?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-color\n   */\n  textDecorationColor?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-line\n   */\n  textDecorationLine?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | 57-64  |   No    | **12.1** | n/a  | No  |\n   * |        |         | 7 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip\n   */\n  textDecorationSkip?: Property.TextDecorationSkip | undefined;\n  /**\n   * The **`text-decoration-skip-ink`** CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.\n   *\n   * **Syntax**: `auto | all | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **64** | **70**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink\n   */\n  textDecorationSkipInk?: Property.TextDecorationSkipInk | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-style\n   */\n  textDecorationStyle?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`text-decoration-thickness`** CSS property sets the stroke thickness of the decoration line that is used on text in an element, such as a line-through, underline, or overline.\n   *\n   * **Syntax**: `auto | from-font | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **89** | **70**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness\n   */\n  textDecorationThickness?: Property.TextDecorationThickness<TLength> | undefined;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color\n   */\n  textEmphasisColor?: Property.TextEmphasisColor | undefined;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position\n   */\n  textEmphasisPosition?: Property.TextEmphasisPosition | undefined;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style\n   */\n  textEmphasisStyle?: Property.TextEmphasisStyle | undefined;\n  /**\n   * The **`text-indent`** CSS property sets the length of empty space (indentation) that is put before lines of text in a block.\n   *\n   * **Syntax**: `<length-percentage> && hanging? && each-line?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-indent\n   */\n  textIndent?: Property.TextIndent<TLength> | undefined;\n  /**\n   * The **`text-justify`** CSS property sets what type of justification should be applied to text when `text-align``: justify;` is set on an element.\n   *\n   * **Syntax**: `auto | inter-character | inter-word | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge  |   IE   |\n   * | :----: | :-----: | :----: | :---: | :----: |\n   * |  n/a   | **55**  |   No   | 12-79 | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-justify\n   */\n  textJustify?: Property.TextJustify | undefined;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   *\n   * |  Chrome  | Firefox |  Safari   | Edge | IE  |\n   * | :------: | :-----: | :-------: | :--: | :-: |\n   * |  **48**  | **41**  |  **14**   | n/a  | No  |\n   * | 11 _-x-_ |         | 5.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-orientation\n   */\n  textOrientation?: Property.TextOrientation | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **7**  | **1.3** | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-overflow\n   */\n  textOverflow?: Property.TextOverflow | undefined;\n  /**\n   * The **`text-rendering`** CSS property provides information to the rendering engine about what to optimize for when rendering text.\n   *\n   * **Syntax**: `auto | optimizeSpeed | optimizeLegibility | geometricPrecision`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **4**  |  **1**  | **5**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-rendering\n   */\n  textRendering?: Property.TextRendering | undefined;\n  /**\n   * The **`text-shadow`** CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its `decorations`. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.\n   *\n   * **Syntax**: `none | <shadow-t>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **2**  | **3.5** | **1.1** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-shadow\n   */\n  textShadow?: Property.TextShadow | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **54** |   No    |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-size-adjust\n   */\n  textSizeAdjust?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`text-transform`** CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby.\n   *\n   * **Syntax**: `none | capitalize | uppercase | lowercase | full-width | full-size-kana`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-transform\n   */\n  textTransform?: Property.TextTransform | undefined;\n  /**\n   * The **`text-underline-offset`** CSS property sets the offset distance of an underline text decoration line (applied using `text-decoration`) from its original position.\n   *\n   * **Syntax**: `auto | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **70**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-offset\n   */\n  textUnderlineOffset?: Property.TextUnderlineOffset<TLength> | undefined;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :------: | :----: | :---: |\n   * | **33** | **74**  | **12.1** | **12** | **6** |\n   * |        |         | 9 _-x-_  |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-position\n   */\n  textUnderlinePosition?: Property.TextUnderlinePosition | undefined;\n  /**\n   * The **`text-wrap`** CSS property controls how text inside an element is wrapped. The different values provide:\n   *\n   * **Syntax**: `wrap | nowrap | balance | stable | pretty`\n   *\n   * **Initial value**: `wrap`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **114** | **121** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-wrap\n   */\n  textWrap?: Property.TextWrap | undefined;\n  /**\n   * The **`timeline-scope`** CSS property modifies the scope of a named animation timeline.\n   *\n   * **Syntax**: `none | <dashed-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **116** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/timeline-scope\n   */\n  timelineScope?: Property.TimelineScope | undefined;\n  /**\n   * The **`top`** CSS property participates in specifying the vertical position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/top\n   */\n  top?: Property.Top<TLength> | undefined;\n  /**\n   * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |    IE    |\n   * | :----: | :-----: | :----: | :----: | :------: |\n   * | **36** | **52**  | **13** | **12** |  **11**  |\n   * |        |         |        |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/touch-action\n   */\n  touchAction?: Property.TouchAction | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE    |\n   * | :-----: | :-----: | :-------: | :----: | :-----: |\n   * | **36**  | **16**  |   **9**   | **12** | **10**  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform\n   */\n  transform?: Property.Transform | undefined;\n  /**\n   * The **`transform-box`** CSS property defines the layout box to which the `transform`, individual transform properties `translate`,`scale`, and `rotate`, and `transform-origin` properties relate.\n   *\n   * **Syntax**: `content-box | border-box | fill-box | stroke-box | view-box`\n   *\n   * **Initial value**: `view-box`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **64** | **55**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-box\n   */\n  transformBox?: Property.TransformBox | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE    |\n   * | :-----: | :-----: | :-----: | :----: | :-----: |\n   * | **36**  | **16**  |  **9**  | **12** | **10**  |\n   * | 1 _-x-_ |         | 2 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-origin\n   */\n  transformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **36**  | **16**  |  **9**  | **12** | No  |\n   * | 12 _-x-_ |         | 4 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-style\n   */\n  transformStyle?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition-behavior`** CSS property specifies whether transitions will be started for properties whose animation behavior is discrete.\n   *\n   * **Syntax**: `<transition-behavior-value>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **117** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-behavior\n   */\n  transitionBehavior?: Property.TransitionBehavior | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **26**  | **16**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-delay\n   */\n  transitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-duration\n   */\n  transitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-property\n   */\n  transitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-timing-function\n   */\n  transitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`translate`** CSS property allows you to specify translation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <length-percentage> [ <length-percentage> <length>? ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/translate\n   */\n  translate?: Property.Translate<TLength> | undefined;\n  /**\n   * The **`unicode-bidi`** CSS property, together with the `direction` property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The `unicode-bidi` property overrides this algorithm and allows the developer to control the text embedding.\n   *\n   * **Syntax**: `normal | embed | isolate | bidi-override | isolate-override | plaintext`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1.3** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/unicode-bidi\n   */\n  unicodeBidi?: Property.UnicodeBidi | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |   Safari    |   Edge   |      IE      |\n   * | :-----: | :-----: | :---------: | :------: | :----------: |\n   * | **54**  | **69**  | **3** _-x-_ |  **79**  | **10** _-x-_ |\n   * | 1 _-x-_ | 1 _-x-_ |             | 12 _-x-_ |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/user-select\n   */\n  userSelect?: Property.UserSelect | undefined;\n  /**\n   * The **`vertical-align`** CSS property sets vertical alignment of an inline, inline-block or table-cell box.\n   *\n   * **Syntax**: `baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>`\n   *\n   * **Initial value**: `baseline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/vertical-align\n   */\n  verticalAlign?: Property.VerticalAlign<TLength> | undefined;\n  /**\n   * The **`view-timeline-axis`** CSS property is used to specify the scrollbar direction that will be used to provide the timeline for a _named view progress timeline_ animation, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). `view-timeline-axis` is set on the subject. See CSS scroll-driven animations for more details.\n   *\n   * **Syntax**: `[ block | inline | x | y ]#`\n   *\n   * **Initial value**: `block`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline-axis\n   */\n  viewTimelineAxis?: Property.ViewTimelineAxis | undefined;\n  /**\n   * The **`view-timeline-inset`** CSS property is used to specify one or two values representing an adjustment to the position of the scrollport (see Scroll container for more details) in which the subject element of a _named view progress timeline_ animation is deemed to be visible. Put another way, this allows you to specify start and/or end inset (or outset) values that offset the position of the timeline.\n   *\n   * **Syntax**: `[ [ auto | <length-percentage> ]{1,2} ]#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline-inset\n   */\n  viewTimelineInset?: Property.ViewTimelineInset<TLength> | undefined;\n  /**\n   * The **`view-timeline-name`** CSS property is used to define the name of a _named view progress timeline_, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). `view-timeline` is set on the subject.\n   *\n   * **Syntax**: `none | <dashed-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline-name\n   */\n  viewTimelineName?: Property.ViewTimelineName | undefined;\n  /**\n   * The **`view-transition-name`** CSS property provides the selected element with a distinct identifying name (a `<custom-ident>`) and causes it to participate in a separate view transition from the root view transition — or no view transition if the `none` value is specified.\n   *\n   * **Syntax**: `none | <custom-ident>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **111** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-transition-name\n   */\n  viewTransitionName?: Property.ViewTransitionName | undefined;\n  /**\n   * The **`visibility`** CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a `<table>`.\n   *\n   * **Syntax**: `visible | hidden | collapse`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/visibility\n   */\n  visibility?: Property.Visibility | undefined;\n  /**\n   * The **`white-space`** CSS property sets how white space inside an element is handled.\n   *\n   * **Syntax**: `normal | pre | nowrap | pre-wrap | pre-line | break-spaces | [ <'white-space-collapse'> || <'text-wrap'> || <'white-space-trim'> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/white-space\n   */\n  whiteSpace?: Property.WhiteSpace | undefined;\n  /**\n   * The **`white-space-collapse`** CSS property controls how white space inside an element is collapsed.\n   *\n   * **Syntax**: `collapse | discard | preserve | preserve-breaks | preserve-spaces | break-spaces`\n   *\n   * **Initial value**: `collapse`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **114** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/white-space-collapse\n   */\n  whiteSpaceCollapse?: Property.WhiteSpaceCollapse | undefined;\n  /**\n   * **Syntax**: `none | discard-before || discard-after || discard-inner`\n   *\n   * **Initial value**: `none`\n   */\n  whiteSpaceTrim?: Property.WhiteSpaceTrim | undefined;\n  /**\n   * The **`widows`** CSS property sets the minimum number of lines in a block container that must be shown at the _top_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/widows\n   */\n  widows?: Property.Widows | undefined;\n  /**\n   * The **`width`** CSS property sets an element's width. By default, it sets the width of the content area, but if `box-sizing` is set to `border-box`, it sets the width of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/width\n   */\n  width?: Property.Width<TLength> | undefined;\n  /**\n   * The **`will-change`** CSS property hints to browsers how an element is expected to change. Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before they are actually required.\n   *\n   * **Syntax**: `auto | <animateable-feature>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **36** | **36**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/will-change\n   */\n  willChange?: Property.WillChange | undefined;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  | **15**  | **3**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-break\n   */\n  wordBreak?: Property.WordBreak | undefined;\n  /**\n   * The **`word-spacing`** CSS property sets the length of space between words and between tags.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-spacing\n   */\n  wordSpacing?: Property.WordSpacing<TLength> | undefined;\n  /**\n   * The **`overflow-wrap`** CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.\n   *\n   * **Syntax**: `normal | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge   | IE  |\n   * | :-----: | :-----: | :-------: | :-----: | :-: |\n   * | **≤80** | **≤72** | **≤13.1** | **≤80** | No  |\n   */\n  wordWrap?: Property.WordWrap | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |  IE   |\n   * | :-----: | :-----: | :-------: | :----: | :---: |\n   * | **48**  | **41**  | **10.1**  | **12** | **9** |\n   * | 8 _-x-_ |         | 5.1 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/writing-mode\n   */\n  writingMode?: Property.WritingMode | undefined;\n  /**\n   * The **`z-index`** CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.\n   *\n   * **Syntax**: `auto | <integer>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/z-index\n   */\n  zIndex?: Property.ZIndex | undefined;\n  /**\n   * The non-standard **`zoom`** CSS property can be used to control the magnification level of an element. `transform: scale()` should be used instead of this property, if possible. However, unlike CSS Transforms, `zoom` affects the layout size of the element.\n   *\n   * **Syntax**: `normal | reset | <number> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **1**  |   n/a   | **3.1** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/zoom\n   */\n  zoom?: Property.Zoom | undefined;\n}\n\nexport interface StandardShorthandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`all`** shorthand CSS property resets all of an element's properties except `unicode-bidi`, `direction`, and CSS Custom Properties. It can set properties to their initial or inherited values, or to the values specified in another cascade layer or stylesheet origin.\n   *\n   * **Syntax**: `initial | inherit | unset | revert | revert-layer`\n   *\n   * **Initial value**: There is no practical initial value for it.\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **37** | **27**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/all\n   */\n  all?: Property.All | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation\n   */\n  animation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`animation-range`** CSS shorthand property is used to set the start and end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start and end.\n   *\n   * **Syntax**: `[ <'animation-range-start'> <'animation-range-end'>? ]#`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range\n   */\n  animationRange?: Property.AnimationRange<TLength> | undefined;\n  /**\n   * The **`background`** shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.\n   *\n   * **Syntax**: `[ <bg-layer> , ]* <final-bg-layer>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background\n   */\n  background?: Property.Background<TLength> | undefined;\n  /**\n   * The **`background-position`** CSS property sets the initial position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `<bg-position>#`\n   *\n   * **Initial value**: `0% 0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position\n   */\n  backgroundPosition?: Property.BackgroundPosition<TLength> | undefined;\n  /**\n   * The **`border`** shorthand CSS property sets an element's border. It sets the values of `border-width`, `border-style`, and `border-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border\n   */\n  border?: Property.Border<TLength> | undefined;\n  /**\n   * The **`border-block`** CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block\n   */\n  borderBlock?: Property.BorderBlock<TLength> | undefined;\n  /**\n   * The **`border-block-end`** CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end\n   */\n  borderBlockEnd?: Property.BorderBlockEnd<TLength> | undefined;\n  /**\n   * The **`border-block-start`** CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start\n   */\n  borderBlockStart?: Property.BorderBlockStart<TLength> | undefined;\n  /**\n   * The **`border-bottom`** shorthand CSS property sets an element's bottom border. It sets the values of `border-bottom-width`, `border-bottom-style` and `border-bottom-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom\n   */\n  borderBottom?: Property.BorderBottom<TLength> | undefined;\n  /**\n   * The **`border-color`** shorthand CSS property sets the color of an element's border.\n   *\n   * **Syntax**: `<color>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-color\n   */\n  borderColor?: Property.BorderColor | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * | Chrome  |  Firefox  | Safari  |  Edge  |   IE   |\n   * | :-----: | :-------: | :-----: | :----: | :----: |\n   * | **16**  |  **15**   |  **6**  | **12** | **11** |\n   * | 7 _-x-_ | 3.5 _-x-_ | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image\n   */\n  borderImage?: Property.BorderImage | undefined;\n  /**\n   * The **`border-inline`** CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline\n   */\n  borderInline?: Property.BorderInline<TLength> | undefined;\n  /**\n   * The **`border-inline-end`** CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end\n   */\n  borderInlineEnd?: Property.BorderInlineEnd<TLength> | undefined;\n  /**\n   * The **`border-inline-start`** CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start\n   */\n  borderInlineStart?: Property.BorderInlineStart<TLength> | undefined;\n  /**\n   * The **`border-left`** shorthand CSS property sets all the properties of an element's left border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left\n   */\n  borderLeft?: Property.BorderLeft<TLength> | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-radius\n   */\n  borderRadius?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`border-right`** shorthand CSS property sets all the properties of an element's right border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right\n   */\n  borderRight?: Property.BorderRight<TLength> | undefined;\n  /**\n   * The **`border-style`** shorthand CSS property sets the line style for all four sides of an element's border.\n   *\n   * **Syntax**: `<line-style>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-style\n   */\n  borderStyle?: Property.BorderStyle | undefined;\n  /**\n   * The **`border-top`** shorthand CSS property sets all the properties of an element's top border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top\n   */\n  borderTop?: Property.BorderTop<TLength> | undefined;\n  /**\n   * The **`border-width`** shorthand CSS property sets the width of an element's border.\n   *\n   * **Syntax**: `<line-width>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-width\n   */\n  borderWidth?: Property.BorderWidth<TLength> | undefined;\n  /** **Syntax**: `<'caret-color'> || <'caret-shape'>` */\n  caret?: Property.Caret | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule\n   */\n  columnRule?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/columns\n   */\n  columns?: Property.Columns<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-size`** CSS shorthand property sets the size of an element that a browser will use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `[ auto? [ none | <length> ] ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **83** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size\n   */\n  containIntrinsicSize?: Property.ContainIntrinsicSize<TLength> | undefined;\n  /**\n   * The **container** shorthand CSS property establishes the element as a query container and specifies the name or name for the containment context used in a container query.\n   *\n   * **Syntax**: `<'container-name'> [ / <'container-type'> ]?`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container\n   */\n  container?: Property.Container | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex\n   */\n  flex?: Property.Flex<TLength> | undefined;\n  /**\n   * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-flow\n   */\n  flexFlow?: Property.FlexFlow | undefined;\n  /**\n   * The **`font`** CSS shorthand property sets all the different properties of an element's font. Alternatively, it sets an element's font to a system font.\n   *\n   * **Syntax**: `[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font\n   */\n  font?: Property.Font | undefined;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'row-gap'> <'column-gap'>?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/gap\n   */\n  gap?: Property.Gap<TLength> | undefined;\n  /**\n   * The **`grid`** CSS property is a shorthand property that sets all of the explicit and implicit grid properties in a single declaration.\n   *\n   * **Syntax**: `<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid\n   */\n  grid?: Property.Grid | undefined;\n  /**\n   * The **`grid-area`** CSS shorthand property specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]{0,3}`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-area\n   */\n  gridArea?: Property.GridArea | undefined;\n  /**\n   * The **`grid-column`** CSS shorthand property specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column\n   */\n  gridColumn?: Property.GridColumn | undefined;\n  /**\n   * The **`grid-row`** CSS shorthand property specifies a grid item's size and location within a grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row\n   */\n  gridRow?: Property.GridRow | undefined;\n  /**\n   * The **`grid-template`** CSS property is a shorthand property for defining grid columns, grid rows, and grid areas.\n   *\n   * **Syntax**: `none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template\n   */\n  gridTemplate?: Property.GridTemplate | undefined;\n  /**\n   * The **`inset`** CSS property is a shorthand that corresponds to the `top`, `right`, `bottom`, and/or `left` properties. It has the same multi-value syntax of the `margin` shorthand.\n   *\n   * **Syntax**: `<'top'>{1,4}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset\n   */\n  inset?: Property.Inset<TLength> | undefined;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block\n   */\n  insetBlock?: Property.InsetBlock<TLength> | undefined;\n  /**\n   * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline\n   */\n  insetInline?: Property.InsetInline<TLength> | undefined;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  lineClamp?: Property.LineClamp | undefined;\n  /**\n   * The **`list-style`** CSS shorthand property allows you to set all the list style properties at once.\n   *\n   * **Syntax**: `<'list-style-type'> || <'list-style-position'> || <'list-style-image'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style\n   */\n  listStyle?: Property.ListStyle | undefined;\n  /**\n   * The **`margin`** CSS shorthand property sets the margin area on all four sides of an element.\n   *\n   * **Syntax**: `[ <length> | <percentage> | auto ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin\n   */\n  margin?: Property.Margin<TLength> | undefined;\n  /**\n   * The **`margin-block`** CSS shorthand property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block\n   */\n  marginBlock?: Property.MarginBlock<TLength> | undefined;\n  /**\n   * The **`margin-inline`** CSS shorthand property is a shorthand property that defines both the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline\n   */\n  marginInline?: Property.MarginInline<TLength> | undefined;\n  /**\n   * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `<mask-layer>#`\n   *\n   * | Chrome | Firefox |  Safari   | Edge  | IE  |\n   * | :----: | :-----: | :-------: | :---: | :-: |\n   * | **1**  | **53**  | **15.4**  | 12-79 | No  |\n   * |        |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask\n   */\n  mask?: Property.Mask<TLength> | undefined;\n  /**\n   * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   *\n   * |              Chrome              | Firefox |             Safari             | Edge | IE  |\n   * | :------------------------------: | :-----: | :----------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image)_ |   No    |            **17.2**            | n/a  | No  |\n   * |                                  |         | 3.1 _(-webkit-mask-box-image)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border\n   */\n  maskBorder?: Property.MaskBorder | undefined;\n  /**\n   * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari | Edge | IE  |\n   * | :-----------: | :-----: | :----: | :--: | :-: |\n   * |    **55**     | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  motion?: Property.Offset<TLength> | undefined;\n  /**\n   * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari | Edge | IE  |\n   * | :-----------: | :-----: | :----: | :--: | :-: |\n   * |    **55**     | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  offset?: Property.Offset<TLength> | undefined;\n  /**\n   * The **`outline`** CSS shorthand property sets most of the outline properties in a single declaration.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :------: | :----: | :---: |\n   * | **94** | **88**  | **16.4** | **94** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline\n   */\n  outline?: Property.Outline<TLength> | undefined;\n  /**\n   * The **`overflow`** CSS shorthand property sets the desired behavior for an element's overflow — i.e. when an element's content is too big to fit in its block formatting context — in both directions.\n   *\n   * **Syntax**: `[ visible | hidden | clip | scroll | auto ]{1,2}`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow\n   */\n  overflow?: Property.Overflow | undefined;\n  /**\n   * The **`overscroll-behavior`** CSS property sets what a browser does when reaching the boundary of a scrolling area. It's a shorthand for `overscroll-behavior-x` and `overscroll-behavior-y`.\n   *\n   * **Syntax**: `[ contain | none | auto ]{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior\n   */\n  overscrollBehavior?: Property.OverscrollBehavior | undefined;\n  /**\n   * The **`padding`** CSS shorthand property sets the padding area on all four sides of an element at once.\n   *\n   * **Syntax**: `[ <length> | <percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding\n   */\n  padding?: Property.Padding<TLength> | undefined;\n  /**\n   * The **`padding-block`** CSS shorthand property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block\n   */\n  paddingBlock?: Property.PaddingBlock<TLength> | undefined;\n  /**\n   * The **`padding-inline`** CSS shorthand property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline\n   */\n  paddingInline?: Property.PaddingInline<TLength> | undefined;\n  /**\n   * The **`place-content`** CSS shorthand property allows you to align content along both the block and inline directions at once (i.e. the `align-content` and `justify-content` properties) in a relevant layout system such as Grid or Flexbox.\n   *\n   * **Syntax**: `<'align-content'> <'justify-content'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **9**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-content\n   */\n  placeContent?: Property.PlaceContent | undefined;\n  /**\n   * The CSS **`place-items`** shorthand property allows you to align items along both the block and inline directions at once (i.e. the `align-items` and `justify-items` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not set, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-items'> <'justify-items'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-items\n   */\n  placeItems?: Property.PlaceItems | undefined;\n  /**\n   * The **`place-self`** CSS shorthand property allows you to align an individual item in both the block and inline directions at once (i.e. the `align-self` and `justify-self` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not present, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-self'> <'justify-self'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-self\n   */\n  placeSelf?: Property.PlaceSelf | undefined;\n  /**\n   * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * | Chrome | Firefox |          Safari           | Edge | IE  |\n   * | :----: | :-----: | :-----------------------: | :--: | :-: |\n   * | **69** | **90**  |         **14.1**          | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  scrollMargin?: Property.ScrollMargin<TLength> | undefined;\n  /**\n   * The `scroll-margin-block` shorthand property sets the scroll margins of an element in the block dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block\n   */\n  scrollMarginBlock?: Property.ScrollMarginBlock<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline` shorthand property sets the scroll margins of an element in the inline dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline\n   */\n  scrollMarginInline?: Property.ScrollMarginInline<TLength> | undefined;\n  /**\n   * The **`scroll-padding`** shorthand property sets scroll padding on all sides of an element at once, much like the `padding` property does for padding on an element.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding\n   */\n  scrollPadding?: Property.ScrollPadding<TLength> | undefined;\n  /**\n   * The `scroll-padding-block` shorthand property sets the scroll padding of an element in the block dimension.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block\n   */\n  scrollPaddingBlock?: Property.ScrollPaddingBlock<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline` shorthand property sets the scroll padding of an element in the inline dimension.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline\n   */\n  scrollPaddingInline?: Property.ScrollPaddingInline<TLength> | undefined;\n  /**\n   * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * | Chrome | Firefox |          Safari           | Edge | IE  |\n   * | :----: | :-----: | :-----------------------: | :--: | :-: |\n   * | **69** |  68-90  |         **14.1**          | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  scrollSnapMargin?: Property.ScrollMargin<TLength> | undefined;\n  /**\n   * The **`scroll-timeline`** CSS shorthand property defines a name that can be used to identify the source element of a scroll timeline, along with the scrollbar axis that should provide the timeline.\n   *\n   * **Syntax**: `[ <'scroll-timeline-name'> <'scroll-timeline-axis'>? ]#`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline\n   */\n  scrollTimeline?: Property.ScrollTimeline | undefined;\n  /**\n   * The **`text-decoration`** shorthand CSS property sets the appearance of decorative lines on text. It is a shorthand for `text-decoration-line`, `text-decoration-color`, `text-decoration-style`, and the newer `text-decoration-thickness` property.\n   *\n   * **Syntax**: `<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration\n   */\n  textDecoration?: Property.TextDecoration<TLength> | undefined;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis\n   */\n  textEmphasis?: Property.TextEmphasis | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition\n   */\n  transition?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`view-timeline`** CSS shorthand property is used to define a _named view progress timeline_, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). `view-timeline` is set on the subject.\n   *\n   * **Syntax**: `[ <'view-timeline-name'> <'view-timeline-axis'>? ]#`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline\n   */\n  viewTimeline?: Property.ViewTimeline | undefined;\n}\n\nexport interface StandardProperties<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardLonghandProperties<TLength, TTime>,\n    StandardShorthandProperties<TLength, TTime> {}\n\nexport interface VendorLonghandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  MozAnimationDelay?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  MozAnimationDirection?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  MozAnimationDuration?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  MozAnimationFillMode?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  MozAnimationIterationCount?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  MozAnimationName?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  MozAnimationPlayState?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  MozAnimationTimingFunction?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  MozAppearance?: Property.MozAppearance | undefined;\n  /**\n   * The **`-moz-binding`** CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element.\n   *\n   * **Syntax**: `<url> | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBinding?: Property.MozBinding | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-bottom-colors`** CSS property sets a list of colors for the bottom border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderBottomColors?: Property.MozBorderBottomColors | undefined;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  MozBorderEndColor?: Property.BorderInlineEndColor | undefined;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderEndStyle?: Property.BorderInlineEndStyle | undefined;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  MozBorderEndWidth?: Property.BorderInlineEndWidth<TLength> | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-left-colors`** CSS property sets a list of colors for the left border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderLeftColors?: Property.MozBorderLeftColors | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-right-colors`** CSS property sets a list of colors for the right border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderRightColors?: Property.MozBorderRightColors | undefined;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  MozBorderStartColor?: Property.BorderInlineStartColor | undefined;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderStartStyle?: Property.BorderInlineStartStyle | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-top-colors`** CSS property sets a list of colors for the top border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozBorderTopColors?: Property.MozBorderTopColors | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  MozBoxSizing?: Property.BoxSizing | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  MozColumnCount?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  MozColumnFill?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  MozColumnRuleColor?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  MozColumnRuleStyle?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  MozColumnRuleWidth?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  MozColumnWidth?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`-moz-context-properties`** property can be used within privileged contexts in Firefox to share the values of specified properties of the element with a child SVG image.\n   *\n   * **Syntax**: `none | [ fill | fill-opacity | stroke | stroke-opacity ]#`\n   *\n   * **Initial value**: `none`\n   */\n  MozContextProperties?: Property.MozContextProperties | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  MozFontFeatureSettings?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   */\n  MozFontLanguageOverride?: Property.FontLanguageOverride | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  MozHyphens?: Property.Hyphens | undefined;\n  /**\n   * For certain XUL elements and pseudo-elements that use an image from the `list-style-image` property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  MozImageRegion?: Property.MozImageRegion | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozMarginEnd?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozMarginStart?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * The **`-moz-orient`** CSS property specifies the orientation of the element to which it's applied.\n   *\n   * **Syntax**: `inline | block | horizontal | vertical`\n   *\n   * **Initial value**: `inline`\n   */\n  MozOrient?: Property.MozOrient | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  MozOsxFontSmoothing?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomleft`** CSS property can be used to round the bottom-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusBottomleft?: Property.MozOutlineRadiusBottomleft<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomright`** CSS property can be used to round the bottom-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusBottomright?: Property.MozOutlineRadiusBottomright<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topleft`** CSS property can be used to round the top-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusTopleft?: Property.MozOutlineRadiusTopleft<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topright`** CSS property can be used to round the top-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  MozOutlineRadiusTopright?: Property.MozOutlineRadiusTopright<TLength> | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozPaddingEnd?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  MozPaddingStart?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * **`-moz-stack-sizing`** is an extended CSS property. Normally, a `<xul:stack>` will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible.\n   *\n   * **Syntax**: `ignore | stretch-to-fit`\n   *\n   * **Initial value**: `stretch-to-fit`\n   */\n  MozStackSizing?: Property.MozStackSizing | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   */\n  MozTabSize?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`-moz-text-blink`** non-standard Mozilla CSS extension specifies the blink mode.\n   *\n   * **Syntax**: `none | blink`\n   *\n   * **Initial value**: `none`\n   */\n  MozTextBlink?: Property.MozTextBlink | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  MozTextSizeAdjust?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`-moz-user-focus`** CSS property is used to indicate whether an element can have the focus.\n   *\n   * **Syntax**: `ignore | normal | select-after | select-before | select-menu | select-same | select-all | none`\n   *\n   * **Initial value**: `none`\n   */\n  MozUserFocus?: Property.MozUserFocus | undefined;\n  /**\n   * The **`user-modify`** property has no effect in Firefox. It was originally planned to determine whether or not the content of an element can be edited by a user.\n   *\n   * **Syntax**: `read-only | read-write | write-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  MozUserModify?: Property.MozUserModify | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  MozUserSelect?: Property.UserSelect | undefined;\n  /**\n   * The **`-moz-window-dragging`** CSS property specifies whether a window is draggable or not. It only works in Chrome code, and only on Mac OS X.\n   *\n   * **Syntax**: `drag | no-drag`\n   *\n   * **Initial value**: `drag`\n   */\n  MozWindowDragging?: Property.MozWindowDragging | undefined;\n  /**\n   * The **`-moz-window-shadow`** CSS property specifies whether a window will have a shadow. It only works on Mac OS X.\n   *\n   * **Syntax**: `default | menu | tooltip | sheet | none`\n   *\n   * **Initial value**: `default`\n   */\n  MozWindowShadow?: Property.MozWindowShadow | undefined;\n  /**\n   * The **`-ms-accelerator`** CSS property is a Microsoft extension that sets or retrieves a string indicating whether the object represents a keyboard shortcut.\n   *\n   * **Syntax**: `false | true`\n   *\n   * **Initial value**: `false`\n   */\n  msAccelerator?: Property.MsAccelerator | undefined;\n  /**\n   * The **`-ms-block-progression`** CSS property is a Microsoft extension that specifies the block progression and layout orientation.\n   *\n   * **Syntax**: `tb | rl | bt | lr`\n   *\n   * **Initial value**: `tb`\n   */\n  msBlockProgression?: Property.MsBlockProgression | undefined;\n  /**\n   * The **`-ms-content-zoom-chaining`** CSS property is a Microsoft extension specifying the zoom behavior that occurs when a user hits the zoom limit during page manipulation.\n   *\n   * **Syntax**: `none | chained`\n   *\n   * **Initial value**: `none`\n   */\n  msContentZoomChaining?: Property.MsContentZoomChaining | undefined;\n  /**\n   * The **`-ms-content-zoom-limit-max`** CSS property is a Microsoft extension that specifies the selected elements' maximum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `400%`\n   */\n  msContentZoomLimitMax?: Property.MsContentZoomLimitMax | undefined;\n  /**\n   * The **`-ms-content-zoom-limit-min`** CSS property is a Microsoft extension that specifies the minimum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `100%`\n   */\n  msContentZoomLimitMin?: Property.MsContentZoomLimitMin | undefined;\n  /**\n   * The **`-ms-content-zoom-snap-points`** CSS property is a Microsoft extension that specifies where zoom snap-points are located.\n   *\n   * **Syntax**: `snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )`\n   *\n   * **Initial value**: `snapInterval(0%, 100%)`\n   */\n  msContentZoomSnapPoints?: Property.MsContentZoomSnapPoints | undefined;\n  /**\n   * The **`-ms-content-zoom-snap-type`** CSS property is a Microsoft extension that specifies how zooming is affected by defined snap-points.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  msContentZoomSnapType?: Property.MsContentZoomSnapType | undefined;\n  /**\n   * The **`-ms-content-zooming`** CSS property is a Microsoft extension that specifies whether zooming is enabled.\n   *\n   * **Syntax**: `none | zoom`\n   *\n   * **Initial value**: zoom for the top level element, none for all other elements\n   */\n  msContentZooming?: Property.MsContentZooming | undefined;\n  /**\n   * The `-ms-filter` CSS property is a Microsoft extension that sets or retrieves the filter or collection of filters applied to an object.\n   *\n   * **Syntax**: `<string>`\n   *\n   * **Initial value**: \"\" (the empty string)\n   */\n  msFilter?: Property.MsFilter | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  msFlexDirection?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  msFlexPositive?: Property.FlexGrow | undefined;\n  /**\n   * The **`-ms-flow-from`** CSS property is a Microsoft extension that gets or sets a value identifying a region container in the document that accepts the content flow from the data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  msFlowFrom?: Property.MsFlowFrom | undefined;\n  /**\n   * The **`-ms-flow-into`** CSS property is a Microsoft extension that gets or sets a value identifying an iframe container in the document that serves as the region's data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  msFlowInto?: Property.MsFlowInto | undefined;\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list>`\n   *\n   * **Initial value**: `none`\n   */\n  msGridColumns?: Property.MsGridColumns<TLength> | undefined;\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list>`\n   *\n   * **Initial value**: `none`\n   */\n  msGridRows?: Property.MsGridRows<TLength> | undefined;\n  /**\n   * The **`-ms-high-contrast-adjust`** CSS property is a Microsoft extension that gets or sets a value indicating whether to override any CSS properties that would have been set in high contrast mode.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  msHighContrastAdjust?: Property.MsHighContrastAdjust | undefined;\n  /**\n   * The **`-ms-hyphenate-limit-chars`** CSS property is a Microsoft extension that specifies one to three values indicating the minimum number of characters in a hyphenated word. If the word does not meet the required minimum number of characters in the word, before the hyphen, or after the hyphen, then the word is not hyphenated.\n   *\n   * **Syntax**: `auto | <integer>{1,3}`\n   *\n   * **Initial value**: `auto`\n   */\n  msHyphenateLimitChars?: Property.MsHyphenateLimitChars | undefined;\n  /**\n   * The **`-ms-hyphenate-limit-lines`** CSS property is a Microsoft extension specifying the maximum number of consecutive lines in an element that may be ended with a hyphenated word.\n   *\n   * **Syntax**: `no-limit | <integer>`\n   *\n   * **Initial value**: `no-limit`\n   */\n  msHyphenateLimitLines?: Property.MsHyphenateLimitLines | undefined;\n  /**\n   * The `**-ms-hyphenate-limit-zone**` CSS property is a Microsoft extension specifying the width of the hyphenation zone.\n   *\n   * **Syntax**: `<percentage> | <length>`\n   *\n   * **Initial value**: `0`\n   */\n  msHyphenateLimitZone?: Property.MsHyphenateLimitZone<TLength> | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  msHyphens?: Property.Hyphens | undefined;\n  /**\n   * The **`-ms-ime-align`** CSS property is a Microsoft extension aligning the Input Method Editor (IME) candidate window box relative to the element on which the IME composition is active. The extension is implemented in Microsoft Edge and Internet Explorer 11.\n   *\n   * **Syntax**: `auto | after`\n   *\n   * **Initial value**: `auto`\n   */\n  msImeAlign?: Property.MsImeAlign | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  msLineBreak?: Property.LineBreak | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  msOrder?: Property.Order | undefined;\n  /**\n   * The **`-ms-overflow-style`** CSS property is a Microsoft extension controlling the behavior of scrollbars when the content of an element overflows.\n   *\n   * **Syntax**: `auto | none | scrollbar | -ms-autohiding-scrollbar`\n   *\n   * **Initial value**: `auto`\n   */\n  msOverflowStyle?: Property.MsOverflowStyle | undefined;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  msOverflowX?: Property.OverflowX | undefined;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  msOverflowY?: Property.OverflowY | undefined;\n  /**\n   * The `**-ms-scroll-chaining**` CSS property is a Microsoft extension that specifies the scrolling behavior that occurs when a user hits the scroll limit during a manipulation.\n   *\n   * **Syntax**: `chained | none`\n   *\n   * **Initial value**: `chained`\n   */\n  msScrollChaining?: Property.MsScrollChaining | undefined;\n  /**\n   * The `**-ms-scroll-limit-x-max**` CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  msScrollLimitXMax?: Property.MsScrollLimitXMax<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-x-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  msScrollLimitXMin?: Property.MsScrollLimitXMin<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-y-max`** CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  msScrollLimitYMax?: Property.MsScrollLimitYMax<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-y-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  msScrollLimitYMin?: Property.MsScrollLimitYMin<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-rails`** CSS property is a Microsoft extension that specifies whether scrolling locks to the primary axis of motion.\n   *\n   * **Syntax**: `none | railed`\n   *\n   * **Initial value**: `railed`\n   */\n  msScrollRails?: Property.MsScrollRails | undefined;\n  /**\n   * The **`-ms-scroll-snap-points-x`** CSS property is a Microsoft extension that specifies where snap-points will be located along the x-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  msScrollSnapPointsX?: Property.MsScrollSnapPointsX | undefined;\n  /**\n   * The **`-ms-scroll-snap-points-y`** CSS property is a Microsoft extension that specifies where snap-points will be located along the y-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  msScrollSnapPointsY?: Property.MsScrollSnapPointsY | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  msScrollSnapType?: Property.MsScrollSnapType | undefined;\n  /**\n   * The **`-ms-scroll-translation`** CSS property is a Microsoft extension that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.\n   *\n   * **Syntax**: `none | vertical-to-horizontal`\n   *\n   * **Initial value**: `none`\n   */\n  msScrollTranslation?: Property.MsScrollTranslation | undefined;\n  /**\n   * The **`-ms-scrollbar-3dlight-color`** CSS property is a Microsoft extension specifying the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  msScrollbar3dlightColor?: Property.MsScrollbar3dlightColor | undefined;\n  /**\n   * The **`-ms-scrollbar-arrow-color`** CSS property is a Microsoft extension that specifies the color of the arrow elements of a scroll arrow.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ButtonText`\n   */\n  msScrollbarArrowColor?: Property.MsScrollbarArrowColor | undefined;\n  /**\n   * The `**-ms-scrollbar-base-color**` CSS property is a Microsoft extension that specifies the base color of the main elements of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  msScrollbarBaseColor?: Property.MsScrollbarBaseColor | undefined;\n  /**\n   * The **`-ms-scrollbar-darkshadow-color`** CSS property is a Microsoft extension that specifies the color of a scroll bar's gutter.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  msScrollbarDarkshadowColor?: Property.MsScrollbarDarkshadowColor | undefined;\n  /**\n   * The `**-ms-scrollbar-face-color**` CSS property is a Microsoft extension that specifies the color of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDFace`\n   */\n  msScrollbarFaceColor?: Property.MsScrollbarFaceColor | undefined;\n  /**\n   * The `**-ms-scrollbar-highlight-color**` CSS property is a Microsoft extension that specifies the color of the slider tray, the top and left edges of the scroll box, and the scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDHighlight`\n   */\n  msScrollbarHighlightColor?: Property.MsScrollbarHighlightColor | undefined;\n  /**\n   * The **`-ms-scrollbar-shadow-color`** CSS property is a Microsoft extension that specifies the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  msScrollbarShadowColor?: Property.MsScrollbarShadowColor | undefined;\n  /**\n   * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `Scrollbar`\n   */\n  msScrollbarTrackColor?: Property.MsScrollbarTrackColor | undefined;\n  /**\n   * The **`-ms-text-autospace`** CSS property is a Microsoft extension that specifies the autospacing and narrow space width adjustment of text.\n   *\n   * **Syntax**: `none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space`\n   *\n   * **Initial value**: `none`\n   */\n  msTextAutospace?: Property.MsTextAutospace | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  msTextCombineHorizontal?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   */\n  msTextOverflow?: Property.TextOverflow | undefined;\n  /**\n   * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   */\n  msTouchAction?: Property.TouchAction | undefined;\n  /**\n   * The **`-ms-touch-select`** CSS property is a Microsoft extension that toggles the gripper visual elements that enable touch text selection.\n   *\n   * **Syntax**: `grippers | none`\n   *\n   * **Initial value**: `grippers`\n   */\n  msTouchSelect?: Property.MsTouchSelect | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  msTransform?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  msTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  msTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  msTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  msTransitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  msTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `none | element | text`\n   *\n   * **Initial value**: `text`\n   */\n  msUserSelect?: Property.MsUserSelect | undefined;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   */\n  msWordBreak?: Property.WordBreak | undefined;\n  /**\n   * The **`-ms-wrap-flow`** CSS property is a Microsoft extension that specifies how exclusions impact inline content within block-level elements.\n   *\n   * **Syntax**: `auto | both | start | end | maximum | clear`\n   *\n   * **Initial value**: `auto`\n   */\n  msWrapFlow?: Property.MsWrapFlow | undefined;\n  /**\n   * The **`-ms-wrap-margin`** CSS property is a Microsoft extension that specifies a margin that offsets the inner wrap shape from other shapes.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  msWrapMargin?: Property.MsWrapMargin<TLength> | undefined;\n  /**\n   * The **`-ms-wrap-through`** CSS property is a Microsoft extension that specifies how content should wrap around an exclusion element.\n   *\n   * **Syntax**: `wrap | none`\n   *\n   * **Initial value**: `wrap`\n   */\n  msWrapThrough?: Property.MsWrapThrough | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  msWritingMode?: Property.WritingMode | undefined;\n  /**\n   * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitAlignContent?: Property.AlignContent | undefined;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitAlignItems?: Property.AlignItems | undefined;\n  /**\n   * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitAlignSelf?: Property.AlignSelf | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitAnimationDelay?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitAnimationDirection?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitAnimationDuration?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitAnimationFillMode?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  WebkitAnimationIterationCount?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitAnimationName?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  WebkitAnimationPlayState?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  WebkitAnimationTimingFunction?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield | -apple-pay-button`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  WebkitAppearance?: Property.WebkitAppearance | undefined;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBackdropFilter?: Property.BackdropFilter | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   */\n  WebkitBackfaceVisibility?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   */\n  WebkitBackgroundClip?: Property.BackgroundClip | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   */\n  WebkitBackgroundOrigin?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  WebkitBackgroundSize?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitBorderBeforeColor?: Property.WebkitBorderBeforeColor | undefined;\n  /**\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBorderBeforeStyle?: Property.WebkitBorderBeforeStyle | undefined;\n  /**\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  WebkitBorderBeforeWidth?: Property.WebkitBorderBeforeWidth<TLength> | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderBottomLeftRadius?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderBottomRightRadius?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   */\n  WebkitBorderImageSlice?: Property.BorderImageSlice | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderTopLeftRadius?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitBorderTopRightRadius?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   */\n  WebkitBoxDecorationBreak?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`-webkit-box-reflect`** CSS property lets you reflect the content of an element in one specific direction.\n   *\n   * **Syntax**: `[ above | below | right | left ]? <length>? <image>?`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBoxReflect?: Property.WebkitBoxReflect<TLength> | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitBoxShadow?: Property.BoxShadow | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  WebkitBoxSizing?: Property.BoxSizing | undefined;\n  /**\n   * The **`clip-path`** CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitClipPath?: Property.ClipPath | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitColumnCount?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  WebkitColumnFill?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitColumnRuleColor?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitColumnRuleStyle?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  WebkitColumnRuleWidth?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitColumnSpan?: Property.ColumnSpan | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitColumnWidth?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitFilter?: Property.Filter | undefined;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitFlexBasis?: Property.FlexBasis<TLength> | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  WebkitFlexDirection?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitFlexGrow?: Property.FlexGrow | undefined;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   */\n  WebkitFlexShrink?: Property.FlexShrink | undefined;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   */\n  WebkitFlexWrap?: Property.FlexWrap | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitFontFeatureSettings?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitFontKerning?: Property.FontKerning | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitFontSmoothing?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitFontVariantLigatures?: Property.FontVariantLigatures | undefined;\n  /**\n   * The **`hyphenate-character`** CSS property sets the character (or string) used at the end of a line before a hyphenation break.\n   *\n   * **Syntax**: `auto | <string>`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitHyphenateCharacter?: Property.HyphenateCharacter | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  WebkitHyphens?: Property.Hyphens | undefined;\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitInitialLetter?: Property.InitialLetter | undefined;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   */\n  WebkitJustifyContent?: Property.JustifyContent | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitLineBreak?: Property.LineBreak | undefined;\n  /**\n   * The **`-webkit-line-clamp`** CSS property allows limiting of the contents of a block to the specified number of lines.\n   *\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitLineClamp?: Property.WebkitLineClamp | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMarginEnd?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMarginStart?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * If a `mask-image` is specified, `-webkit-mask-attachment` determines whether the mask image's position is fixed within the viewport, or scrolls along with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   */\n  WebkitMaskAttachment?: Property.WebkitMaskAttachment | undefined;\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMaskBoxImageOutset?: Property.MaskBorderOutset<TLength> | undefined;\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   */\n  WebkitMaskBoxImageRepeat?: Property.MaskBorderRepeat | undefined;\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitMaskBoxImageSlice?: Property.MaskBorderSlice | undefined;\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitMaskBoxImageSource?: Property.MaskBorderSource | undefined;\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitMaskBoxImageWidth?: Property.MaskBorderWidth<TLength> | undefined;\n  /**\n   * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <box> | border | padding | content | text ]#`\n   *\n   * **Initial value**: `border`\n   */\n  WebkitMaskClip?: Property.WebkitMaskClip | undefined;\n  /**\n   * The **`-webkit-mask-composite`** property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the `-webkit-mask-image` property.\n   *\n   * **Syntax**: `<composite-style>#`\n   *\n   * **Initial value**: `source-over`\n   */\n  WebkitMaskComposite?: Property.WebkitMaskComposite | undefined;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the `mask-mode` property.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitMaskImage?: Property.WebkitMaskImage | undefined;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `[ <box> | border | padding | content ]#`\n   *\n   * **Initial value**: `padding`\n   */\n  WebkitMaskOrigin?: Property.WebkitMaskOrigin | undefined;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `0% 0%`\n   */\n  WebkitMaskPosition?: Property.WebkitMaskPosition<TLength> | undefined;\n  /**\n   * The `-webkit-mask-position-x` CSS property sets the initial horizontal position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  WebkitMaskPositionX?: Property.WebkitMaskPositionX<TLength> | undefined;\n  /**\n   * The `-webkit-mask-position-y` CSS property sets the initial vertical position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | top | center | bottom ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  WebkitMaskPositionY?: Property.WebkitMaskPositionY<TLength> | undefined;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   */\n  WebkitMaskRepeat?: Property.WebkitMaskRepeat | undefined;\n  /**\n   * The `-webkit-mask-repeat-x` property specifies whether and how a mask image is repeated (tiled) horizontally.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  WebkitMaskRepeatX?: Property.WebkitMaskRepeatX | undefined;\n  /**\n   * The `-webkit-mask-repeat-y` property sets whether and how a mask image is repeated (tiled) vertically.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  WebkitMaskRepeatY?: Property.WebkitMaskRepeatY | undefined;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  WebkitMaskSize?: Property.WebkitMaskSize<TLength> | undefined;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitMaxInlineSize?: Property.MaxInlineSize<TLength> | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitOrder?: Property.Order | undefined;\n  /**\n   * The `-webkit-overflow-scrolling` CSS property controls whether or not touch devices use momentum-based scrolling for a given element.\n   *\n   * **Syntax**: `auto | touch`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitOverflowScrolling?: Property.WebkitOverflowScrolling | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitPaddingEnd?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitPaddingStart?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitPerspective?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  WebkitPerspectiveOrigin?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   */\n  WebkitPrintColorAdjust?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`ruby-position`** CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (`over`), under it (`under`), or between the characters on their right side (`inter-character`).\n   *\n   * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`\n   *\n   * **Initial value**: `alternate`\n   */\n  WebkitRubyPosition?: Property.RubyPosition | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitScrollSnapType?: Property.ScrollSnapType | undefined;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitShapeMargin?: Property.ShapeMargin<TLength> | undefined;\n  /**\n   * **`-webkit-tap-highlight-color`** is a non-standard CSS property that sets the color of the highlight that appears over a link while it's being tapped. The highlighting indicates to the user that their tap is being successfully recognized, and indicates which element they're tapping on.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `black`\n   */\n  WebkitTapHighlightColor?: Property.WebkitTapHighlightColor | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTextCombine?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextDecorationColor?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTextDecorationLine?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   */\n  WebkitTextDecorationSkip?: Property.TextDecorationSkip | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   */\n  WebkitTextDecorationStyle?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextEmphasisColor?: Property.TextEmphasisColor | undefined;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   */\n  WebkitTextEmphasisPosition?: Property.TextEmphasisPosition | undefined;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTextEmphasisStyle?: Property.TextEmphasisStyle | undefined;\n  /**\n   * The **`-webkit-text-fill-color`** CSS property specifies the fill color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextFillColor?: Property.WebkitTextFillColor | undefined;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   */\n  WebkitTextOrientation?: Property.TextOrientation | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  WebkitTextSizeAdjust?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`-webkit-text-stroke-color`** CSS property specifies the stroke color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  WebkitTextStrokeColor?: Property.WebkitTextStrokeColor | undefined;\n  /**\n   * The **`-webkit-text-stroke-width`** CSS property specifies the width of the stroke for text.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  WebkitTextStrokeWidth?: Property.WebkitTextStrokeWidth<TLength> | undefined;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitTextUnderlinePosition?: Property.TextUnderlinePosition | undefined;\n  /**\n   * The `-webkit-touch-callout` CSS property controls the display of the default callout shown when you touch and hold a touch target.\n   *\n   * **Syntax**: `default | none`\n   *\n   * **Initial value**: `default`\n   */\n  WebkitTouchCallout?: Property.WebkitTouchCallout | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  WebkitTransform?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  WebkitTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   */\n  WebkitTransformStyle?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  WebkitTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  WebkitTransitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  WebkitTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * **Syntax**: `read-only | read-write | read-write-plaintext-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  WebkitUserModify?: Property.WebkitUserModify | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  WebkitUserSelect?: Property.UserSelect | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  WebkitWritingMode?: Property.WritingMode | undefined;\n}\n\nexport interface VendorShorthandProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  MozAnimation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  MozBorderImage?: Property.BorderImage | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  MozColumnRule?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  MozColumns?: Property.Columns<TLength> | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-outline-radius`** CSS shorthand property can be used to give an element's `outline` rounded corners.\n   *\n   * **Syntax**: `<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?`\n   */\n  MozOutlineRadius?: Property.MozOutlineRadius<TLength> | undefined;\n  /**\n   * The **`-ms-content-zoom-limit`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-limit-min` and `-ms-content-zoom-limit-max` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>`\n   */\n  msContentZoomLimit?: Property.MsContentZoomLimit | undefined;\n  /**\n   * The **`-ms-content-zoom-snap`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-snap-type` and `-ms-content-zoom-snap-points` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>`\n   */\n  msContentZoomSnap?: Property.MsContentZoomSnap | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  msFlex?: Property.Flex<TLength> | undefined;\n  /**\n   * The **\\-ms-scroll-limit** CSS property is a Microsoft extension that specifies values for the `-ms-scroll-limit-x-min`, `-ms-scroll-limit-y-min`, `-ms-scroll-limit-x-max`, and `-ms-scroll-limit-y-max` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>`\n   */\n  msScrollLimit?: Property.MsScrollLimit | undefined;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-x` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>`\n   */\n  msScrollSnapX?: Property.MsScrollSnapX | undefined;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-y` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>`\n   */\n  msScrollSnapY?: Property.MsScrollSnapY | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  msTransition?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  WebkitAnimation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`-webkit-border-before`** CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-width'> || <'border-style'> || <color>`\n   */\n  WebkitBorderBefore?: Property.WebkitBorderBefore<TLength> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  WebkitBorderImage?: Property.BorderImage | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   */\n  WebkitBorderRadius?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  WebkitColumnRule?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  WebkitColumns?: Property.Columns<TLength> | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  WebkitFlex?: Property.Flex<TLength> | undefined;\n  /**\n   * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   */\n  WebkitFlexFlow?: Property.FlexFlow | undefined;\n  /**\n   * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#`\n   */\n  WebkitMask?: Property.WebkitMask<TLength> | undefined;\n  /**\n   * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   */\n  WebkitMaskBoxImage?: Property.MaskBorder | undefined;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   */\n  WebkitTextEmphasis?: Property.TextEmphasis | undefined;\n  /**\n   * The **`-webkit-text-stroke`** CSS property specifies the width and color of strokes for text characters. This is a shorthand property for the longhand properties `-webkit-text-stroke-width` and `-webkit-text-stroke-color`.\n   *\n   * **Syntax**: `<length> || <color>`\n   */\n  WebkitTextStroke?: Property.WebkitTextStroke<TLength> | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  WebkitTransition?: Property.Transition<TTime> | undefined;\n}\n\nexport interface VendorProperties<TLength = (string & {}) | 0, TTime = string & {}> extends VendorLonghandProperties<TLength, TTime>, VendorShorthandProperties<TLength, TTime> {}\n\nexport interface ObsoleteProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * In combination with `elevation`, the **`azimuth`** CSS property enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage.\n   *\n   * **Syntax**: `<angle> | [ [ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards`\n   *\n   * **Initial value**: `center`\n   *\n   * @deprecated\n   */\n  azimuth?: Property.Azimuth | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  boxAlign?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  boxDirection?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  boxFlex?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  boxFlexGroup?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  boxLines?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  boxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  boxOrient?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  boxPack?: Property.BoxPack | undefined;\n  /**\n   * The **`clip`** CSS property defines a visible portion of an element. The `clip` property applies only to absolutely positioned elements — that is, elements with `position:absolute` or `position:fixed`.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  clip?: Property.Clip | undefined;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  gridColumnGap?: Property.GridColumnGap<TLength> | undefined;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'grid-row-gap'> <'grid-column-gap'>?`\n   *\n   * @deprecated\n   */\n  gridGap?: Property.GridGap<TLength> | undefined;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's rows.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  gridRowGap?: Property.GridRowGap<TLength> | undefined;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  imeMode?: Property.ImeMode | undefined;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * @deprecated\n   */\n  offsetBlock?: Property.InsetBlock<TLength> | undefined;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetBlockEnd?: Property.InsetBlockEnd<TLength> | undefined;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetBlockStart?: Property.InsetBlockStart<TLength> | undefined;\n  /**\n   * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * @deprecated\n   */\n  offsetInline?: Property.InsetInline<TLength> | undefined;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetInlineEnd?: Property.InsetInlineEnd<TLength> | undefined;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  offsetInlineStart?: Property.InsetInlineStart<TLength> | undefined;\n  /**\n   * The **`scroll-snap-coordinate`** CSS property defines the x and y coordinate positions within an element that will align with its nearest ancestor scroll container's `scroll-snap-destination` for each respective axis.\n   *\n   * **Syntax**: `none | <position>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapCoordinate?: Property.ScrollSnapCoordinate<TLength> | undefined;\n  /**\n   * The **`scroll-snap-destination`** CSS property defines the position in x and y coordinates within the scroll container's visual viewport which element snap points align with.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `0px 0px`\n   *\n   * @deprecated\n   */\n  scrollSnapDestination?: Property.ScrollSnapDestination<TLength> | undefined;\n  /**\n   * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapPointsX?: Property.ScrollSnapPointsX | undefined;\n  /**\n   * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapPointsY?: Property.ScrollSnapPointsY | undefined;\n  /**\n   * The **`scroll-snap-type-x`** CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapTypeX?: Property.ScrollSnapTypeX | undefined;\n  /**\n   * The **`scroll-snap-type-y`** CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  scrollSnapTypeY?: Property.ScrollSnapTypeY | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  KhtmlBoxAlign?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  KhtmlBoxDirection?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  KhtmlBoxFlex?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  KhtmlBoxFlexGroup?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  KhtmlBoxLines?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  KhtmlBoxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  KhtmlBoxOrient?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  KhtmlBoxPack?: Property.BoxPack | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  KhtmlLineBreak?: Property.LineBreak | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  KhtmlOpacity?: Property.Opacity | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  KhtmlUserSelect?: Property.UserSelect | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * @deprecated\n   */\n  MozBackfaceVisibility?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * @deprecated\n   */\n  MozBackgroundClip?: Property.BackgroundClip | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * @deprecated\n   */\n  MozBackgroundInlinePolicy?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * @deprecated\n   */\n  MozBackgroundOrigin?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  MozBackgroundSize?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * @deprecated\n   */\n  MozBorderRadius?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusBottomleft?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusBottomright?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusTopleft?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBorderRadiusTopright?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  MozBoxAlign?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  MozBoxDirection?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozBoxFlex?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  MozBoxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  MozBoxOrient?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  MozBoxPack?: Property.BoxPack | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozBoxShadow?: Property.BoxShadow | undefined;\n  /**\n   * The non-standard **`-moz-float-edge`** CSS property specifies whether the height and width properties of the element include the margin, border, or padding thickness.\n   *\n   * **Syntax**: `border-box | content-box | margin-box | padding-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * @deprecated\n   */\n  MozFloatEdge?: Property.MozFloatEdge | undefined;\n  /**\n   * The **`-moz-force-broken-image-icon`** extended CSS property can be used to force the broken image icon to be shown even when a broken image has an `alt` attribute.\n   *\n   * **Syntax**: `0 | 1`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  MozForceBrokenImageIcon?: Property.MozForceBrokenImageIcon | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  MozOpacity?: Property.Opacity | undefined;\n  /**\n   * The **`outline`** CSS shorthand property sets most of the outline properties in a single declaration.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * @deprecated\n   */\n  MozOutline?: Property.Outline<TLength> | undefined;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * @deprecated\n   */\n  MozOutlineColor?: Property.OutlineColor | undefined;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozOutlineStyle?: Property.OutlineStyle | undefined;\n  /**\n   * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * @deprecated\n   */\n  MozOutlineWidth?: Property.OutlineWidth<TLength> | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozPerspective?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * @deprecated\n   */\n  MozPerspectiveOrigin?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  MozTextAlignLast?: Property.TextAlignLast | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * @deprecated\n   */\n  MozTextDecorationColor?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozTextDecorationLine?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * @deprecated\n   */\n  MozTextDecorationStyle?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  MozTransform?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * @deprecated\n   */\n  MozTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   *\n   * @deprecated\n   */\n  MozTransformStyle?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * @deprecated\n   */\n  MozTransition?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  MozTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  MozTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * @deprecated\n   */\n  MozTransitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  MozTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * In Mozilla applications, **`-moz-user-input`** determines if an element will accept user input.\n   *\n   * **Syntax**: `auto | none | enabled | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  MozUserInput?: Property.MozUserInput | undefined;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  msImeMode?: Property.ImeMode | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * @deprecated\n   */\n  OAnimation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OAnimationDelay?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  OAnimationDirection?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OAnimationDuration?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  OAnimationFillMode?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  OAnimationIterationCount?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  OAnimationName?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * @deprecated\n   */\n  OAnimationPlayState?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  OAnimationTimingFunction?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  OBackgroundSize?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * @deprecated\n   */\n  OBorderImage?: Property.BorderImage | undefined;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * @deprecated\n   */\n  OObjectFit?: Property.ObjectFit | undefined;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * @deprecated\n   */\n  OObjectPosition?: Property.ObjectPosition<TLength> | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * @deprecated\n   */\n  OTabSize?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * @deprecated\n   */\n  OTextOverflow?: Property.TextOverflow | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  OTransform?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * @deprecated\n   */\n  OTransformOrigin?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * @deprecated\n   */\n  OTransition?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OTransitionDelay?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  OTransitionDuration?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * @deprecated\n   */\n  OTransitionProperty?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  OTransitionTimingFunction?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  WebkitBoxAlign?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  WebkitBoxDirection?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  WebkitBoxFlex?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  WebkitBoxFlexGroup?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  WebkitBoxLines?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  WebkitBoxOrdinalGroup?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  WebkitBoxOrient?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  WebkitBoxPack?: Property.BoxPack | undefined;\n}\n\nexport interface SvgProperties<TLength = (string & {}) | 0, TTime = string & {}> {\n  alignmentBaseline?: Property.AlignmentBaseline | undefined;\n  baselineShift?: Property.BaselineShift<TLength> | undefined;\n  clip?: Property.Clip | undefined;\n  clipPath?: Property.ClipPath | undefined;\n  clipRule?: Property.ClipRule | undefined;\n  color?: Property.Color | undefined;\n  colorInterpolation?: Property.ColorInterpolation | undefined;\n  colorRendering?: Property.ColorRendering | undefined;\n  cursor?: Property.Cursor | undefined;\n  direction?: Property.Direction | undefined;\n  display?: Property.Display | undefined;\n  dominantBaseline?: Property.DominantBaseline | undefined;\n  fill?: Property.Fill | undefined;\n  fillOpacity?: Property.FillOpacity | undefined;\n  fillRule?: Property.FillRule | undefined;\n  filter?: Property.Filter | undefined;\n  floodColor?: Property.FloodColor | undefined;\n  floodOpacity?: Property.FloodOpacity | undefined;\n  font?: Property.Font | undefined;\n  fontFamily?: Property.FontFamily | undefined;\n  fontSize?: Property.FontSize<TLength> | undefined;\n  fontSizeAdjust?: Property.FontSizeAdjust | undefined;\n  fontStretch?: Property.FontStretch | undefined;\n  fontStyle?: Property.FontStyle | undefined;\n  fontVariant?: Property.FontVariant | undefined;\n  fontWeight?: Property.FontWeight | undefined;\n  glyphOrientationVertical?: Property.GlyphOrientationVertical | undefined;\n  imageRendering?: Property.ImageRendering | undefined;\n  letterSpacing?: Property.LetterSpacing<TLength> | undefined;\n  lightingColor?: Property.LightingColor | undefined;\n  lineHeight?: Property.LineHeight<TLength> | undefined;\n  marker?: Property.Marker | undefined;\n  markerEnd?: Property.MarkerEnd | undefined;\n  markerMid?: Property.MarkerMid | undefined;\n  markerStart?: Property.MarkerStart | undefined;\n  mask?: Property.Mask<TLength> | undefined;\n  opacity?: Property.Opacity | undefined;\n  overflow?: Property.Overflow | undefined;\n  paintOrder?: Property.PaintOrder | undefined;\n  pointerEvents?: Property.PointerEvents | undefined;\n  shapeRendering?: Property.ShapeRendering | undefined;\n  stopColor?: Property.StopColor | undefined;\n  stopOpacity?: Property.StopOpacity | undefined;\n  stroke?: Property.Stroke | undefined;\n  strokeDasharray?: Property.StrokeDasharray<TLength> | undefined;\n  strokeDashoffset?: Property.StrokeDashoffset<TLength> | undefined;\n  strokeLinecap?: Property.StrokeLinecap | undefined;\n  strokeLinejoin?: Property.StrokeLinejoin | undefined;\n  strokeMiterlimit?: Property.StrokeMiterlimit | undefined;\n  strokeOpacity?: Property.StrokeOpacity | undefined;\n  strokeWidth?: Property.StrokeWidth<TLength> | undefined;\n  textAnchor?: Property.TextAnchor | undefined;\n  textDecoration?: Property.TextDecoration<TLength> | undefined;\n  textRendering?: Property.TextRendering | undefined;\n  unicodeBidi?: Property.UnicodeBidi | undefined;\n  vectorEffect?: Property.VectorEffect | undefined;\n  visibility?: Property.Visibility | undefined;\n  whiteSpace?: Property.WhiteSpace | undefined;\n  wordSpacing?: Property.WordSpacing<TLength> | undefined;\n  writingMode?: Property.WritingMode | undefined;\n}\n\nexport interface Properties<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardProperties<TLength, TTime>,\n    VendorProperties<TLength, TTime>,\n    ObsoleteProperties<TLength, TTime>,\n    SvgProperties<TLength, TTime> {}\n\nexport interface StandardLonghandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`accent-color`** CSS property sets the accent color for user-interface controls generated by some elements.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **93** | **92**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/accent-color\n   */\n  \"accent-color\"?: Property.AccentColor | undefined;\n  /**\n   * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-content\n   */\n  \"align-content\"?: Property.AlignContent | undefined;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-items\n   */\n  \"align-items\"?: Property.AlignItems | undefined;\n  /**\n   * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-self\n   */\n  \"align-self\"?: Property.AlignSelf | undefined;\n  /**\n   * The **`align-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their block axis.\n   *\n   * **Syntax**: `[ normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/align-tracks\n   */\n  \"align-tracks\"?: Property.AlignTracks | undefined;\n  /**\n   * The **`animation-composition`** CSS property specifies the composite operation to use when multiple animations affect the same property simultaneously.\n   *\n   * **Syntax**: `<single-animation-composition>#`\n   *\n   * **Initial value**: `replace`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **112** | **115** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-composition\n   */\n  \"animation-composition\"?: Property.AnimationComposition | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-delay\n   */\n  \"animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-direction\n   */\n  \"animation-direction\"?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-duration\n   */\n  \"animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 5 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-fill-mode\n   */\n  \"animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-iteration-count\n   */\n  \"animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-name\n   */\n  \"animation-name\"?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-play-state\n   */\n  \"animation-play-state\"?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-range-end`** CSS property is used to set the end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will end.\n   *\n   * **Syntax**: `[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range-end\n   */\n  \"animation-range-end\"?: Property.AnimationRangeEnd<TLength> | undefined;\n  /**\n   * The **`animation-range-start`** CSS property is used to set the start of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start.\n   *\n   * **Syntax**: `[ normal | <length-percentage> | <timeline-range-name> <length-percentage>? ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range-start\n   */\n  \"animation-range-start\"?: Property.AnimationRangeStart<TLength> | undefined;\n  /**\n   * The **`animation-timeline`** CSS property specifies the timeline that is used to control the progress of an animation.\n   *\n   * **Syntax**: `<single-animation-timeline>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timeline\n   */\n  \"animation-timeline\"?: Property.AnimationTimeline | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-timing-function\n   */\n  \"animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | auto | textfield | menulist-button | <compat-auto>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  |   Edge   | IE  |\n   * | :-----: | :-----: | :------: | :------: | :-: |\n   * | **84**  | **80**  | **15.4** |  **84**  | No  |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_  | 12 _-x-_ |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/appearance\n   */\n  appearance?: Property.Appearance | undefined;\n  /**\n   * The **`aspect-ratio`** CSS property sets a **preferred aspect ratio** for the box, which will be used in the calculation of auto sizes and some other layout functions.\n   *\n   * **Syntax**: `auto | <ratio>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **88** | **89**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/aspect-ratio\n   */\n  \"aspect-ratio\"?: Property.AspectRatio | undefined;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari    |  Edge  | IE  |\n   * | :----: | :-----: | :---------: | :----: | :-: |\n   * | **76** | **103** | **9** _-x-_ | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backdrop-filter\n   */\n  \"backdrop-filter\"?: Property.BackdropFilter | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :------: | :-----: | :-------: | :----: | :----: |\n   * |  **36**  | **16**  | **15.4**  | **12** | **10** |\n   * | 12 _-x-_ |         | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/backface-visibility\n   */\n  \"backface-visibility\"?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-attachment`** CSS property sets whether a background image's position is fixed within the viewport, or scrolls with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-attachment\n   */\n  \"background-attachment\"?: Property.BackgroundAttachment | undefined;\n  /**\n   * The **`background-blend-mode`** CSS property sets how an element's background images should blend with each other and with the element's background color.\n   *\n   * **Syntax**: `<blend-mode>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **35** | **30**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-blend-mode\n   */\n  \"background-blend-mode\"?: Property.BackgroundBlendMode | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **4**  |  **5**  | **12** | **9** |\n   * |        |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-clip\n   */\n  \"background-clip\"?: Property.BackgroundClip | undefined;\n  /**\n   * The **`background-color`** CSS property sets the background color of an element.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `transparent`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-color\n   */\n  \"background-color\"?: Property.BackgroundColor | undefined;\n  /**\n   * The **`background-image`** CSS property sets one or more background images on an element.\n   *\n   * **Syntax**: `<bg-image>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-image\n   */\n  \"background-image\"?: Property.BackgroundImage | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **4**  | **3**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-origin\n   */\n  \"background-origin\"?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-position-x`** CSS property sets the initial horizontal position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ left | right | x-start | x-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-x\n   */\n  \"background-position-x\"?: Property.BackgroundPositionX<TLength> | undefined;\n  /**\n   * The **`background-position-y`** CSS property sets the initial vertical position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `[ center | [ [ top | bottom | y-start | y-end ]? <length-percentage>? ]! ]#`\n   *\n   * **Initial value**: `0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **49**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position-y\n   */\n  \"background-position-y\"?: Property.BackgroundPositionY<TLength> | undefined;\n  /**\n   * The **`background-repeat`** CSS property sets how background images are repeated. A background image can be repeated along the horizontal and vertical axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-repeat\n   */\n  \"background-repeat\"?: Property.BackgroundRepeat | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **3**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-size\n   */\n  \"background-size\"?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * **Syntax**: `clip | ellipsis | <string>`\n   *\n   * **Initial value**: `clip`\n   */\n  \"block-overflow\"?: Property.BlockOverflow | undefined;\n  /**\n   * The **`block-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/block-size\n   */\n  \"block-size\"?: Property.BlockSize<TLength> | undefined;\n  /**\n   * The **`border-block-color`** CSS property defines the color of the logical block borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-color\n   */\n  \"border-block-color\"?: Property.BorderBlockColor | undefined;\n  /**\n   * The **`border-block-end-color`** CSS property defines the color of the logical block-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-color\n   */\n  \"border-block-end-color\"?: Property.BorderBlockEndColor | undefined;\n  /**\n   * The **`border-block-end-style`** CSS property defines the style of the logical block-end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-style\n   */\n  \"border-block-end-style\"?: Property.BorderBlockEndStyle | undefined;\n  /**\n   * The **`border-block-end-width`** CSS property defines the width of the logical block-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end-width\n   */\n  \"border-block-end-width\"?: Property.BorderBlockEndWidth<TLength> | undefined;\n  /**\n   * The **`border-block-start-color`** CSS property defines the color of the logical block-start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-color\n   */\n  \"border-block-start-color\"?: Property.BorderBlockStartColor | undefined;\n  /**\n   * The **`border-block-start-style`** CSS property defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-style\n   */\n  \"border-block-start-style\"?: Property.BorderBlockStartStyle | undefined;\n  /**\n   * The **`border-block-start-width`** CSS property defines the width of the logical block-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start-width\n   */\n  \"border-block-start-width\"?: Property.BorderBlockStartWidth<TLength> | undefined;\n  /**\n   * The **`border-block-style`** CSS property defines the style of the logical block borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-style\n   */\n  \"border-block-style\"?: Property.BorderBlockStyle | undefined;\n  /**\n   * The **`border-block-width`** CSS property defines the width of the logical block borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-width\n   */\n  \"border-block-width\"?: Property.BorderBlockWidth<TLength> | undefined;\n  /**\n   * The **`border-bottom-color`** CSS property sets the color of an element's bottom border. It can also be set with the shorthand CSS properties `border-color` or `border-bottom`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-color\n   */\n  \"border-bottom-color\"?: Property.BorderBottomColor | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-left-radius\n   */\n  \"border-bottom-left-radius\"?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-right-radius\n   */\n  \"border-bottom-right-radius\"?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-style`** CSS property sets the line style of an element's bottom `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-style\n   */\n  \"border-bottom-style\"?: Property.BorderBottomStyle | undefined;\n  /**\n   * The **`border-bottom-width`** CSS property sets the width of the bottom border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom-width\n   */\n  \"border-bottom-width\"?: Property.BorderBottomWidth<TLength> | undefined;\n  /**\n   * The **`border-collapse`** CSS property sets whether cells inside a `<table>` have shared or separate borders.\n   *\n   * **Syntax**: `collapse | separate`\n   *\n   * **Initial value**: `separate`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-collapse\n   */\n  \"border-collapse\"?: Property.BorderCollapse | undefined;\n  /**\n   * The **`border-end-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-end-radius\n   */\n  \"border-end-end-radius\"?: Property.BorderEndEndRadius<TLength> | undefined;\n  /**\n   * The **`border-end-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-end-start-radius\n   */\n  \"border-end-start-radius\"?: Property.BorderEndStartRadius<TLength> | undefined;\n  /**\n   * The **`border-image-outset`** CSS property sets the distance by which an element's border image is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-outset\n   */\n  \"border-image-outset\"?: Property.BorderImageOutset<TLength> | undefined;\n  /**\n   * The **`border-image-repeat`** CSS property defines how the edge regions and middle region of a source image are adjusted to fit the dimensions of an element's border image. The middle region can be displayed by using the keyword \"fill\" in the border-image-slice property.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-repeat\n   */\n  \"border-image-repeat\"?: Property.BorderImageRepeat | undefined;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-slice\n   */\n  \"border-image-slice\"?: Property.BorderImageSlice | undefined;\n  /**\n   * The **`border-image-source`** CSS property sets the source image used to create an element's border image.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **15**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-source\n   */\n  \"border-image-source\"?: Property.BorderImageSource | undefined;\n  /**\n   * The **`border-image-width`** CSS property sets the width of an element's border image.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **15** | **13**  | **6**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image-width\n   */\n  \"border-image-width\"?: Property.BorderImageWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-color`** CSS property defines the color of the logical inline borders of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color` and `border-bottom-color`, or `border-right-color` and `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>{1,2}`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-color\n   */\n  \"border-inline-color\"?: Property.BorderInlineColor | undefined;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-color)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-color\n   */\n  \"border-inline-end-color\"?: Property.BorderInlineEndColor | undefined;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-style)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-style\n   */\n  \"border-inline-end-style\"?: Property.BorderInlineEndStyle | undefined;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome |           Firefox           |  Safari  | Edge | IE  |\n   * | :----: | :-------------------------: | :------: | :--: | :-: |\n   * | **69** |           **41**            | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-end-width)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end-width\n   */\n  \"border-inline-end-width\"?: Property.BorderInlineEndWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome |            Firefox            |  Safari  | Edge | IE  |\n   * | :----: | :---------------------------: | :------: | :--: | :-: |\n   * | **69** |            **41**             | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-start-color)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-color\n   */\n  \"border-inline-start-color\"?: Property.BorderInlineStartColor | undefined;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome |            Firefox            |  Safari  | Edge | IE  |\n   * | :----: | :---------------------------: | :------: | :--: | :-: |\n   * | **69** |            **41**             | **12.1** | n/a  | No  |\n   * |        | 3 _(-moz-border-start-style)_ |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-style\n   */\n  \"border-inline-start-style\"?: Property.BorderInlineStartStyle | undefined;\n  /**\n   * The **`border-inline-start-width`** CSS property defines the width of the logical inline-start border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start-width\n   */\n  \"border-inline-start-width\"?: Property.BorderInlineStartWidth<TLength> | undefined;\n  /**\n   * The **`border-inline-style`** CSS property defines the style of the logical inline borders of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style` and `border-bottom-style`, or `border-left-style` and `border-right-style` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-style\n   */\n  \"border-inline-style\"?: Property.BorderInlineStyle | undefined;\n  /**\n   * The **`border-inline-width`** CSS property defines the width of the logical inline borders of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width` and `border-bottom-width`, or `border-left-width`, and `border-right-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-width\n   */\n  \"border-inline-width\"?: Property.BorderInlineWidth<TLength> | undefined;\n  /**\n   * The **`border-left-color`** CSS property sets the color of an element's left border. It can also be set with the shorthand CSS properties `border-color` or `border-left`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-color\n   */\n  \"border-left-color\"?: Property.BorderLeftColor | undefined;\n  /**\n   * The **`border-left-style`** CSS property sets the line style of an element's left `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-style\n   */\n  \"border-left-style\"?: Property.BorderLeftStyle | undefined;\n  /**\n   * The **`border-left-width`** CSS property sets the width of the left border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left-width\n   */\n  \"border-left-width\"?: Property.BorderLeftWidth<TLength> | undefined;\n  /**\n   * The **`border-right-color`** CSS property sets the color of an element's right border. It can also be set with the shorthand CSS properties `border-color` or `border-right`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-color\n   */\n  \"border-right-color\"?: Property.BorderRightColor | undefined;\n  /**\n   * The **`border-right-style`** CSS property sets the line style of an element's right `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-style\n   */\n  \"border-right-style\"?: Property.BorderRightStyle | undefined;\n  /**\n   * The **`border-right-width`** CSS property sets the width of the right border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right-width\n   */\n  \"border-right-width\"?: Property.BorderRightWidth<TLength> | undefined;\n  /**\n   * The **`border-spacing`** CSS property sets the distance between the borders of adjacent cells in a `<table>`. This property applies only when `border-collapse` is `separate`.\n   *\n   * **Syntax**: `<length> <length>?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-spacing\n   */\n  \"border-spacing\"?: Property.BorderSpacing<TLength> | undefined;\n  /**\n   * The **`border-start-end-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius depending on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-end-radius\n   */\n  \"border-start-end-radius\"?: Property.BorderStartEndRadius<TLength> | undefined;\n  /**\n   * The **`border-start-start-radius`** CSS property defines a logical border radius on an element, which maps to a physical border radius that depends on the element's `writing-mode`, `direction`, and `text-orientation`. This is useful when building styles to work regardless of the text orientation and writing mode.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **89** | **66**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-start-start-radius\n   */\n  \"border-start-start-radius\"?: Property.BorderStartStartRadius<TLength> | undefined;\n  /**\n   * The **`border-top-color`** CSS property sets the color of an element's top border. It can also be set with the shorthand CSS properties `border-color` or `border-top`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-color\n   */\n  \"border-top-color\"?: Property.BorderTopColor | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-left-radius\n   */\n  \"border-top-left-radius\"?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-right-radius\n   */\n  \"border-top-right-radius\"?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`border-top-style`** CSS property sets the line style of an element's top `border`.\n   *\n   * **Syntax**: `<line-style>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-style\n   */\n  \"border-top-style\"?: Property.BorderTopStyle | undefined;\n  /**\n   * The **`border-top-width`** CSS property sets the width of the top border of an element.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top-width\n   */\n  \"border-top-width\"?: Property.BorderTopWidth<TLength> | undefined;\n  /**\n   * The **`bottom`** CSS property participates in setting the vertical position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/bottom\n   */\n  bottom?: Property.Bottom<TLength> | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * |    Chrome    | Firefox |   Safari    | Edge | IE  |\n   * | :----------: | :-----: | :---------: | :--: | :-: |\n   * | **22** _-x-_ | **32**  | **7** _-x-_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-decoration-break\n   */\n  \"box-decoration-break\"?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  |  **4**  | **5.1** | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-shadow\n   */\n  \"box-shadow\"?: Property.BoxShadow | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * | **10**  | **29**  | **5.1** | **12** | **8** |\n   * | 1 _-x-_ | 1 _-x-_ | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/box-sizing\n   */\n  \"box-sizing\"?: Property.BoxSizing | undefined;\n  /**\n   * The **`break-after`** CSS property sets how page, column, or region breaks should behave after a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-after\n   */\n  \"break-after\"?: Property.BreakAfter | undefined;\n  /**\n   * The **`break-before`** CSS property sets how page, column, or region breaks should behave before a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | always | all | avoid-page | page | left | right | recto | verso | avoid-column | column | avoid-region | region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-before\n   */\n  \"break-before\"?: Property.BreakBefore | undefined;\n  /**\n   * The **`break-inside`** CSS property sets how page, column, or region breaks should behave inside a generated box. If there is no generated box, the property is ignored.\n   *\n   * **Syntax**: `auto | avoid | avoid-page | avoid-column | avoid-region`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **50** | **65**  | **10** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/break-inside\n   */\n  \"break-inside\"?: Property.BreakInside | undefined;\n  /**\n   * The **`caption-side`** CSS property puts the content of a table's `<caption>` on the specified side. The values are relative to the `writing-mode` of the table.\n   *\n   * **Syntax**: `top | bottom | block-start | block-end | inline-start | inline-end`\n   *\n   * **Initial value**: `top`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caption-side\n   */\n  \"caption-side\"?: Property.CaptionSide | undefined;\n  /**\n   * The **`caret-color`** CSS property sets the color of the **insertion caret**, the visible marker where the next character typed will be inserted. This is sometimes referred to as the **text input cursor**. The caret appears in elements such as `<input>` or those with the `contenteditable` attribute. The caret is typically a thin vertical line that flashes to help make it more noticeable. By default, it is black, but its color can be altered with this property.\n   *\n   * **Syntax**: `auto | <color>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **53**  | **11.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/caret-color\n   */\n  \"caret-color\"?: Property.CaretColor | undefined;\n  /**\n   * **Syntax**: `auto | bar | block | underscore`\n   *\n   * **Initial value**: `auto`\n   */\n  \"caret-shape\"?: Property.CaretShape | undefined;\n  /**\n   * The **`clear`** CSS property sets whether an element must be moved below (cleared) floating elements that precede it. The `clear` property applies to floating and non-floating elements.\n   *\n   * **Syntax**: `none | left | right | both | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clear\n   */\n  clear?: Property.Clear | undefined;\n  /**\n   * The **`clip-path`** CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **55**  | **3.5** | **9.1** | **79** | **10** |\n   * | 23 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/clip-path\n   */\n  \"clip-path\"?: Property.ClipPath | undefined;\n  /**\n   * The **`color`** CSS property sets the foreground color value of an element's text and text decorations, and sets the `currentcolor` value. `currentcolor` may be used as an indirect value on _other_ properties and is the default for other color properties, such as `border-color`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `canvastext`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color\n   */\n  color?: Property.Color | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |    Chrome    |       Firefox       |  Safari  |     Edge     | IE  |\n   * | :----------: | :-----------------: | :------: | :----------: | :-: |\n   * | **17** _-x-_ |       **97**        | **15.4** | **79** _-x-_ | No  |\n   * |              | 48 _(color-adjust)_ | 6 _-x-_  |              |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/print-color-adjust\n   */\n  \"color-adjust\"?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`color-scheme`** CSS property allows an element to indicate which color schemes it can comfortably be rendered in.\n   *\n   * **Syntax**: `normal | [ light | dark | <custom-ident> ]+ && only?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **81** | **96**  | **13** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/color-scheme\n   */\n  \"color-scheme\"?: Property.ColorScheme | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-count\n   */\n  \"column-count\"?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-fill\n   */\n  \"column-fill\"?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **3**  | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-gap\n   */\n  \"column-gap\"?: Property.ColumnGap<TLength> | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-color\n   */\n  \"column-rule-color\"?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-style\n   */\n  \"column-rule-style\"?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule-width\n   */\n  \"column-rule-width\"?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **50**  | **71**  |   **9**   | **12** | **10** |\n   * | 6 _-x-_ |         | 5.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-span\n   */\n  \"column-span\"?: Property.ColumnSpan | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **50**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-width\n   */\n  \"column-width\"?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`contain`** CSS property indicates that an element and its contents are, as much as possible, independent from the rest of the document tree. Containment enables isolating a subsection of the DOM, providing performance benefits by limiting calculations of layout, style, paint, size, or any combination to a DOM subtree rather than the entire page. Containment can also be used to scope CSS counters and quotes.\n   *\n   * **Syntax**: `none | strict | content | [ [ size || inline-size ] || layout || style || paint ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **52** | **69**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain\n   */\n  contain?: Property.Contain | undefined;\n  /**\n   * The **`contain-intrinsic-block-size`** CSS logical property defines the block size of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-block-size\n   */\n  \"contain-intrinsic-block-size\"?: Property.ContainIntrinsicBlockSize<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-length`** CSS property sets the height of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-height\n   */\n  \"contain-intrinsic-height\"?: Property.ContainIntrinsicHeight<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-inline-size`** CSS logical property defines the inline-size of an element that a browser can use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-contain-intrinsic-inline-size\n   */\n  \"contain-intrinsic-inline-size\"?: Property.ContainIntrinsicInlineSize<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-width`** CSS property sets the width of an element that a browser will use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `auto? [ none | <length> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **95** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-width\n   */\n  \"contain-intrinsic-width\"?: Property.ContainIntrinsicWidth<TLength> | undefined;\n  /**\n   * The **container-name** CSS property specifies a list of query container names used by the @container at-rule in a container query. A container query will apply styles to elements based on the size of the nearest ancestor with a containment context. When a containment context is given a name, it can be specifically targeted using the `@container` at-rule instead of the nearest ancestor with containment.\n   *\n   * **Syntax**: `none | <custom-ident>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container-name\n   */\n  \"container-name\"?: Property.ContainerName | undefined;\n  /**\n   * The **container-type** CSS property is used to define the type of containment used in a container query.\n   *\n   * **Syntax**: `normal | size | inline-size`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container-type\n   */\n  \"container-type\"?: Property.ContainerType | undefined;\n  /**\n   * The **`content`** CSS property replaces an element with a generated value. Objects inserted using the `content` property are **anonymous replaced elements**.\n   *\n   * **Syntax**: `normal | none | [ <content-replacement> | <content-list> ] [/ [ <string> | <counter> ]+ ]?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content\n   */\n  content?: Property.Content | undefined;\n  /**\n   * The **`content-visibility`** CSS property controls whether or not an element renders its contents at all, along with forcing a strong set of containments, allowing user agents to potentially omit large swathes of layout and rendering work until it becomes needed. It enables the user agent to skip an element's rendering work (including layout and painting) until it is needed — which makes the initial page load much faster.\n   *\n   * **Syntax**: `visible | auto | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome |   Firefox   | Safari | Edge | IE  |\n   * | :----: | :---------: | :----: | :--: | :-: |\n   * | **85** | **preview** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/content-visibility\n   */\n  \"content-visibility\"?: Property.ContentVisibility | undefined;\n  /**\n   * The **`counter-increment`** CSS property increases or decreases the value of a CSS counter by a given value.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-increment\n   */\n  \"counter-increment\"?: Property.CounterIncrement | undefined;\n  /**\n   * The **`counter-reset`** CSS property resets a CSS counter to a given value. This property will create a new counter or reversed counter with the given name on the specified element.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? | <reversed-counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **3**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-reset\n   */\n  \"counter-reset\"?: Property.CounterReset | undefined;\n  /**\n   * The **`counter-set`** CSS property sets a CSS counter to a given value. It manipulates the value of existing counters, and will only create new counters if there isn't already a counter of the given name on the element.\n   *\n   * **Syntax**: `[ <counter-name> <integer>? ]+ | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **85** | **68**  | **17.2** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/counter-set\n   */\n  \"counter-set\"?: Property.CounterSet | undefined;\n  /**\n   * The **`cursor`** CSS property sets the mouse cursor, if any, to show when the mouse pointer is over an element.\n   *\n   * **Syntax**: `[ [ <url> [ <x> <y> ]? , ]* [ auto | default | none | context-menu | help | pointer | progress | wait | cell | crosshair | text | vertical-text | alias | copy | move | no-drop | not-allowed | e-resize | n-resize | ne-resize | nw-resize | s-resize | se-resize | sw-resize | w-resize | ew-resize | ns-resize | nesw-resize | nwse-resize | col-resize | row-resize | all-scroll | zoom-in | zoom-out | grab | grabbing ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/cursor\n   */\n  cursor?: Property.Cursor | undefined;\n  /**\n   * The **`direction`** CSS property sets the direction of text, table columns, and horizontal overflow. Use `rtl` for languages written from right to left (like Hebrew or Arabic), and `ltr` for those written from left to right (like English and most other languages).\n   *\n   * **Syntax**: `ltr | rtl`\n   *\n   * **Initial value**: `ltr`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/direction\n   */\n  direction?: Property.Direction | undefined;\n  /**\n   * The **`display`** CSS property sets whether an element is treated as a block or inline element and the layout used for its children, such as flow layout, grid or flex.\n   *\n   * **Syntax**: `[ <display-outside> || <display-inside> ] | <display-listitem> | <display-internal> | <display-box> | <display-legacy>`\n   *\n   * **Initial value**: `inline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/display\n   */\n  display?: Property.Display | undefined;\n  /**\n   * The **`empty-cells`** CSS property sets whether borders and backgrounds appear around `<table>` cells that have no visible content.\n   *\n   * **Syntax**: `show | hide`\n   *\n   * **Initial value**: `show`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/empty-cells\n   */\n  \"empty-cells\"?: Property.EmptyCells | undefined;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **53**  | **35**  | **9.1** | **12** | No  |\n   * | 18 _-x-_ |         | 6 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/filter\n   */\n  filter?: Property.Filter | undefined;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **22**  |  **9**  | **12** | **11** |\n   * | 22 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-basis\n   */\n  \"flex-basis\"?: Property.FlexBasis<TLength> | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |    IE    |\n   * | :------: | :------: | :-----: | :----: | :------: |\n   * |  **29**  |  **81**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ | 49 _-x-_ | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-direction\n   */\n  \"flex-direction\"?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |            IE            |\n   * | :------: | :-----: | :-----: | :----: | :----------------------: |\n   * |  **29**  | **20**  |  **9**  | **12** |          **11**          |\n   * | 22 _-x-_ |         | 7 _-x-_ |        | 10 _(-ms-flex-positive)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-grow\n   */\n  \"flex-grow\"?: Property.FlexGrow | undefined;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **10** |\n   * | 22 _-x-_ |         | 8 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-shrink\n   */\n  \"flex-shrink\"?: Property.FlexShrink | undefined;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-wrap\n   */\n  \"flex-wrap\"?: Property.FlexWrap | undefined;\n  /**\n   * The **`float`** CSS property places an element on the left or right side of its container, allowing text and inline elements to wrap around it. The element is removed from the normal flow of the page, though still remaining a part of the flow (in contrast to absolute positioning).\n   *\n   * **Syntax**: `left | right | none | inline-start | inline-end`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/float\n   */\n  float?: Property.Float | undefined;\n  /**\n   * The **`font-family`** CSS property specifies a prioritized list of one or more font family names and/or generic family names for the selected element.\n   *\n   * **Syntax**: `[ <family-name> | <generic-family> ]#`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-family\n   */\n  \"font-family\"?: Property.FontFamily | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox  | Safari  |  Edge  |   IE   |\n   * | :------: | :------: | :-----: | :----: | :----: |\n   * |  **48**  |  **34**  | **9.1** | **15** | **10** |\n   * | 16 _-x-_ | 15 _-x-_ |         |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-feature-settings\n   */\n  \"font-feature-settings\"?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **33** | **32**  |  **9**  | n/a  | No  |\n   * |        |         | 6 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-kerning\n   */\n  \"font-kerning\"?: Property.FontKerning | undefined;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **34**  |   No   | n/a  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-language-override\n   */\n  \"font-language-override\"?: Property.FontLanguageOverride | undefined;\n  /**\n   * The **`font-optical-sizing`** CSS property sets whether text rendering is optimized for viewing at different sizes.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **79** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-optical-sizing\n   */\n  \"font-optical-sizing\"?: Property.FontOpticalSizing | undefined;\n  /**\n   * **Syntax**: `normal | light | dark | <palette-identifier>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **101** | **107** | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-palette\n   */\n  \"font-palette\"?: Property.FontPalette | undefined;\n  /**\n   * The **`font-size`** CSS property sets the size of the font. Changing the font size also updates the sizes of the font size-relative `<length>` units, such as `em`, `ex`, and so forth.\n   *\n   * **Syntax**: `<absolute-size> | <relative-size> | <length-percentage>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size\n   */\n  \"font-size\"?: Property.FontSize<TLength> | undefined;\n  /**\n   * The **`font-size-adjust`** CSS property sets the size of lower-case letters relative to the current font size (which defines the size of upper-case letters).\n   *\n   * **Syntax**: `none | [ ex-height | cap-height | ch-width | ic-width | ic-height ]? [ from-font | <number> ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   |  **3**  | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-size-adjust\n   */\n  \"font-size-adjust\"?: Property.FontSizeAdjust | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |              Chrome              |              Firefox               |              Safari              | Edge | IE  |\n   * | :------------------------------: | :--------------------------------: | :------------------------------: | :--: | :-: |\n   * | **5** _(-webkit-font-smoothing)_ | **25** _(-moz-osx-font-smoothing)_ | **4** _(-webkit-font-smoothing)_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-smooth\n   */\n  \"font-smooth\"?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * The **`font-stretch`** CSS property selects a normal, condensed, or expanded face from a font.\n   *\n   * **Syntax**: `<font-stretch-absolute>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **60** |  **9**  | **11** | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-stretch\n   */\n  \"font-stretch\"?: Property.FontStretch | undefined;\n  /**\n   * The **`font-style`** CSS property sets whether a font should be styled with a normal, italic, or oblique face from its `font-family`.\n   *\n   * **Syntax**: `normal | italic | oblique <angle>?`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-style\n   */\n  \"font-style\"?: Property.FontStyle | undefined;\n  /**\n   * The **`font-synthesis`** CSS property controls which missing typefaces, bold, italic, or small-caps, may be synthesized by the browser.\n   *\n   * **Syntax**: `none | [ weight || style || small-caps || position]`\n   *\n   * **Initial value**: `weight style small-caps position `\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **97** | **34**  | **9**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis\n   */\n  \"font-synthesis\"?: Property.FontSynthesis | undefined;\n  /**\n   * The **`font-synthesis-position`** CSS property lets you specify whether or not a browser may synthesize the subscript and superscript \"position\" typefaces when they are missing in a font family, while using `font-variant-position` to set the positions.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **118** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-position\n   */\n  \"font-synthesis-position\"?: Property.FontSynthesisPosition | undefined;\n  /**\n   * The **`font-synthesis-small-caps`** CSS property lets you specify whether or not the browser may synthesize small-caps typeface when it is missing in a font family. Small-caps glyphs typically use the form of uppercase letters but are reduced to the size of lowercase letters.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **97** | **111** | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-small-caps\n   */\n  \"font-synthesis-small-caps\"?: Property.FontSynthesisSmallCaps | undefined;\n  /**\n   * The **`font-synthesis-style`** CSS property lets you specify whether or not the browser may synthesize the oblique typeface when it is missing in a font family.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **97** | **111** | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-style\n   */\n  \"font-synthesis-style\"?: Property.FontSynthesisStyle | undefined;\n  /**\n   * The **`font-synthesis-weight`** CSS property lets you specify whether or not the browser may synthesize the bold typeface when it is missing in a font family.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **97** | **111** | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-synthesis-weight\n   */\n  \"font-synthesis-weight\"?: Property.FontSynthesisWeight | undefined;\n  /**\n   * The **`font-variant`** CSS shorthand property allows you to set all the font variants for a font.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> || stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) || [ small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps ] || <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero || <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant\n   */\n  \"font-variant\"?: Property.FontVariant | undefined;\n  /**\n   * The **`font-variant-alternates`** CSS property controls the usage of alternate glyphs. These alternate glyphs may be referenced by alternative names defined in `@font-feature-values`.\n   *\n   * **Syntax**: `normal | [ stylistic( <feature-value-name> ) || historical-forms || styleset( <feature-value-name># ) || character-variant( <feature-value-name># ) || swash( <feature-value-name> ) || ornaments( <feature-value-name> ) || annotation( <feature-value-name> ) ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :-----: | :-----: | :-----: | :--: | :-: |\n   * | **111** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-alternates\n   */\n  \"font-variant-alternates\"?: Property.FontVariantAlternates | undefined;\n  /**\n   * The **`font-variant-caps`** CSS property controls the use of alternate glyphs for capital letters.\n   *\n   * **Syntax**: `normal | small-caps | all-small-caps | petite-caps | all-petite-caps | unicase | titling-caps`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **52** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-caps\n   */\n  \"font-variant-caps\"?: Property.FontVariantCaps | undefined;\n  /**\n   * The **`font-variant-east-asian`** CSS property controls the use of alternate glyphs for East Asian scripts, like Japanese and Chinese.\n   *\n   * **Syntax**: `normal | [ <east-asian-variant-values> || <east-asian-width-values> || ruby ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **63** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-east-asian\n   */\n  \"font-variant-east-asian\"?: Property.FontVariantEastAsian | undefined;\n  /**\n   * **Syntax**: `normal | text | emoji | unicode`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-emoji\n   */\n  \"font-variant-emoji\"?: Property.FontVariantEmoji | undefined;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :------: | :-----: | :-----: | :--: | :-: |\n   * |  **34**  | **34**  | **9.1** | n/a  | No  |\n   * | 31 _-x-_ |         | 7 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-ligatures\n   */\n  \"font-variant-ligatures\"?: Property.FontVariantLigatures | undefined;\n  /**\n   * The **`font-variant-numeric`** CSS property controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.\n   *\n   * **Syntax**: `normal | [ <numeric-figure-values> || <numeric-spacing-values> || <numeric-fraction-values> || ordinal || slashed-zero ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **52** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-numeric\n   */\n  \"font-variant-numeric\"?: Property.FontVariantNumeric | undefined;\n  /**\n   * The **`font-variant-position`** CSS property controls the use of alternate, smaller glyphs that are positioned as superscript or subscript.\n   *\n   * **Syntax**: `normal | sub | super`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari  | Edge | IE  |\n   * | :-----: | :-----: | :-----: | :--: | :-: |\n   * | **117** | **34**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variant-position\n   */\n  \"font-variant-position\"?: Property.FontVariantPosition | undefined;\n  /**\n   * The **`font-variation-settings`** CSS property provides low-level control over variable font characteristics, by specifying the four letter axis names of the characteristics you want to vary, along with their values.\n   *\n   * **Syntax**: `normal | [ <string> <number> ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **62** | **62**  | **11** | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-variation-settings\n   */\n  \"font-variation-settings\"?: Property.FontVariationSettings | undefined;\n  /**\n   * The **`font-weight`** CSS property sets the weight (or boldness) of the font. The weights available depend on the `font-family` that is currently set.\n   *\n   * **Syntax**: `<font-weight-absolute> | bolder | lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **2**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font-weight\n   */\n  \"font-weight\"?: Property.FontWeight | undefined;\n  /**\n   * The **`forced-color-adjust`** CSS property allows authors to opt certain elements out of forced colors mode. This then restores the control of those values to CSS.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |              Edge               |                 IE                  |\n   * | :----: | :-----: | :----: | :-----------------------------: | :---------------------------------: |\n   * | **89** | **113** |   No   |             **79**              | **10** _(-ms-high-contrast-adjust)_ |\n   * |        |         |        | 12 _(-ms-high-contrast-adjust)_ |                                     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/forced-color-adjust\n   */\n  \"forced-color-adjust\"?: Property.ForcedColorAdjust | undefined;\n  /**\n   * The **`grid-auto-columns`** CSS property specifies the size of an implicitly-created grid column track or pattern of tracks.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |             IE              |\n   * | :----: | :-----: | :------: | :----: | :-------------------------: |\n   * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-columns\n   */\n  \"grid-auto-columns\"?: Property.GridAutoColumns<TLength> | undefined;\n  /**\n   * The **`grid-auto-flow`** CSS property controls how the auto-placement algorithm works, specifying exactly how auto-placed items get flowed into the grid.\n   *\n   * **Syntax**: `[ row | column ] || dense`\n   *\n   * **Initial value**: `row`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-flow\n   */\n  \"grid-auto-flow\"?: Property.GridAutoFlow | undefined;\n  /**\n   * The **`grid-auto-rows`** CSS property specifies the size of an implicitly-created grid row track or pattern of tracks.\n   *\n   * **Syntax**: `<track-size>+`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |            IE            |\n   * | :----: | :-----: | :------: | :----: | :----------------------: |\n   * | **57** | **70**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-auto-rows\n   */\n  \"grid-auto-rows\"?: Property.GridAutoRows<TLength> | undefined;\n  /**\n   * The **`grid-column-end`** CSS property specifies a grid item's end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-end\n   */\n  \"grid-column-end\"?: Property.GridColumnEnd | undefined;\n  /**\n   * The **`grid-column-start`** CSS property specifies a grid item's start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement. This start position defines the block-start edge of the grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column-start\n   */\n  \"grid-column-start\"?: Property.GridColumnStart | undefined;\n  /**\n   * The **`grid-row-end`** CSS property specifies a grid item's end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-end\n   */\n  \"grid-row-end\"?: Property.GridRowEnd | undefined;\n  /**\n   * The **`grid-row-start`** CSS property specifies a grid item's start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.\n   *\n   * **Syntax**: `<grid-line>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row-start\n   */\n  \"grid-row-start\"?: Property.GridRowStart | undefined;\n  /**\n   * The **`grid-template-areas`** CSS property specifies named grid areas, establishing the cells in the grid and assigning them names.\n   *\n   * **Syntax**: `none | <string>+`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-areas\n   */\n  \"grid-template-areas\"?: Property.GridTemplateAreas | undefined;\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |             IE              |\n   * | :----: | :-----: | :------: | :----: | :-------------------------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-columns)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-columns\n   */\n  \"grid-template-columns\"?: Property.GridTemplateColumns<TLength> | undefined;\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list> | subgrid <line-name-list>?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |            IE            |\n   * | :----: | :-----: | :------: | :----: | :----------------------: |\n   * | **57** | **52**  | **10.1** | **16** | **10** _(-ms-grid-rows)_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template-rows\n   */\n  \"grid-template-rows\"?: Property.GridTemplateRows<TLength> | undefined;\n  /**\n   * The **`hanging-punctuation`** CSS property specifies whether a punctuation mark should hang at the start or end of a line of text. Hanging punctuation may be placed outside the line box.\n   *\n   * **Syntax**: `none | [ first || [ force-end | allow-end ] || last ]`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   No    | **10** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hanging-punctuation\n   */\n  \"hanging-punctuation\"?: Property.HangingPunctuation | undefined;\n  /**\n   * The **`height`** CSS property specifies the height of an element. By default, the property defines the height of the content area. If `box-sizing` is set to `border-box`, however, it instead determines the height of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/height\n   */\n  height?: Property.Height<TLength> | undefined;\n  /**\n   * The **`hyphenate-character`** CSS property sets the character (or string) used at the end of a line before a hyphenation break.\n   *\n   * **Syntax**: `auto | <string>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |  Safari   | Edge | IE  |\n   * | :-----: | :-----: | :-------: | :--: | :-: |\n   * | **106** | **98**  |  **17**   | n/a  | No  |\n   * | 6 _-x-_ |         | 5.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphenate-character\n   */\n  \"hyphenate-character\"?: Property.HyphenateCharacter | undefined;\n  /**\n   * The **`hyphenate-limit-chars`** CSS property specifies the minimum word length to allow hyphenation of words as well as the the minimum number of characters before and after the hyphen.\n   *\n   * **Syntax**: `[ auto | <integer> ]{1,3}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** |   No    |   No   | n/a  | No  |\n   */\n  \"hyphenate-limit-chars\"?: Property.HyphenateLimitChars | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   *\n   * |  Chrome  | Firefox |  Safari   |  Edge  |      IE      |\n   * | :------: | :-----: | :-------: | :----: | :----------: |\n   * |  **55**  | **43**  |  **17**   | **79** | **10** _-x-_ |\n   * | 13 _-x-_ | 6 _-x-_ | 5.1 _-x-_ |        |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/hyphens\n   */\n  hyphens?: Property.Hyphens | undefined;\n  /**\n   * The **`image-orientation`** CSS property specifies a layout-independent correction to the orientation of an image.\n   *\n   * **Syntax**: `from-image | <angle> | [ <angle>? flip ]`\n   *\n   * **Initial value**: `from-image`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **81** | **26**  | **13.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-orientation\n   */\n  \"image-orientation\"?: Property.ImageOrientation | undefined;\n  /**\n   * The **`image-rendering`** CSS property sets an image scaling algorithm. The property applies to an element itself, to any images set in its other properties, and to its descendants.\n   *\n   * **Syntax**: `auto | crisp-edges | pixelated`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **13** | **3.6** | **6**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/image-rendering\n   */\n  \"image-rendering\"?: Property.ImageRendering | undefined;\n  /**\n   * **Syntax**: `[ from-image || <resolution> ] && snap?`\n   *\n   * **Initial value**: `1dppx`\n   */\n  \"image-resolution\"?: Property.ImageResolution | undefined;\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |   Safari    | Edge | IE  |\n   * | :-----: | :-----: | :---------: | :--: | :-: |\n   * | **110** |   No    | **9** _-x-_ | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/initial-letter\n   */\n  \"initial-letter\"?: Property.InitialLetter | undefined;\n  /**\n   * The **`inline-size`** CSS property defines the horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `width` or the `height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'width'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inline-size\n   */\n  \"inline-size\"?: Property.InlineSize<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  \"input-security\"?: Property.InputSecurity | undefined;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-end\n   */\n  \"inset-block-end\"?: Property.InsetBlockEnd<TLength> | undefined;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block-start\n   */\n  \"inset-block-start\"?: Property.InsetBlockStart<TLength> | undefined;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-end\n   */\n  \"inset-inline-end\"?: Property.InsetInlineEnd<TLength> | undefined;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline-start\n   */\n  \"inset-inline-start\"?: Property.InsetInlineStart<TLength> | undefined;\n  /**\n   * The **`isolation`** CSS property determines whether an element must create a new stacking context.\n   *\n   * **Syntax**: `auto | isolate`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **41** | **36**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/isolation\n   */\n  isolation?: Property.Isolation | undefined;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **20**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-content\n   */\n  \"justify-content\"?: Property.JustifyContent | undefined;\n  /**\n   * The CSS **`justify-items`** property defines the default `justify-self` for all items of the box, giving them all a default way of justifying each box along the appropriate axis.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ] | legacy | legacy && [ left | right | center ]`\n   *\n   * **Initial value**: `legacy`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **52** | **20**  | **9**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-items\n   */\n  \"justify-items\"?: Property.JustifyItems | undefined;\n  /**\n   * The CSS **`justify-self`** property sets the way a box is justified inside its alignment container along the appropriate axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? [ <self-position> | left | right ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :------: | :----: | :----: |\n   * | **57** | **45**  | **10.1** | **16** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-self\n   */\n  \"justify-self\"?: Property.JustifySelf | undefined;\n  /**\n   * The **`justify-tracks`** CSS property sets the alignment in the masonry axis for grid containers that have masonry in their inline axis.\n   *\n   * **Syntax**: `[ normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ] ]#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/justify-tracks\n   */\n  \"justify-tracks\"?: Property.JustifyTracks | undefined;\n  /**\n   * The **`left`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/left\n   */\n  left?: Property.Left<TLength> | undefined;\n  /**\n   * The **`letter-spacing`** CSS property sets the horizontal spacing behavior between text characters. This value is added to the natural spacing between characters while rendering the text. Positive values of `letter-spacing` causes characters to spread farther apart, while negative values of `letter-spacing` bring characters closer together.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/letter-spacing\n   */\n  \"letter-spacing\"?: Property.LetterSpacing<TLength> | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE    |\n   * | :-----: | :-----: | :-----: | :----: | :-----: |\n   * | **58**  | **69**  | **11**  | **14** | **5.5** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |         |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-break\n   */\n  \"line-break\"?: Property.LineBreak | undefined;\n  /**\n   * The **`line-height`** CSS property sets the height of a line box. It's commonly used to set the distance between lines of text. On block-level elements, it specifies the minimum height of line boxes within the element. On non-replaced inline elements, it specifies the height that is used to calculate line box height.\n   *\n   * **Syntax**: `normal | <number> | <length> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height\n   */\n  \"line-height\"?: Property.LineHeight<TLength> | undefined;\n  /**\n   * The **`line-height-step`** CSS property sets the step unit for line box heights. When the property is set, line box heights are rounded up to the closest multiple of the unit.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |  n/a   |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/line-height-step\n   */\n  \"line-height-step\"?: Property.LineHeightStep<TLength> | undefined;\n  /**\n   * The **`list-style-image`** CSS property sets an image to be used as the list item marker.\n   *\n   * **Syntax**: `<image> | none`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-image\n   */\n  \"list-style-image\"?: Property.ListStyleImage | undefined;\n  /**\n   * The **`list-style-position`** CSS property sets the position of the `::marker` relative to a list item.\n   *\n   * **Syntax**: `inside | outside`\n   *\n   * **Initial value**: `outside`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-position\n   */\n  \"list-style-position\"?: Property.ListStylePosition | undefined;\n  /**\n   * The **`list-style-type`** CSS property sets the marker (such as a disc, character, or custom counter style) of a list item element.\n   *\n   * **Syntax**: `<counter-style> | <string> | none`\n   *\n   * **Initial value**: `disc`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style-type\n   */\n  \"list-style-type\"?: Property.ListStyleType | undefined;\n  /**\n   * The **`margin-block-end`** CSS property defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-end\n   */\n  \"margin-block-end\"?: Property.MarginBlockEnd<TLength> | undefined;\n  /**\n   * The **`margin-block-start`** CSS property defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block-start\n   */\n  \"margin-block-start\"?: Property.MarginBlockStart<TLength> | undefined;\n  /**\n   * The **`margin-bottom`** CSS property sets the margin area on the bottom of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-bottom\n   */\n  \"margin-bottom\"?: Property.MarginBottom<TLength> | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome          |        Firefox        |          Safari          | Edge | IE  |\n   * | :----------------------: | :-------------------: | :----------------------: | :--: | :-: |\n   * |          **69**          |        **41**         |         **12.1**         | n/a  | No  |\n   * | 2 _(-webkit-margin-end)_ | 3 _(-moz-margin-end)_ | 3 _(-webkit-margin-end)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-end\n   */\n  \"margin-inline-end\"?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome           |         Firefox         |           Safari           | Edge | IE  |\n   * | :------------------------: | :---------------------: | :------------------------: | :--: | :-: |\n   * |           **69**           |         **41**          |          **12.1**          | n/a  | No  |\n   * | 2 _(-webkit-margin-start)_ | 3 _(-moz-margin-start)_ | 3 _(-webkit-margin-start)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline-start\n   */\n  \"margin-inline-start\"?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * The **`margin-left`** CSS property sets the margin area on the left side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-left\n   */\n  \"margin-left\"?: Property.MarginLeft<TLength> | undefined;\n  /**\n   * The **`margin-right`** CSS property sets the margin area on the right side of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-right\n   */\n  \"margin-right\"?: Property.MarginRight<TLength> | undefined;\n  /**\n   * The **`margin-top`** CSS property sets the margin area on the top of an element. A positive value places it farther from its neighbors, while a negative value places it closer.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-top\n   */\n  \"margin-top\"?: Property.MarginTop<TLength> | undefined;\n  /**\n   * The `margin-trim` property allows the container to trim the margins of its children where they adjoin the container's edges.\n   *\n   * **Syntax**: `none | in-flow | all`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * |   No   |   No    | **16.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-trim\n   */\n  \"margin-trim\"?: Property.MarginTrim | undefined;\n  /**\n   * The **`mask-border-mode`** CSS property specifies the blending mode used in a mask border.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `alpha`\n   */\n  \"mask-border-mode\"?: Property.MaskBorderMode | undefined;\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   *\n   * |                 Chrome                  | Firefox |                Safari                 | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :-----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-outset)_ |   No    |               **17.2**                | n/a  | No  |\n   * |                                         |         | 3.1 _(-webkit-mask-box-image-outset)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-outset\n   */\n  \"mask-border-outset\"?: Property.MaskBorderOutset<TLength> | undefined;\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   *\n   * |                 Chrome                  | Firefox |                Safari                 | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :-----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-repeat)_ |   No    |               **17.2**                | n/a  | No  |\n   * |                                         |         | 3.1 _(-webkit-mask-box-image-repeat)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-repeat\n   */\n  \"mask-border-repeat\"?: Property.MaskBorderRepeat | undefined;\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   *\n   * |                 Chrome                 | Firefox |                Safari                | Edge | IE  |\n   * | :------------------------------------: | :-----: | :----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-slice)_ |   No    |               **17.2**               | n/a  | No  |\n   * |                                        |         | 3.1 _(-webkit-mask-box-image-slice)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-slice\n   */\n  \"mask-border-slice\"?: Property.MaskBorderSlice | undefined;\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * |                 Chrome                  | Firefox |                Safari                 | Edge | IE  |\n   * | :-------------------------------------: | :-----: | :-----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-source)_ |   No    |               **17.2**                | n/a  | No  |\n   * |                                         |         | 3.1 _(-webkit-mask-box-image-source)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-source\n   */\n  \"mask-border-source\"?: Property.MaskBorderSource | undefined;\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   *\n   * |                 Chrome                 | Firefox |                Safari                | Edge | IE  |\n   * | :------------------------------------: | :-----: | :----------------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image-width)_ |   No    |               **17.2**               | n/a  | No  |\n   * |                                        |         | 3.1 _(-webkit-mask-box-image-width)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border-width\n   */\n  \"mask-border-width\"?: Property.MaskBorderWidth<TLength> | undefined;\n  /**\n   * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <geometry-box> | no-clip ]#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **120** | **53**  | **15.4** | n/a  | No  |\n   * | 1 _-x-_ |         | 4 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-clip\n   */\n  \"mask-clip\"?: Property.MaskClip | undefined;\n  /**\n   * The **`mask-composite`** CSS property represents a compositing operation used on the current mask layer with the mask layers below it.\n   *\n   * **Syntax**: `<compositing-operator>#`\n   *\n   * **Initial value**: `add`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge  | IE  |\n   * | :-----: | :-----: | :------: | :---: | :-: |\n   * | **120** | **53**  | **15.4** | 18-79 | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-composite\n   */\n  \"mask-composite\"?: Property.MaskComposite | undefined;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the `mask-mode` property.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge  | IE  |\n   * | :-----: | :-----: | :------: | :---: | :-: |\n   * | **120** | **53**  | **15.4** | 16-79 | No  |\n   * | 1 _-x-_ |         | 4 _-x-_  |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-image\n   */\n  \"mask-image\"?: Property.MaskImage | undefined;\n  /**\n   * The **`mask-mode`** CSS property sets whether the mask reference defined by `mask-image` is treated as a luminance or alpha mask.\n   *\n   * **Syntax**: `<masking-mode>#`\n   *\n   * **Initial value**: `match-source`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **120** | **53**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-mode\n   */\n  \"mask-mode\"?: Property.MaskMode | undefined;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `<geometry-box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **120** | **53**  | **15.4** | n/a  | No  |\n   * | 1 _-x-_ |         | 4 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-origin\n   */\n  \"mask-origin\"?: Property.MaskOrigin | undefined;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `center`\n   *\n   * | Chrome  | Firefox |  Safari   | Edge  | IE  |\n   * | :-----: | :-----: | :-------: | :---: | :-: |\n   * | **120** | **53**  | **15.4**  | 18-79 | No  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-position\n   */\n  \"mask-position\"?: Property.MaskPosition<TLength> | undefined;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   *\n   * | Chrome  | Firefox |  Safari   | Edge  | IE  |\n   * | :-----: | :-----: | :-------: | :---: | :-: |\n   * | **120** | **53**  | **15.4**  | 18-79 | No  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-repeat\n   */\n  \"mask-repeat\"?: Property.MaskRepeat | undefined;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge  | IE  |\n   * | :-----: | :-----: | :------: | :---: | :-: |\n   * | **120** | **53**  | **15.4** | 18-79 | No  |\n   * | 4 _-x-_ |         | 4 _-x-_  |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-size\n   */\n  \"mask-size\"?: Property.MaskSize<TLength> | undefined;\n  /**\n   * The **`mask-type`** CSS property sets whether an SVG `<mask>` element is used as a _luminance_ or an _alpha_ mask. It applies to the `<mask>` element itself.\n   *\n   * **Syntax**: `luminance | alpha`\n   *\n   * **Initial value**: `luminance`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **24** | **35**  | **7**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-type\n   */\n  \"mask-type\"?: Property.MaskType | undefined;\n  /**\n   * This feature is not Baseline because it does not work in some of the most widely-used browsers.\n   *\n   * **Syntax**: `[ pack | next ] || [ definite-first | ordered ]`\n   *\n   * **Initial value**: `pack`\n   *\n   * | Chrome | Firefox |   Safari    | Edge | IE  |\n   * | :----: | :-----: | :---------: | :--: | :-: |\n   * |   No   |   No    | **preview** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/masonry-auto-flow\n   */\n  \"masonry-auto-flow\"?: Property.MasonryAutoFlow | undefined;\n  /**\n   * The **`math-depth`** property describes a notion of _depth_ for each element of a mathematical formula, with respect to the top-level container of that formula. Concretely, this is used to determine the computed value of the font-size property when its specified value is `math`.\n   *\n   * **Syntax**: `auto-add | add(<integer>) | <integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** | **117** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-depth\n   */\n  \"math-depth\"?: Property.MathDepth | undefined;\n  /**\n   * The `math-shift` property indicates whether superscripts inside MathML formulas should be raised by a normal or compact shift.\n   *\n   * **Syntax**: `normal | compact`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **109** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-shift\n   */\n  \"math-shift\"?: Property.MathShift | undefined;\n  /**\n   * The `math-style` property indicates whether MathML equations should render with normal or compact height.\n   *\n   * **Syntax**: `normal | compact`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **109** | **117** | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/math-style\n   */\n  \"math-style\"?: Property.MathStyle | undefined;\n  /**\n   * The **`max-block-size`** CSS property specifies the maximum size of an element in the direction opposite that of the writing direction as specified by `writing-mode`. That is, if the writing direction is horizontal, then `max-block-size` is equivalent to `max-height`; if the writing direction is vertical, `max-block-size` is the same as `max-width`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-block-size\n   */\n  \"max-block-size\"?: Property.MaxBlockSize<TLength> | undefined;\n  /**\n   * The **`max-height`** CSS property sets the maximum height of an element. It prevents the used value of the `height` property from becoming larger than the value specified for `max-height`.\n   *\n   * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **18** |  **1**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-height\n   */\n  \"max-height\"?: Property.MaxHeight<TLength> | undefined;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |   Safari   | Edge | IE  |\n   * | :----: | :-----: | :--------: | :--: | :-: |\n   * | **57** | **41**  |  **12.1**  | n/a  | No  |\n   * |        |         | 10.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-inline-size\n   */\n  \"max-inline-size\"?: Property.MaxInlineSize<TLength> | undefined;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  \"max-lines\"?: Property.MaxLines | undefined;\n  /**\n   * The **`max-width`** CSS property sets the maximum width of an element. It prevents the used value of the `width` property from becoming larger than the value specified by `max-width`.\n   *\n   * **Syntax**: `none | <length-percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/max-width\n   */\n  \"max-width\"?: Property.MaxWidth<TLength> | undefined;\n  /**\n   * The **`min-block-size`** CSS property defines the minimum horizontal or vertical size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-block-size\n   */\n  \"min-block-size\"?: Property.MinBlockSize<TLength> | undefined;\n  /**\n   * The **`min-height`** CSS property sets the minimum height of an element. It prevents the used value of the `height` property from becoming smaller than the value specified for `min-height`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **3**  | **1.3** | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-height\n   */\n  \"min-height\"?: Property.MinHeight<TLength> | undefined;\n  /**\n   * The **`min-inline-size`** CSS property defines the horizontal or vertical minimal size of an element's block, depending on its writing mode. It corresponds to either the `min-width` or the `min-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'min-width'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-inline-size\n   */\n  \"min-inline-size\"?: Property.MinInlineSize<TLength> | undefined;\n  /**\n   * The **`min-width`** CSS property sets the minimum width of an element. It prevents the used value of the `width` property from becoming smaller than the value specified for `min-width`.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **7** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/min-width\n   */\n  \"min-width\"?: Property.MinWidth<TLength> | undefined;\n  /**\n   * The **`mix-blend-mode`** CSS property sets how an element's content should blend with the content of the element's parent and the element's background.\n   *\n   * **Syntax**: `<blend-mode> | plus-lighter`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **41** | **32**  | **8**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mix-blend-mode\n   */\n  \"mix-blend-mode\"?: Property.MixBlendMode | undefined;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **55**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-distance)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  \"motion-distance\"?: Property.OffsetDistance<TLength> | undefined;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | <offset-path> || <coord-box>`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox |  Safari  | Edge | IE  |\n   * | :----------------: | :-----: | :------: | :--: | :-: |\n   * |       **55**       | **72**  | **15.4** | n/a  | No  |\n   * | 46 _(motion-path)_ |         |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  \"motion-path\"?: Property.OffsetPath | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **56**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  \"motion-rotation\"?: Property.OffsetRotate | undefined;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **32** | **36**  | **10** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-fit\n   */\n  \"object-fit\"?: Property.ObjectFit | undefined;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **32** | **36**  | **10** | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/object-position\n   */\n  \"object-position\"?: Property.ObjectPosition<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **116** | **72**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-anchor\n   */\n  \"offset-anchor\"?: Property.OffsetAnchor<TLength> | undefined;\n  /**\n   * The **`offset-distance`** CSS property specifies a position along an `offset-path` for an element to be placed.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **55**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-distance)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-distance\n   */\n  \"offset-distance\"?: Property.OffsetDistance<TLength> | undefined;\n  /**\n   * The **`offset-path`** CSS property specifies a motion path for an element to follow and defines the element's positioning within the parent container or SVG coordinate system.\n   *\n   * **Syntax**: `none | <offset-path> || <coord-box>`\n   *\n   * **Initial value**: `none`\n   *\n   * |       Chrome       | Firefox |  Safari  | Edge | IE  |\n   * | :----------------: | :-----: | :------: | :--: | :-: |\n   * |       **55**       | **72**  | **15.4** | n/a  | No  |\n   * | 46 _(motion-path)_ |         |          |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-path\n   */\n  \"offset-path\"?: Property.OffsetPath | undefined;\n  /**\n   * **Syntax**: `normal | auto | <position>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **116** |   n/a   | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-position\n   */\n  \"offset-position\"?: Property.OffsetPosition<TLength> | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **56**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  \"offset-rotate\"?: Property.OffsetRotate | undefined;\n  /**\n   * The **`offset-rotate`** CSS property defines the orientation/direction of the element as it is positioned along the `offset-path`.\n   *\n   * **Syntax**: `[ auto | reverse ] || <angle>`\n   *\n   * **Initial value**: `auto`\n   *\n   * |         Chrome         | Firefox | Safari | Edge | IE  |\n   * | :--------------------: | :-----: | :----: | :--: | :-: |\n   * |         **56**         | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion-rotation)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset-rotate\n   */\n  \"offset-rotation\"?: Property.OffsetRotate | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **2**  | **12** | **9** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/opacity\n   */\n  opacity?: Property.Opacity | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/order\n   */\n  order?: Property.Order | undefined;\n  /**\n   * The **`orphans`** CSS property sets the minimum number of lines in a block container that must be shown at the _bottom_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/orphans\n   */\n  orphans?: Property.Orphans | undefined;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-color\n   */\n  \"outline-color\"?: Property.OutlineColor | undefined;\n  /**\n   * The **`outline-offset`** CSS property sets the amount of space between an outline and the edge or border of an element.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :-----: | :----: | :-: |\n   * | **1**  | **1.5** | **1.2** | **15** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-offset\n   */\n  \"outline-offset\"?: Property.OutlineOffset<TLength> | undefined;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-style\n   */\n  \"outline-style\"?: Property.OutlineStyle | undefined;\n  /**\n   * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **1.5** | **1.2** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline-width\n   */\n  \"outline-width\"?: Property.OutlineWidth<TLength> | undefined;\n  /**\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **56** | **66**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-anchor\n   */\n  \"overflow-anchor\"?: Property.OverflowAnchor | undefined;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-block\n   */\n  \"overflow-block\"?: Property.OverflowBlock | undefined;\n  /**\n   * The **`overflow-clip-box`** CSS property specifies relative to which box the clipping happens when there is an overflow. It is short hand for the `overflow-clip-box-inline` and `overflow-clip-box-block` properties.\n   *\n   * **Syntax**: `padding-box | content-box`\n   *\n   * **Initial value**: `padding-box`\n   */\n  \"overflow-clip-box\"?: Property.OverflowClipBox | undefined;\n  /**\n   * **Syntax**: `<visual-box> || <length [0,∞]>`\n   *\n   * **Initial value**: `0px`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **90** | **102** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-clip-margin\n   */\n  \"overflow-clip-margin\"?: Property.OverflowClipMargin<TLength> | undefined;\n  /**\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **69**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-inline\n   */\n  \"overflow-inline\"?: Property.OverflowInline | undefined;\n  /**\n   * The **`overflow-wrap`** CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.\n   *\n   * **Syntax**: `normal | break-word | anywhere`\n   *\n   * **Initial value**: `normal`\n   *\n   * |     Chrome      |      Firefox      |     Safari      |       Edge       |          IE           |\n   * | :-------------: | :---------------: | :-------------: | :--------------: | :-------------------: |\n   * |     **23**      |      **49**       |      **7**      |      **18**      | **5.5** _(word-wrap)_ |\n   * | 1 _(word-wrap)_ | 3.5 _(word-wrap)_ | 1 _(word-wrap)_ | 12 _(word-wrap)_ |                       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-wrap\n   */\n  \"overflow-wrap\"?: Property.OverflowWrap | undefined;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-x\n   */\n  \"overflow-x\"?: Property.OverflowX | undefined;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  | **3.5** | **3**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow-y\n   */\n  \"overflow-y\"?: Property.OverflowY | undefined;\n  /**\n   * The **`overlay`** CSS property specifies whether an element appearing in the top layer (for example, a shown popover or modal `<dialog>` element) is actually rendered in the top layer. This property is only relevant within a list of `transition-property` values, and only if `allow-discrete` is set as the `transition-behavior`.\n   *\n   * **Syntax**: `none | auto`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **117** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overlay\n   */\n  overlay?: Property.Overlay | undefined;\n  /**\n   * The **`overscroll-behavior-block`** CSS property sets the browser's behavior when the block direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **77** | **73**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-block\n   */\n  \"overscroll-behavior-block\"?: Property.OverscrollBehaviorBlock | undefined;\n  /**\n   * The **`overscroll-behavior-inline`** CSS property sets the browser's behavior when the inline direction boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **77** | **73**  | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-inline\n   */\n  \"overscroll-behavior-inline\"?: Property.OverscrollBehaviorInline | undefined;\n  /**\n   * The **`overscroll-behavior-x`** CSS property sets the browser's behavior when the horizontal boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-x\n   */\n  \"overscroll-behavior-x\"?: Property.OverscrollBehaviorX | undefined;\n  /**\n   * The **`overscroll-behavior-y`** CSS property sets the browser's behavior when the vertical boundary of a scrolling area is reached.\n   *\n   * **Syntax**: `contain | none | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior-y\n   */\n  \"overscroll-behavior-y\"?: Property.OverscrollBehaviorY | undefined;\n  /**\n   * The **`padding-block-end`** CSS property defines the logical block end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-end\n   */\n  \"padding-block-end\"?: Property.PaddingBlockEnd<TLength> | undefined;\n  /**\n   * The **`padding-block-start`** CSS property defines the logical block start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block-start\n   */\n  \"padding-block-start\"?: Property.PaddingBlockStart<TLength> | undefined;\n  /**\n   * The **`padding-bottom`** CSS property sets the height of the padding area on the bottom of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-bottom\n   */\n  \"padding-bottom\"?: Property.PaddingBottom<TLength> | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |          Chrome           |        Firefox         |          Safari           | Edge | IE  |\n   * | :-----------------------: | :--------------------: | :-----------------------: | :--: | :-: |\n   * |          **69**           |         **41**         |         **12.1**          | n/a  | No  |\n   * | 2 _(-webkit-padding-end)_ | 3 _(-moz-padding-end)_ | 3 _(-webkit-padding-end)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-end\n   */\n  \"padding-inline-end\"?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   *\n   * |           Chrome            |         Firefox          |           Safari            | Edge | IE  |\n   * | :-------------------------: | :----------------------: | :-------------------------: | :--: | :-: |\n   * |           **69**            |          **41**          |          **12.1**           | n/a  | No  |\n   * | 2 _(-webkit-padding-start)_ | 3 _(-moz-padding-start)_ | 3 _(-webkit-padding-start)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline-start\n   */\n  \"padding-inline-start\"?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * The **`padding-left`** CSS property sets the width of the padding area to the left of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-left\n   */\n  \"padding-left\"?: Property.PaddingLeft<TLength> | undefined;\n  /**\n   * The **`padding-right`** CSS property sets the width of the padding area on the right of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-right\n   */\n  \"padding-right\"?: Property.PaddingRight<TLength> | undefined;\n  /**\n   * The **`padding-top`** CSS property sets the height of the padding area on the top of an element.\n   *\n   * **Syntax**: `<length> | <percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-top\n   */\n  \"padding-top\"?: Property.PaddingTop<TLength> | undefined;\n  /**\n   * The **`page`** CSS property is used to specify the named page, a specific type of page defined by the `@page` at-rule.\n   *\n   * **Syntax**: `auto | <custom-ident>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari   | Edge | IE  |\n   * | :----: | :-----: | :-------: | :--: | :-: |\n   * | **85** | **110** | **≤13.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page\n   */\n  page?: Property.Page | undefined;\n  /**\n   * The **`page-break-after`** CSS property adjusts page breaks _after_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-after\n   */\n  \"page-break-after\"?: Property.PageBreakAfter | undefined;\n  /**\n   * The **`page-break-before`** CSS property adjusts page breaks _before_ the current element.\n   *\n   * **Syntax**: `auto | always | avoid | left | right | recto | verso`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **1**  | **1.2** | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-before\n   */\n  \"page-break-before\"?: Property.PageBreakBefore | undefined;\n  /**\n   * The **`page-break-inside`** CSS property adjusts page breaks _inside_ the current element.\n   *\n   * **Syntax**: `auto | avoid`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  | **19**  | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/page-break-inside\n   */\n  \"page-break-inside\"?: Property.PageBreakInside | undefined;\n  /**\n   * The **`paint-order`** CSS property lets you control the order in which the fill and stroke (and painting markers) of text content and shapes are drawn.\n   *\n   * **Syntax**: `normal | [ fill || stroke || markers ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **35** | **60**  | **8**  | **17** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/paint-order\n   */\n  \"paint-order\"?: Property.PaintOrder | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **36**  | **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ |         | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective\n   */\n  perspective?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **36**  | **16**  |  **9**  | **12** | **10** |\n   * | 12 _-x-_ |         | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/perspective-origin\n   */\n  \"perspective-origin\"?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`pointer-events`** CSS property sets under what circumstances (if any) a particular graphic element can become the target of pointer events.\n   *\n   * **Syntax**: `auto | none | visiblePainted | visibleFill | visibleStroke | visible | painted | fill | stroke | all | inherit`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE   |\n   * | :----: | :-----: | :----: | :----: | :----: |\n   * | **1**  | **1.5** | **4**  | **12** | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/pointer-events\n   */\n  \"pointer-events\"?: Property.PointerEvents | undefined;\n  /**\n   * The **`position`** CSS property sets how an element is positioned in a document. The `top`, `right`, `bottom`, and `left` properties determine the final location of positioned elements.\n   *\n   * **Syntax**: `static | relative | absolute | sticky | fixed`\n   *\n   * **Initial value**: `static`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/position\n   */\n  position?: Property.Position | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   *\n   * |    Chrome    |       Firefox       |  Safari  |     Edge     | IE  |\n   * | :----------: | :-----------------: | :------: | :----------: | :-: |\n   * | **17** _-x-_ |       **97**        | **15.4** | **79** _-x-_ | No  |\n   * |              | 48 _(color-adjust)_ | 6 _-x-_  |              |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/print-color-adjust\n   */\n  \"print-color-adjust\"?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`quotes`** CSS property sets how the browser should render quotation marks that are added using the `open-quotes` or `close-quotes` values of the CSS `content` property.\n   *\n   * **Syntax**: `none | auto | [ <string> <string> ]+`\n   *\n   * **Initial value**: depends on user agent\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **11** | **1.5** | **9**  | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/quotes\n   */\n  quotes?: Property.Quotes | undefined;\n  /**\n   * The **`resize`** CSS property sets whether an element is resizable, and if so, in which directions.\n   *\n   * **Syntax**: `none | both | horizontal | vertical | block | inline`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **1**  |  **4**  | **3**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/resize\n   */\n  resize?: Property.Resize | undefined;\n  /**\n   * The **`right`** CSS property participates in specifying the horizontal position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/right\n   */\n  right?: Property.Right<TLength> | undefined;\n  /**\n   * The **`rotate`** CSS property allows you to specify rotation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` property.\n   *\n   * **Syntax**: `none | <angle> | [ x | y | z | <number>{3} ] && <angle>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/rotate\n   */\n  rotate?: Property.Rotate | undefined;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's rows.\n   *\n   * **Syntax**: `normal | <length-percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **47** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/row-gap\n   */\n  \"row-gap\"?: Property.RowGap<TLength> | undefined;\n  /**\n   * The **`ruby-align`** CSS property defines the distribution of the different ruby elements over the base.\n   *\n   * **Syntax**: `start | center | space-between | space-around`\n   *\n   * **Initial value**: `space-around`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * |   No   | **38**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-align\n   */\n  \"ruby-align\"?: Property.RubyAlign | undefined;\n  /**\n   * **Syntax**: `separate | collapse | auto`\n   *\n   * **Initial value**: `separate`\n   */\n  \"ruby-merge\"?: Property.RubyMerge | undefined;\n  /**\n   * The **`ruby-position`** CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (`over`), under it (`under`), or between the characters on their right side (`inter-character`).\n   *\n   * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`\n   *\n   * **Initial value**: `alternate`\n   *\n   * | Chrome  | Firefox |   Safari    | Edge  | IE  |\n   * | :-----: | :-----: | :---------: | :---: | :-: |\n   * | **84**  | **38**  | **7** _-x-_ | 12-79 | No  |\n   * | 1 _-x-_ |         |             |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/ruby-position\n   */\n  \"ruby-position\"?: Property.RubyPosition | undefined;\n  /**\n   * The **`scale`** CSS property allows you to specify scale transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <number>{1,3}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scale\n   */\n  scale?: Property.Scale | undefined;\n  /**\n   * The **`scroll-behavior`** CSS property sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.\n   *\n   * **Syntax**: `auto | smooth`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **61** | **36**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-behavior\n   */\n  \"scroll-behavior\"?: Property.ScrollBehavior | undefined;\n  /**\n   * The `scroll-margin-block-end` property defines the margin of the scroll snap area at the end of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-end\n   */\n  \"scroll-margin-block-end\"?: Property.ScrollMarginBlockEnd<TLength> | undefined;\n  /**\n   * The `scroll-margin-block-start` property defines the margin of the scroll snap area at the start of the block dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block-start\n   */\n  \"scroll-margin-block-start\"?: Property.ScrollMarginBlockStart<TLength> | undefined;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari              | Edge | IE  |\n   * | :----: | :-----: | :------------------------------: | :--: | :-: |\n   * | **69** | **68**  |             **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-bottom)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  \"scroll-margin-bottom\"?: Property.ScrollMarginBottom<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline-end` property defines the margin of the scroll snap area at the end of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-end\n   */\n  \"scroll-margin-inline-end\"?: Property.ScrollMarginInlineEnd<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline-start` property defines the margin of the scroll snap area at the start of the inline dimension that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline-start\n   */\n  \"scroll-margin-inline-start\"?: Property.ScrollMarginInlineStart<TLength> | undefined;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari             | Edge | IE  |\n   * | :----: | :-----: | :----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-left)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  \"scroll-margin-left\"?: Property.ScrollMarginLeft<TLength> | undefined;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari              | Edge | IE  |\n   * | :----: | :-----: | :-----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-right)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  \"scroll-margin-right\"?: Property.ScrollMarginRight<TLength> | undefined;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             | Edge | IE  |\n   * | :----: | :-----: | :---------------------------: | :--: | :-: |\n   * | **69** | **68**  |           **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-top)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  \"scroll-margin-top\"?: Property.ScrollMarginTop<TLength> | undefined;\n  /**\n   * The `scroll-padding-block-end` property defines offsets for the end edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-end\n   */\n  \"scroll-padding-block-end\"?: Property.ScrollPaddingBlockEnd<TLength> | undefined;\n  /**\n   * The `scroll-padding-block-start` property defines offsets for the start edge in the block dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block-start\n   */\n  \"scroll-padding-block-start\"?: Property.ScrollPaddingBlockStart<TLength> | undefined;\n  /**\n   * The `scroll-padding-bottom` property defines offsets for the bottom of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-bottom\n   */\n  \"scroll-padding-bottom\"?: Property.ScrollPaddingBottom<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline-end` property defines offsets for the end edge in the inline dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-end\n   */\n  \"scroll-padding-inline-end\"?: Property.ScrollPaddingInlineEnd<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline-start` property defines offsets for the start edge in the inline dimension of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline-start\n   */\n  \"scroll-padding-inline-start\"?: Property.ScrollPaddingInlineStart<TLength> | undefined;\n  /**\n   * The `scroll-padding-left` property defines offsets for the left of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-left\n   */\n  \"scroll-padding-left\"?: Property.ScrollPaddingLeft<TLength> | undefined;\n  /**\n   * The `scroll-padding-right` property defines offsets for the right of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-right\n   */\n  \"scroll-padding-right\"?: Property.ScrollPaddingRight<TLength> | undefined;\n  /**\n   * The **`scroll-padding-top`** property defines offsets for the top of the _optimal viewing region_ of the scrollport: the region used as the target region for placing things in view of the user. This allows the author to exclude regions of the scrollport that are obscured by other content (such as fixed-positioned toolbars or sidebars) or to put more breathing room between a targeted element and the edges of the scrollport.\n   *\n   * **Syntax**: `auto | <length-percentage>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-top\n   */\n  \"scroll-padding-top\"?: Property.ScrollPaddingTop<TLength> | undefined;\n  /**\n   * The `scroll-snap-align` property specifies the box's snap position as an alignment of its snap area (as the alignment subject) within its snap container's snapport (as the alignment container). The two values specify the snapping alignment in the block axis and inline axis, respectively. If only one value is specified, the second value defaults to the same value.\n   *\n   * **Syntax**: `[ none | start | end | center ]{1,2}`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-align\n   */\n  \"scroll-snap-align\"?: Property.ScrollSnapAlign | undefined;\n  /**\n   * The `scroll-margin-bottom` property defines the bottom margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |              Safari              | Edge | IE  |\n   * | :----: | :-----: | :------------------------------: | :--: | :-: |\n   * | **69** | **68**  |             **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-bottom)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-bottom\n   */\n  \"scroll-snap-margin-bottom\"?: Property.ScrollMarginBottom<TLength> | undefined;\n  /**\n   * The `scroll-margin-left` property defines the left margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari             | Edge | IE  |\n   * | :----: | :-----: | :----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-left)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-left\n   */\n  \"scroll-snap-margin-left\"?: Property.ScrollMarginLeft<TLength> | undefined;\n  /**\n   * The `scroll-margin-right` property defines the right margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |             Safari              | Edge | IE  |\n   * | :----: | :-----: | :-----------------------------: | :--: | :-: |\n   * | **69** | **68**  |            **14.1**             | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-right)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-right\n   */\n  \"scroll-snap-margin-right\"?: Property.ScrollMarginRight<TLength> | undefined;\n  /**\n   * The `scroll-margin-top` property defines the top margin of the scroll snap area that is used for snapping this box to the snapport. The scroll snap area is determined by taking the transformed border box, finding its rectangular bounding box (axis-aligned in the scroll container's coordinate space), then adding the specified outsets.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |            Safari             | Edge | IE  |\n   * | :----: | :-----: | :---------------------------: | :--: | :-: |\n   * | **69** | **68**  |           **14.1**            | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin-top)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-top\n   */\n  \"scroll-snap-margin-top\"?: Property.ScrollMarginTop<TLength> | undefined;\n  /**\n   * The **`scroll-snap-stop`** CSS property defines whether or not the scroll container is allowed to \"pass over\" possible snap positions.\n   *\n   * **Syntax**: `normal | always`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **75** | **103** | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-stop\n   */\n  \"scroll-snap-stop\"?: Property.ScrollSnapStop | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |      IE      |\n   * | :----: | :-----: | :-----: | :----: | :----------: |\n   * | **69** |  39-68  | **11**  | **79** | **10** _-x-_ |\n   * |        |         | 9 _-x-_ |        |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-snap-type\n   */\n  \"scroll-snap-type\"?: Property.ScrollSnapType | undefined;\n  /**\n   * The **`scroll-timeline-axis`** CSS property can be used to specify the scrollbar that will be used to provide the timeline for a scroll-timeline animation.\n   *\n   * **Syntax**: `[ block | inline | x | y ]#`\n   *\n   * **Initial value**: `block`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-axis\n   */\n  \"scroll-timeline-axis\"?: Property.ScrollTimelineAxis | undefined;\n  /**\n   * The **`scroll-timeline-name`** CSS property defines a name that can be used to identify an element as the source of a scroll timeline for an animation.\n   *\n   * **Syntax**: `none | <dashed-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline-name\n   */\n  \"scroll-timeline-name\"?: Property.ScrollTimelineName | undefined;\n  /**\n   * The **`scrollbar-color`** CSS property sets the color of the scrollbar track and thumb.\n   *\n   * **Syntax**: `auto | <color>{2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **121** | **64**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-color\n   */\n  \"scrollbar-color\"?: Property.ScrollbarColor | undefined;\n  /**\n   * The **`scrollbar-gutter`** CSS property allows authors to reserve space for the scrollbar, preventing unwanted layout changes as the content grows while also avoiding unnecessary visuals when scrolling isn't needed.\n   *\n   * **Syntax**: `auto | stable && both-edges?`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **94** | **97**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-gutter\n   */\n  \"scrollbar-gutter\"?: Property.ScrollbarGutter | undefined;\n  /**\n   * The **`scrollbar-width`** property allows the author to set the maximum thickness of an element's scrollbars when they are shown.\n   *\n   * **Syntax**: `auto | thin | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **121** | **64**  |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scrollbar-width\n   */\n  \"scrollbar-width\"?: Property.ScrollbarWidth | undefined;\n  /**\n   * The **`shape-image-threshold`** CSS property sets the alpha channel threshold used to extract the shape using an image as the value for `shape-outside`.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `0.0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-image-threshold\n   */\n  \"shape-image-threshold\"?: Property.ShapeImageThreshold | undefined;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-margin\n   */\n  \"shape-margin\"?: Property.ShapeMargin<TLength> | undefined;\n  /**\n   * The **`shape-outside`** CSS property defines a shape—which may be non-rectangular—around which adjacent inline content should wrap. By default, inline content wraps around its margin box; `shape-outside` provides a way to customize this wrapping, making it possible to wrap text around complex objects rather than simple boxes.\n   *\n   * **Syntax**: `none | [ <shape-box> || <basic-shape> ] | <image>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **37** | **62**  | **10.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/shape-outside\n   */\n  \"shape-outside\"?: Property.ShapeOutside | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **21** | **91**  | **7**  | n/a  | No  |\n   * |        | 4 _-x-_ |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/tab-size\n   */\n  \"tab-size\"?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`table-layout`** CSS property sets the algorithm used to lay out `<table>` cells, rows, and columns.\n   *\n   * **Syntax**: `auto | fixed`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **14** |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/table-layout\n   */\n  \"table-layout\"?: Property.TableLayout | undefined;\n  /**\n   * The **`text-align`** CSS property sets the horizontal alignment of the inline-level content inside a block element or table-cell box. This means it works like `vertical-align` but in the horizontal direction.\n   *\n   * **Syntax**: `start | end | left | right | center | justify | match-parent`\n   *\n   * **Initial value**: `start`, or a nameless value that acts as `left` if _direction_ is `ltr`, `right` if _direction_ is `rtl` if `start` is not supported by the browser.\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align\n   */\n  \"text-align\"?: Property.TextAlign | undefined;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **47** | **49**  | **16** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-align-last\n   */\n  \"text-align-last\"?: Property.TextAlignLast | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   *\n   * |           Chrome           | Firefox |            Safari            |  Edge  |                   IE                   |\n   * | :------------------------: | :-----: | :--------------------------: | :----: | :------------------------------------: |\n   * |           **48**           | **48**  |           **15.4**           | **79** | **11** _(-ms-text-combine-horizontal)_ |\n   * | 9 _(-webkit-text-combine)_ |         | 5.1 _(-webkit-text-combine)_ |        |                                        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-combine-upright\n   */\n  \"text-combine-upright\"?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-color\n   */\n  \"text-decoration-color\"?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-line\n   */\n  \"text-decoration-line\"?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | 57-64  |   No    | **12.1** | n/a  | No  |\n   * |        |         | 7 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip\n   */\n  \"text-decoration-skip\"?: Property.TextDecorationSkip | undefined;\n  /**\n   * The **`text-decoration-skip-ink`** CSS property specifies how overlines and underlines are drawn when they pass over glyph ascenders and descenders.\n   *\n   * **Syntax**: `auto | all | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **64** | **70**  | **15.4** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-skip-ink\n   */\n  \"text-decoration-skip-ink\"?: Property.TextDecorationSkipInk | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **57** | **36**  | **12.1** | n/a  | No  |\n   * |        |         | 8 _-x-_  |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-style\n   */\n  \"text-decoration-style\"?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`text-decoration-thickness`** CSS property sets the stroke thickness of the decoration line that is used on text in an element, such as a line-through, underline, or overline.\n   *\n   * **Syntax**: `auto | from-font | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **89** | **70**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration-thickness\n   */\n  \"text-decoration-thickness\"?: Property.TextDecorationThickness<TLength> | undefined;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-color\n   */\n  \"text-emphasis-color\"?: Property.TextEmphasisColor | undefined;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-position\n   */\n  \"text-emphasis-position\"?: Property.TextEmphasisPosition | undefined;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis-style\n   */\n  \"text-emphasis-style\"?: Property.TextEmphasisStyle | undefined;\n  /**\n   * The **`text-indent`** CSS property sets the length of empty space (indentation) that is put before lines of text in a block.\n   *\n   * **Syntax**: `<length-percentage> && hanging? && each-line?`\n   *\n   * **Initial value**: `0`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-indent\n   */\n  \"text-indent\"?: Property.TextIndent<TLength> | undefined;\n  /**\n   * The **`text-justify`** CSS property sets what type of justification should be applied to text when `text-align``: justify;` is set on an element.\n   *\n   * **Syntax**: `auto | inter-character | inter-word | none`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge  |   IE   |\n   * | :----: | :-----: | :----: | :---: | :----: |\n   * |  n/a   | **55**  |   No   | 12-79 | **11** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-justify\n   */\n  \"text-justify\"?: Property.TextJustify | undefined;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   *\n   * |  Chrome  | Firefox |  Safari   | Edge | IE  |\n   * | :------: | :-----: | :-------: | :--: | :-: |\n   * |  **48**  | **41**  |  **14**   | n/a  | No  |\n   * | 11 _-x-_ |         | 5.1 _-x-_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-orientation\n   */\n  \"text-orientation\"?: Property.TextOrientation | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **1**  |  **7**  | **1.3** | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-overflow\n   */\n  \"text-overflow\"?: Property.TextOverflow | undefined;\n  /**\n   * The **`text-rendering`** CSS property provides information to the rendering engine about what to optimize for when rendering text.\n   *\n   * **Syntax**: `auto | optimizeSpeed | optimizeLegibility | geometricPrecision`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **4**  |  **1**  | **5**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-rendering\n   */\n  \"text-rendering\"?: Property.TextRendering | undefined;\n  /**\n   * The **`text-shadow`** CSS property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and any of its `decorations`. Each shadow is described by some combination of X and Y offsets from the element, blur radius, and color.\n   *\n   * **Syntax**: `none | <shadow-t>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **2**  | **3.5** | **1.1** | **12** | **10** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-shadow\n   */\n  \"text-shadow\"?: Property.TextShadow | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **54** |   No    |   No   | **79** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-size-adjust\n   */\n  \"text-size-adjust\"?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`text-transform`** CSS property specifies how to capitalize an element's text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized. It also can help improve legibility for ruby.\n   *\n   * **Syntax**: `none | capitalize | uppercase | lowercase | full-width | full-size-kana`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-transform\n   */\n  \"text-transform\"?: Property.TextTransform | undefined;\n  /**\n   * The **`text-underline-offset`** CSS property sets the offset distance of an underline text decoration line (applied using `text-decoration`) from its original position.\n   *\n   * **Syntax**: `auto | <length> | <percentage> `\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **70**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-offset\n   */\n  \"text-underline-offset\"?: Property.TextUnderlineOffset<TLength> | undefined;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :------: | :----: | :---: |\n   * | **33** | **74**  | **12.1** | **12** | **6** |\n   * |        |         | 9 _-x-_  |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-underline-position\n   */\n  \"text-underline-position\"?: Property.TextUnderlinePosition | undefined;\n  /**\n   * The **`text-wrap`** CSS property controls how text inside an element is wrapped. The different values provide:\n   *\n   * **Syntax**: `wrap | nowrap | balance | stable | pretty`\n   *\n   * **Initial value**: `wrap`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **114** | **121** |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-wrap\n   */\n  \"text-wrap\"?: Property.TextWrap | undefined;\n  /**\n   * The **`timeline-scope`** CSS property modifies the scope of a named animation timeline.\n   *\n   * **Syntax**: `none | <dashed-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **116** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/timeline-scope\n   */\n  \"timeline-scope\"?: Property.TimelineScope | undefined;\n  /**\n   * The **`top`** CSS property participates in specifying the vertical position of a positioned element. It has no effect on non-positioned elements.\n   *\n   * **Syntax**: `<length> | <percentage> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/top\n   */\n  top?: Property.Top<TLength> | undefined;\n  /**\n   * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |    IE    |\n   * | :----: | :-----: | :----: | :----: | :------: |\n   * | **36** | **52**  | **13** | **12** |  **11**  |\n   * |        |         |        |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/touch-action\n   */\n  \"touch-action\"?: Property.TouchAction | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE    |\n   * | :-----: | :-----: | :-------: | :----: | :-----: |\n   * | **36**  | **16**  |   **9**   | **12** | **10**  |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform\n   */\n  transform?: Property.Transform | undefined;\n  /**\n   * The **`transform-box`** CSS property defines the layout box to which the `transform`, individual transform properties `translate`,`scale`, and `rotate`, and `transform-origin` properties relate.\n   *\n   * **Syntax**: `content-box | border-box | fill-box | stroke-box | view-box`\n   *\n   * **Initial value**: `view-box`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **64** | **55**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-box\n   */\n  \"transform-box\"?: Property.TransformBox | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE    |\n   * | :-----: | :-----: | :-----: | :----: | :-----: |\n   * | **36**  | **16**  |  **9**  | **12** | **10**  |\n   * | 1 _-x-_ |         | 2 _-x-_ |        | 9 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-origin\n   */\n  \"transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  | IE  |\n   * | :------: | :-----: | :-----: | :----: | :-: |\n   * |  **36**  | **16**  |  **9**  | **12** | No  |\n   * | 12 _-x-_ |         | 4 _-x-_ |        |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transform-style\n   */\n  \"transform-style\"?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition-behavior`** CSS property specifies whether transitions will be started for properties whose animation behavior is discrete.\n   *\n   * **Syntax**: `<transition-behavior-value>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **117** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-behavior\n   */\n  \"transition-behavior\"?: Property.TransitionBehavior | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **26**  | **16**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-delay\n   */\n  \"transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-duration\n   */\n  \"transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-property\n   */\n  \"transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition-timing-function\n   */\n  \"transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`translate`** CSS property allows you to specify translation transforms individually and independently of the `transform` property. This maps better to typical user interface usage, and saves having to remember the exact order of transform functions to specify in the `transform` value.\n   *\n   * **Syntax**: `none | <length-percentage> [ <length-percentage> <length>? ]?`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox |  Safari  | Edge | IE  |\n   * | :-----: | :-----: | :------: | :--: | :-: |\n   * | **104** | **72**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/translate\n   */\n  translate?: Property.Translate<TLength> | undefined;\n  /**\n   * The **`unicode-bidi`** CSS property, together with the `direction` property, determines how bidirectional text in a document is handled. For example, if a block of content contains both left-to-right and right-to-left text, the user-agent uses a complex Unicode algorithm to decide how to display the text. The `unicode-bidi` property overrides this algorithm and allows the developer to control the text embedding.\n   *\n   * **Syntax**: `normal | embed | isolate | bidi-override | isolate-override | plaintext`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **2**  |  **1**  | **1.3** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/unicode-bidi\n   */\n  \"unicode-bidi\"?: Property.UnicodeBidi | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox |   Safari    |   Edge   |      IE      |\n   * | :-----: | :-----: | :---------: | :------: | :----------: |\n   * | **54**  | **69**  | **3** _-x-_ |  **79**  | **10** _-x-_ |\n   * | 1 _-x-_ | 1 _-x-_ |             | 12 _-x-_ |              |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/user-select\n   */\n  \"user-select\"?: Property.UserSelect | undefined;\n  /**\n   * The **`vertical-align`** CSS property sets vertical alignment of an inline, inline-block or table-cell box.\n   *\n   * **Syntax**: `baseline | sub | super | text-top | text-bottom | middle | top | bottom | <percentage> | <length>`\n   *\n   * **Initial value**: `baseline`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/vertical-align\n   */\n  \"vertical-align\"?: Property.VerticalAlign<TLength> | undefined;\n  /**\n   * The **`view-timeline-axis`** CSS property is used to specify the scrollbar direction that will be used to provide the timeline for a _named view progress timeline_ animation, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). `view-timeline-axis` is set on the subject. See CSS scroll-driven animations for more details.\n   *\n   * **Syntax**: `[ block | inline | x | y ]#`\n   *\n   * **Initial value**: `block`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline-axis\n   */\n  \"view-timeline-axis\"?: Property.ViewTimelineAxis | undefined;\n  /**\n   * The **`view-timeline-inset`** CSS property is used to specify one or two values representing an adjustment to the position of the scrollport (see Scroll container for more details) in which the subject element of a _named view progress timeline_ animation is deemed to be visible. Put another way, this allows you to specify start and/or end inset (or outset) values that offset the position of the timeline.\n   *\n   * **Syntax**: `[ [ auto | <length-percentage> ]{1,2} ]#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline-inset\n   */\n  \"view-timeline-inset\"?: Property.ViewTimelineInset<TLength> | undefined;\n  /**\n   * The **`view-timeline-name`** CSS property is used to define the name of a _named view progress timeline_, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). `view-timeline` is set on the subject.\n   *\n   * **Syntax**: `none | <dashed-ident>#`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline-name\n   */\n  \"view-timeline-name\"?: Property.ViewTimelineName | undefined;\n  /**\n   * The **`view-transition-name`** CSS property provides the selected element with a distinct identifying name (a `<custom-ident>`) and causes it to participate in a separate view transition from the root view transition — or no view transition if the `none` value is specified.\n   *\n   * **Syntax**: `none | <custom-ident>`\n   *\n   * **Initial value**: `none`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **111** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-transition-name\n   */\n  \"view-transition-name\"?: Property.ViewTransitionName | undefined;\n  /**\n   * The **`visibility`** CSS property shows or hides an element without changing the layout of a document. The property can also hide rows or columns in a `<table>`.\n   *\n   * **Syntax**: `visible | hidden | collapse`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/visibility\n   */\n  visibility?: Property.Visibility | undefined;\n  /**\n   * The **`white-space`** CSS property sets how white space inside an element is handled.\n   *\n   * **Syntax**: `normal | pre | nowrap | pre-wrap | pre-line | break-spaces | [ <'white-space-collapse'> || <'text-wrap'> || <'white-space-trim'> ]`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/white-space\n   */\n  \"white-space\"?: Property.WhiteSpace | undefined;\n  /**\n   * The **`white-space-collapse`** CSS property controls how white space inside an element is collapsed.\n   *\n   * **Syntax**: `collapse | discard | preserve | preserve-breaks | preserve-spaces | break-spaces`\n   *\n   * **Initial value**: `collapse`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **114** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/white-space-collapse\n   */\n  \"white-space-collapse\"?: Property.WhiteSpaceCollapse | undefined;\n  /**\n   * **Syntax**: `none | discard-before || discard-after || discard-inner`\n   *\n   * **Initial value**: `none`\n   */\n  \"white-space-trim\"?: Property.WhiteSpaceTrim | undefined;\n  /**\n   * The **`widows`** CSS property sets the minimum number of lines in a block container that must be shown at the _top_ of a page, region, or column.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `2`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :-----: | :----: | :---: |\n   * | **25** |   No    | **1.3** | **12** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/widows\n   */\n  widows?: Property.Widows | undefined;\n  /**\n   * The **`width`** CSS property sets an element's width. By default, it sets the width of the content area, but if `box-sizing` is set to `border-box`, it sets the width of the border area.\n   *\n   * **Syntax**: `auto | <length> | <percentage> | min-content | max-content | fit-content | fit-content(<length-percentage>)`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/width\n   */\n  width?: Property.Width<TLength> | undefined;\n  /**\n   * The **`will-change`** CSS property hints to browsers how an element is expected to change. Browsers may set up optimizations before an element is actually changed. These kinds of optimizations can increase the responsiveness of a page by doing potentially expensive work before they are actually required.\n   *\n   * **Syntax**: `auto | <animateable-feature>#`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **36** | **36**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/will-change\n   */\n  \"will-change\"?: Property.WillChange | undefined;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  | **15**  | **3**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-break\n   */\n  \"word-break\"?: Property.WordBreak | undefined;\n  /**\n   * The **`word-spacing`** CSS property sets the length of space between words and between tags.\n   *\n   * **Syntax**: `normal | <length>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **6** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/word-spacing\n   */\n  \"word-spacing\"?: Property.WordSpacing<TLength> | undefined;\n  /**\n   * The **`overflow-wrap`** CSS property applies to inline elements, setting whether the browser should insert line breaks within an otherwise unbreakable string to prevent text from overflowing its line box.\n   *\n   * **Syntax**: `normal | break-word`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge   | IE  |\n   * | :-----: | :-----: | :-------: | :-----: | :-: |\n   * | **≤80** | **≤72** | **≤13.1** | **≤80** | No  |\n   */\n  \"word-wrap\"?: Property.WordWrap | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |  IE   |\n   * | :-----: | :-----: | :-------: | :----: | :---: |\n   * | **48**  | **41**  | **10.1**  | **12** | **9** |\n   * | 8 _-x-_ |         | 5.1 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/writing-mode\n   */\n  \"writing-mode\"?: Property.WritingMode | undefined;\n  /**\n   * The **`z-index`** CSS property sets the z-order of a positioned element and its descendants or flex items. Overlapping elements with a larger z-index cover those with a smaller one.\n   *\n   * **Syntax**: `auto | <integer>`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/z-index\n   */\n  \"z-index\"?: Property.ZIndex | undefined;\n  /**\n   * The non-standard **`zoom`** CSS property can be used to control the magnification level of an element. `transform: scale()` should be used instead of this property, if possible. However, unlike CSS Transforms, `zoom` affects the layout size of the element.\n   *\n   * **Syntax**: `normal | reset | <number> | <percentage>`\n   *\n   * **Initial value**: `normal`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE    |\n   * | :----: | :-----: | :-----: | :----: | :-----: |\n   * | **1**  |   n/a   | **3.1** | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/zoom\n   */\n  zoom?: Property.Zoom | undefined;\n}\n\nexport interface StandardShorthandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`all`** shorthand CSS property resets all of an element's properties except `unicode-bidi`, `direction`, and CSS Custom Properties. It can set properties to their initial or inherited values, or to the values specified in another cascade layer or stylesheet origin.\n   *\n   * **Syntax**: `initial | inherit | unset | revert | revert-layer`\n   *\n   * **Initial value**: There is no practical initial value for it.\n   *\n   * | Chrome | Firefox | Safari  | Edge | IE  |\n   * | :----: | :-----: | :-----: | :--: | :-: |\n   * | **37** | **27**  | **9.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/all\n   */\n  all?: Property.All | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **43**  | **16**  |  **9**  | **12** | **10** |\n   * | 3 _-x-_ | 5 _-x-_ | 4 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation\n   */\n  animation?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`animation-range`** CSS shorthand property is used to set the start and end of an animation's attachment range along its timeline, i.e. where along the timeline an animation will start and end.\n   *\n   * **Syntax**: `[ <'animation-range-start'> <'animation-range-end'>? ]#`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   No    |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/animation-range\n   */\n  \"animation-range\"?: Property.AnimationRange<TLength> | undefined;\n  /**\n   * The **`background`** shorthand CSS property sets all background style properties at once, such as color, image, origin and size, or repeat method.\n   *\n   * **Syntax**: `[ <bg-layer> , ]* <final-bg-layer>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background\n   */\n  background?: Property.Background<TLength> | undefined;\n  /**\n   * The **`background-position`** CSS property sets the initial position for each background image. The position is relative to the position layer set by `background-origin`.\n   *\n   * **Syntax**: `<bg-position>#`\n   *\n   * **Initial value**: `0% 0%`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/background-position\n   */\n  \"background-position\"?: Property.BackgroundPosition<TLength> | undefined;\n  /**\n   * The **`border`** shorthand CSS property sets an element's border. It sets the values of `border-width`, `border-style`, and `border-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border\n   */\n  border?: Property.Border<TLength> | undefined;\n  /**\n   * The **`border-block`** CSS property is a shorthand property for setting the individual logical block border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block\n   */\n  \"border-block\"?: Property.BorderBlock<TLength> | undefined;\n  /**\n   * The **`border-block-end`** CSS property is a shorthand property for setting the individual logical block-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-end\n   */\n  \"border-block-end\"?: Property.BorderBlockEnd<TLength> | undefined;\n  /**\n   * The **`border-block-start`** CSS property is a shorthand property for setting the individual logical block-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-block-start\n   */\n  \"border-block-start\"?: Property.BorderBlockStart<TLength> | undefined;\n  /**\n   * The **`border-bottom`** shorthand CSS property sets an element's bottom border. It sets the values of `border-bottom-width`, `border-bottom-style` and `border-bottom-color`.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-bottom\n   */\n  \"border-bottom\"?: Property.BorderBottom<TLength> | undefined;\n  /**\n   * The **`border-color`** shorthand CSS property sets the color of an element's border.\n   *\n   * **Syntax**: `<color>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-color\n   */\n  \"border-color\"?: Property.BorderColor | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * | Chrome  |  Firefox  | Safari  |  Edge  |   IE   |\n   * | :-----: | :-------: | :-----: | :----: | :----: |\n   * | **16**  |  **15**   |  **6**  | **12** | **11** |\n   * | 7 _-x-_ | 3.5 _-x-_ | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-image\n   */\n  \"border-image\"?: Property.BorderImage | undefined;\n  /**\n   * The **`border-inline`** CSS property is a shorthand property for setting the individual logical inline border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline\n   */\n  \"border-inline\"?: Property.BorderInline<TLength> | undefined;\n  /**\n   * The **`border-inline-end`** CSS property is a shorthand property for setting the individual logical inline-end border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-end\n   */\n  \"border-inline-end\"?: Property.BorderInlineEnd<TLength> | undefined;\n  /**\n   * The **`border-inline-start`** CSS property is a shorthand property for setting the individual logical inline-start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-top-width'> || <'border-top-style'> || <color>`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **41**  | **12.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-inline-start\n   */\n  \"border-inline-start\"?: Property.BorderInlineStart<TLength> | undefined;\n  /**\n   * The **`border-left`** shorthand CSS property sets all the properties of an element's left border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-left\n   */\n  \"border-left\"?: Property.BorderLeft<TLength> | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |  IE   |\n   * | :-----: | :-----: | :-----: | :----: | :---: |\n   * |  **4**  |  **4**  |  **5**  | **12** | **9** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |       |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-radius\n   */\n  \"border-radius\"?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`border-right`** shorthand CSS property sets all the properties of an element's right border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |   IE    |\n   * | :----: | :-----: | :----: | :----: | :-----: |\n   * | **1**  |  **1**  | **1**  | **12** | **5.5** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-right\n   */\n  \"border-right\"?: Property.BorderRight<TLength> | undefined;\n  /**\n   * The **`border-style`** shorthand CSS property sets the line style for all four sides of an element's border.\n   *\n   * **Syntax**: `<line-style>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-style\n   */\n  \"border-style\"?: Property.BorderStyle | undefined;\n  /**\n   * The **`border-top`** shorthand CSS property sets all the properties of an element's top border.\n   *\n   * **Syntax**: `<line-width> || <line-style> || <color>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-top\n   */\n  \"border-top\"?: Property.BorderTop<TLength> | undefined;\n  /**\n   * The **`border-width`** shorthand CSS property sets the width of an element's border.\n   *\n   * **Syntax**: `<line-width>{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/border-width\n   */\n  \"border-width\"?: Property.BorderWidth<TLength> | undefined;\n  /** **Syntax**: `<'caret-color'> || <'caret-shape'>` */\n  caret?: Property.Caret | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   *\n   * | Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :-----: | :-----: | :-----: | :----: | :----: |\n   * | **50**  | **52**  |  **9**  | **12** | **10** |\n   * | 1 _-x-_ |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/column-rule\n   */\n  \"column-rule\"?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   *\n   * | Chrome | Firefox | Safari  |  Edge  |   IE   |\n   * | :----: | :-----: | :-----: | :----: | :----: |\n   * | **50** | **52**  |  **9**  | **12** | **10** |\n   * |        |         | 3 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/columns\n   */\n  columns?: Property.Columns<TLength> | undefined;\n  /**\n   * The **`contain-intrinsic-size`** CSS shorthand property sets the size of an element that a browser will use for layout when the element is subject to size containment.\n   *\n   * **Syntax**: `[ auto? [ none | <length> ] ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **83** | **107** | **17** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/contain-intrinsic-size\n   */\n  \"contain-intrinsic-size\"?: Property.ContainIntrinsicSize<TLength> | undefined;\n  /**\n   * The **container** shorthand CSS property establishes the element as a query container and specifies the name or name for the containment context used in a container query.\n   *\n   * **Syntax**: `<'container-name'> [ / <'container-type'> ]?`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **105** | **110** | **16** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/container\n   */\n  container?: Property.Container | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |    IE    |\n   * | :------: | :-----: | :-----: | :----: | :------: |\n   * |  **29**  | **20**  |  **9**  | **12** |  **11**  |\n   * | 21 _-x-_ |         | 7 _-x-_ |        | 10 _-x-_ |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex\n   */\n  flex?: Property.Flex<TLength> | undefined;\n  /**\n   * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   *\n   * |  Chrome  | Firefox | Safari  |  Edge  |   IE   |\n   * | :------: | :-----: | :-----: | :----: | :----: |\n   * |  **29**  | **28**  |  **9**  | **12** | **11** |\n   * | 21 _-x-_ |         | 7 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/flex-flow\n   */\n  \"flex-flow\"?: Property.FlexFlow | undefined;\n  /**\n   * The **`font`** CSS shorthand property sets all the different properties of an element's font. Alternatively, it sets an element's font to a system font.\n   *\n   * **Syntax**: `[ [ <'font-style'> || <font-variant-css21> || <'font-weight'> || <'font-stretch'> ]? <'font-size'> [ / <'line-height'> ]? <'font-family'> ] | caption | icon | menu | message-box | small-caption | status-bar`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/font\n   */\n  font?: Property.Font | undefined;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'row-gap'> <'column-gap'>?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/gap\n   */\n  gap?: Property.Gap<TLength> | undefined;\n  /**\n   * The **`grid`** CSS property is a shorthand property that sets all of the explicit and implicit grid properties in a single declaration.\n   *\n   * **Syntax**: `<'grid-template'> | <'grid-template-rows'> / [ auto-flow && dense? ] <'grid-auto-columns'>? | [ auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid\n   */\n  grid?: Property.Grid | undefined;\n  /**\n   * The **`grid-area`** CSS shorthand property specifies a grid item's size and location within a grid by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the edges of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]{0,3}`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-area\n   */\n  \"grid-area\"?: Property.GridArea | undefined;\n  /**\n   * The **`grid-column`** CSS shorthand property specifies a grid item's size and location within a grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-column\n   */\n  \"grid-column\"?: Property.GridColumn | undefined;\n  /**\n   * The **`grid-row`** CSS shorthand property specifies a grid item's size and location within a grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start and inline-end edge of its grid area.\n   *\n   * **Syntax**: `<grid-line> [ / <grid-line> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-row\n   */\n  \"grid-row\"?: Property.GridRow | undefined;\n  /**\n   * The **`grid-template`** CSS property is a shorthand property for defining grid columns, grid rows, and grid areas.\n   *\n   * **Syntax**: `none | [ <'grid-template-rows'> / <'grid-template-columns'> ] | [ <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ]?`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  | IE  |\n   * | :----: | :-----: | :------: | :----: | :-: |\n   * | **57** | **52**  | **10.1** | **16** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/grid-template\n   */\n  \"grid-template\"?: Property.GridTemplate | undefined;\n  /**\n   * The **`inset`** CSS property is a shorthand that corresponds to the `top`, `right`, `bottom`, and/or `left` properties. It has the same multi-value syntax of the `margin` shorthand.\n   *\n   * **Syntax**: `<'top'>{1,4}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset\n   */\n  inset?: Property.Inset<TLength> | undefined;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-block\n   */\n  \"inset-block\"?: Property.InsetBlock<TLength> | undefined;\n  /**\n   * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **63**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/inset-inline\n   */\n  \"inset-inline\"?: Property.InsetInline<TLength> | undefined;\n  /**\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  \"line-clamp\"?: Property.LineClamp | undefined;\n  /**\n   * The **`list-style`** CSS shorthand property allows you to set all the list style properties at once.\n   *\n   * **Syntax**: `<'list-style-type'> || <'list-style-position'> || <'list-style-image'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/list-style\n   */\n  \"list-style\"?: Property.ListStyle | undefined;\n  /**\n   * The **`margin`** CSS shorthand property sets the margin area on all four sides of an element.\n   *\n   * **Syntax**: `[ <length> | <percentage> | auto ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin\n   */\n  margin?: Property.Margin<TLength> | undefined;\n  /**\n   * The **`margin-block`** CSS shorthand property defines the logical block start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-block\n   */\n  \"margin-block\"?: Property.MarginBlock<TLength> | undefined;\n  /**\n   * The **`margin-inline`** CSS shorthand property is a shorthand property that defines both the logical inline start and end margins of an element, which maps to physical margins depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'margin-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/margin-inline\n   */\n  \"margin-inline\"?: Property.MarginInline<TLength> | undefined;\n  /**\n   * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `<mask-layer>#`\n   *\n   * | Chrome | Firefox |  Safari   | Edge  | IE  |\n   * | :----: | :-----: | :-------: | :---: | :-: |\n   * | **1**  | **53**  | **15.4**  | 12-79 | No  |\n   * |        |         | 3.1 _-x-_ |       |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask\n   */\n  mask?: Property.Mask<TLength> | undefined;\n  /**\n   * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   *\n   * |              Chrome              | Firefox |             Safari             | Edge | IE  |\n   * | :------------------------------: | :-----: | :----------------------------: | :--: | :-: |\n   * | **1** _(-webkit-mask-box-image)_ |   No    |            **17.2**            | n/a  | No  |\n   * |                                  |         | 3.1 _(-webkit-mask-box-image)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/mask-border\n   */\n  \"mask-border\"?: Property.MaskBorder | undefined;\n  /**\n   * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari | Edge | IE  |\n   * | :-----------: | :-----: | :----: | :--: | :-: |\n   * |    **55**     | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  motion?: Property.Offset<TLength> | undefined;\n  /**\n   * The **`offset`** CSS shorthand property sets all the properties required for animating an element along a defined path.\n   *\n   * **Syntax**: `[ <'offset-position'>? [ <'offset-path'> [ <'offset-distance'> || <'offset-rotate'> ]? ]? ]! [ / <'offset-anchor'> ]?`\n   *\n   * |    Chrome     | Firefox | Safari | Edge | IE  |\n   * | :-----------: | :-----: | :----: | :--: | :-: |\n   * |    **55**     | **72**  | **16** | n/a  | No  |\n   * | 46 _(motion)_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/offset\n   */\n  offset?: Property.Offset<TLength> | undefined;\n  /**\n   * The **`outline`** CSS shorthand property sets most of the outline properties in a single declaration.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * | Chrome | Firefox |  Safari  |  Edge  |  IE   |\n   * | :----: | :-----: | :------: | :----: | :---: |\n   * | **94** | **88**  | **16.4** | **94** | **8** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/outline\n   */\n  outline?: Property.Outline<TLength> | undefined;\n  /**\n   * The **`overflow`** CSS shorthand property sets the desired behavior for an element's overflow — i.e. when an element's content is too big to fit in its block formatting context — in both directions.\n   *\n   * **Syntax**: `[ visible | hidden | clip | scroll | auto ]{1,2}`\n   *\n   * **Initial value**: `visible`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overflow\n   */\n  overflow?: Property.Overflow | undefined;\n  /**\n   * The **`overscroll-behavior`** CSS property sets what a browser does when reaching the boundary of a scrolling area. It's a shorthand for `overscroll-behavior-x` and `overscroll-behavior-y`.\n   *\n   * **Syntax**: `[ contain | none | auto ]{1,2}`\n   *\n   * **Initial value**: `auto`\n   *\n   * | Chrome | Firefox | Safari |  Edge  | IE  |\n   * | :----: | :-----: | :----: | :----: | :-: |\n   * | **63** | **59**  | **16** | **18** | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/overscroll-behavior\n   */\n  \"overscroll-behavior\"?: Property.OverscrollBehavior | undefined;\n  /**\n   * The **`padding`** CSS shorthand property sets the padding area on all four sides of an element at once.\n   *\n   * **Syntax**: `[ <length> | <percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **4** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding\n   */\n  padding?: Property.Padding<TLength> | undefined;\n  /**\n   * The **`padding-block`** CSS shorthand property defines the logical block start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-block\n   */\n  \"padding-block\"?: Property.PaddingBlock<TLength> | undefined;\n  /**\n   * The **`padding-inline`** CSS shorthand property defines the logical inline start and end padding of an element, which maps to physical padding properties depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>{1,2}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **87** | **66**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/padding-inline\n   */\n  \"padding-inline\"?: Property.PaddingInline<TLength> | undefined;\n  /**\n   * The **`place-content`** CSS shorthand property allows you to align content along both the block and inline directions at once (i.e. the `align-content` and `justify-content` properties) in a relevant layout system such as Grid or Flexbox.\n   *\n   * **Syntax**: `<'align-content'> <'justify-content'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **9**  | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-content\n   */\n  \"place-content\"?: Property.PlaceContent | undefined;\n  /**\n   * The CSS **`place-items`** shorthand property allows you to align items along both the block and inline directions at once (i.e. the `align-items` and `justify-items` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not set, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-items'> <'justify-items'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-items\n   */\n  \"place-items\"?: Property.PlaceItems | undefined;\n  /**\n   * The **`place-self`** CSS shorthand property allows you to align an individual item in both the block and inline directions at once (i.e. the `align-self` and `justify-self` properties) in a relevant layout system such as Grid or Flexbox. If the second value is not present, the first value is also used for it.\n   *\n   * **Syntax**: `<'align-self'> <'justify-self'>?`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **59** | **45**  | **11** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/place-self\n   */\n  \"place-self\"?: Property.PlaceSelf | undefined;\n  /**\n   * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * | Chrome | Firefox |          Safari           | Edge | IE  |\n   * | :----: | :-----: | :-----------------------: | :--: | :-: |\n   * | **69** | **90**  |         **14.1**          | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  \"scroll-margin\"?: Property.ScrollMargin<TLength> | undefined;\n  /**\n   * The `scroll-margin-block` shorthand property sets the scroll margins of an element in the block dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-block\n   */\n  \"scroll-margin-block\"?: Property.ScrollMarginBlock<TLength> | undefined;\n  /**\n   * The `scroll-margin-inline` shorthand property sets the scroll margins of an element in the inline dimension.\n   *\n   * **Syntax**: `<length>{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin-inline\n   */\n  \"scroll-margin-inline\"?: Property.ScrollMarginInline<TLength> | undefined;\n  /**\n   * The **`scroll-padding`** shorthand property sets scroll padding on all sides of an element at once, much like the `padding` property does for padding on an element.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,4}`\n   *\n   * | Chrome | Firefox |  Safari  | Edge | IE  |\n   * | :----: | :-----: | :------: | :--: | :-: |\n   * | **69** | **68**  | **14.1** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding\n   */\n  \"scroll-padding\"?: Property.ScrollPadding<TLength> | undefined;\n  /**\n   * The `scroll-padding-block` shorthand property sets the scroll padding of an element in the block dimension.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-block\n   */\n  \"scroll-padding-block\"?: Property.ScrollPaddingBlock<TLength> | undefined;\n  /**\n   * The `scroll-padding-inline` shorthand property sets the scroll padding of an element in the inline dimension.\n   *\n   * **Syntax**: `[ auto | <length-percentage> ]{1,2}`\n   *\n   * | Chrome | Firefox | Safari | Edge | IE  |\n   * | :----: | :-----: | :----: | :--: | :-: |\n   * | **69** | **68**  | **15** | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-padding-inline\n   */\n  \"scroll-padding-inline\"?: Property.ScrollPaddingInline<TLength> | undefined;\n  /**\n   * The **`scroll-margin`** shorthand property sets all of the scroll margins of an element at once, assigning values much like the `margin` property does for margins of an element.\n   *\n   * **Syntax**: `<length>{1,4}`\n   *\n   * | Chrome | Firefox |          Safari           | Edge | IE  |\n   * | :----: | :-----: | :-----------------------: | :--: | :-: |\n   * | **69** |  68-90  |         **14.1**          | n/a  | No  |\n   * |        |         | 11 _(scroll-snap-margin)_ |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-margin\n   */\n  \"scroll-snap-margin\"?: Property.ScrollMargin<TLength> | undefined;\n  /**\n   * The **`scroll-timeline`** CSS shorthand property defines a name that can be used to identify the source element of a scroll timeline, along with the scrollbar axis that should provide the timeline.\n   *\n   * **Syntax**: `[ <'scroll-timeline-name'> <'scroll-timeline-axis'>? ]#`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/scroll-timeline\n   */\n  \"scroll-timeline\"?: Property.ScrollTimeline | undefined;\n  /**\n   * The **`text-decoration`** shorthand CSS property sets the appearance of decorative lines on text. It is a shorthand for `text-decoration-line`, `text-decoration-color`, `text-decoration-style`, and the newer `text-decoration-thickness` property.\n   *\n   * **Syntax**: `<'text-decoration-line'> || <'text-decoration-style'> || <'text-decoration-color'> || <'text-decoration-thickness'>`\n   *\n   * | Chrome | Firefox | Safari |  Edge  |  IE   |\n   * | :----: | :-----: | :----: | :----: | :---: |\n   * | **1**  |  **1**  | **1**  | **12** | **3** |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-decoration\n   */\n  \"text-decoration\"?: Property.TextDecoration<TLength> | undefined;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   *\n   * |  Chrome  | Firefox | Safari | Edge | IE  |\n   * | :------: | :-----: | :----: | :--: | :-: |\n   * |  **99**  | **46**  | **7**  | n/a  | No  |\n   * | 25 _-x-_ |         |        |      |     |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/text-emphasis\n   */\n  \"text-emphasis\"?: Property.TextEmphasis | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * | Chrome  | Firefox |  Safari   |  Edge  |   IE   |\n   * | :-----: | :-----: | :-------: | :----: | :----: |\n   * | **26**  | **16**  |   **9**   | **12** | **10** |\n   * | 1 _-x-_ |         | 3.1 _-x-_ |        |        |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/transition\n   */\n  transition?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`view-timeline`** CSS shorthand property is used to define a _named view progress timeline_, which is progressed through based on the change in visibility of an element (known as the _subject_) inside a scrollable element (_scroller_). `view-timeline` is set on the subject.\n   *\n   * **Syntax**: `[ <'view-timeline-name'> <'view-timeline-axis'>? ]#`\n   *\n   * | Chrome  | Firefox | Safari | Edge | IE  |\n   * | :-----: | :-----: | :----: | :--: | :-: |\n   * | **115** |   n/a   |   No   | n/a  | No  |\n   *\n   * @see https://developer.mozilla.org/docs/Web/CSS/view-timeline\n   */\n  \"view-timeline\"?: Property.ViewTimeline | undefined;\n}\n\nexport interface StandardPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardLonghandPropertiesHyphen<TLength, TTime>,\n    StandardShorthandPropertiesHyphen<TLength, TTime> {}\n\nexport interface VendorLonghandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-moz-animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-animation-direction\"?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-moz-animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  \"-moz-animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-animation-name\"?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  \"-moz-animation-play-state\"?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-moz-animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | button | button-arrow-down | button-arrow-next | button-arrow-previous | button-arrow-up | button-bevel | button-focus | caret | checkbox | checkbox-container | checkbox-label | checkmenuitem | dualbutton | groupbox | listbox | listitem | menuarrow | menubar | menucheckbox | menuimage | menuitem | menuitemtext | menulist | menulist-button | menulist-text | menulist-textfield | menupopup | menuradio | menuseparator | meterbar | meterchunk | progressbar | progressbar-vertical | progresschunk | progresschunk-vertical | radio | radio-container | radio-label | radiomenuitem | range | range-thumb | resizer | resizerpanel | scale-horizontal | scalethumbend | scalethumb-horizontal | scalethumbstart | scalethumbtick | scalethumb-vertical | scale-vertical | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbartrack-horizontal | scrollbartrack-vertical | searchfield | separator | sheet | spinner | spinner-downbutton | spinner-textfield | spinner-upbutton | splitter | statusbar | statusbarpanel | tab | tabpanel | tabpanels | tab-scroll-arrow-back | tab-scroll-arrow-forward | textfield | textfield-multiline | toolbar | toolbarbutton | toolbarbutton-dropdown | toolbargripper | toolbox | tooltip | treeheader | treeheadercell | treeheadersortarrow | treeitem | treeline | treetwisty | treetwistyopen | treeview | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communicationstext | -moz-win-communications-toolbox | -moz-win-exclude-glass | -moz-win-glass | -moz-win-mediatext | -moz-win-media-toolbox | -moz-window-button-box | -moz-window-button-box-maximized | -moz-window-button-close | -moz-window-button-maximize | -moz-window-button-minimize | -moz-window-button-restore | -moz-window-frame-bottom | -moz-window-frame-left | -moz-window-frame-right | -moz-window-titlebar | -moz-window-titlebar-maximized`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  \"-moz-appearance\"?: Property.MozAppearance | undefined;\n  /**\n   * The **`-moz-binding`** CSS property is used by Mozilla-based applications to attach an XBL binding to a DOM element.\n   *\n   * **Syntax**: `<url> | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-binding\"?: Property.MozBinding | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-bottom-colors`** CSS property sets a list of colors for the bottom border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-bottom-colors\"?: Property.MozBorderBottomColors | undefined;\n  /**\n   * The **`border-inline-end-color`** CSS property defines the color of the logical inline-end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-moz-border-end-color\"?: Property.BorderInlineEndColor | undefined;\n  /**\n   * The **`border-inline-end-style`** CSS property defines the style of the logical inline end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-end-style\"?: Property.BorderInlineEndStyle | undefined;\n  /**\n   * The **`border-inline-end-width`** CSS property defines the width of the logical inline-end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-width`, `border-right-width`, `border-bottom-width`, or `border-left-width` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-moz-border-end-width\"?: Property.BorderInlineEndWidth<TLength> | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-left-colors`** CSS property sets a list of colors for the left border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-left-colors\"?: Property.MozBorderLeftColors | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-right-colors`** CSS property sets a list of colors for the right border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-right-colors\"?: Property.MozBorderRightColors | undefined;\n  /**\n   * The **`border-inline-start-color`** CSS property defines the color of the logical inline start border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-color`, `border-right-color`, `border-bottom-color`, or `border-left-color` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-color'>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-moz-border-start-color\"?: Property.BorderInlineStartColor | undefined;\n  /**\n   * The **`border-inline-start-style`** CSS property defines the style of the logical inline start border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation. It corresponds to the `border-top-style`, `border-right-style`, `border-bottom-style`, or `border-left-style` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'border-top-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-start-style\"?: Property.BorderInlineStartStyle | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-border-top-colors`** CSS property sets a list of colors for the top border.\n   *\n   * **Syntax**: `<color>+ | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-border-top-colors\"?: Property.MozBorderTopColors | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  \"-moz-box-sizing\"?: Property.BoxSizing | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-column-count\"?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  \"-moz-column-fill\"?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-moz-column-rule-color\"?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-column-rule-style\"?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-moz-column-rule-width\"?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-column-width\"?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`-moz-context-properties`** property can be used within privileged contexts in Firefox to share the values of specified properties of the element with a child SVG image.\n   *\n   * **Syntax**: `none | [ fill | fill-opacity | stroke | stroke-opacity ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-context-properties\"?: Property.MozContextProperties | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-font-feature-settings\"?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-language-override`** CSS property controls the use of language-specific glyphs in a typeface.\n   *\n   * **Syntax**: `normal | <string>`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-moz-font-language-override\"?: Property.FontLanguageOverride | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  \"-moz-hyphens\"?: Property.Hyphens | undefined;\n  /**\n   * For certain XUL elements and pseudo-elements that use an image from the `list-style-image` property, this property specifies a region of the image that is used in place of the whole image. This allows elements to use different pieces of the same image to improve performance.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-image-region\"?: Property.MozImageRegion | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-margin-end\"?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-margin-start\"?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * The **`-moz-orient`** CSS property specifies the orientation of the element to which it's applied.\n   *\n   * **Syntax**: `inline | block | horizontal | vertical`\n   *\n   * **Initial value**: `inline`\n   */\n  \"-moz-orient\"?: Property.MozOrient | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-osx-font-smoothing\"?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomleft`** CSS property can be used to round the bottom-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-bottomleft\"?: Property.MozOutlineRadiusBottomleft<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-bottomright`** CSS property can be used to round the bottom-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-bottomright\"?: Property.MozOutlineRadiusBottomright<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topleft`** CSS property can be used to round the top-left corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-topleft\"?: Property.MozOutlineRadiusTopleft<TLength> | undefined;\n  /**\n   * In Mozilla applications, the **`-moz-outline-radius-topright`** CSS property can be used to round the top-right corner of an element's `outline`.\n   *\n   * **Syntax**: `<outline-radius>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-outline-radius-topright\"?: Property.MozOutlineRadiusTopright<TLength> | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-padding-end\"?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-moz-padding-start\"?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * **`-moz-stack-sizing`** is an extended CSS property. Normally, a `<xul:stack>` will change its size so that all of its child elements are completely visible. For example, moving a child of the stack far to the right will widen the stack so the child remains visible.\n   *\n   * **Syntax**: `ignore | stretch-to-fit`\n   *\n   * **Initial value**: `stretch-to-fit`\n   */\n  \"-moz-stack-sizing\"?: Property.MozStackSizing | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   */\n  \"-moz-tab-size\"?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`-moz-text-blink`** non-standard Mozilla CSS extension specifies the blink mode.\n   *\n   * **Syntax**: `none | blink`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-text-blink\"?: Property.MozTextBlink | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  \"-moz-text-size-adjust\"?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`-moz-user-focus`** CSS property is used to indicate whether an element can have the focus.\n   *\n   * **Syntax**: `ignore | normal | select-after | select-before | select-menu | select-same | select-all | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-moz-user-focus\"?: Property.MozUserFocus | undefined;\n  /**\n   * The **`user-modify`** property has no effect in Firefox. It was originally planned to determine whether or not the content of an element can be edited by a user.\n   *\n   * **Syntax**: `read-only | read-write | write-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  \"-moz-user-modify\"?: Property.MozUserModify | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-moz-user-select\"?: Property.UserSelect | undefined;\n  /**\n   * The **`-moz-window-dragging`** CSS property specifies whether a window is draggable or not. It only works in Chrome code, and only on Mac OS X.\n   *\n   * **Syntax**: `drag | no-drag`\n   *\n   * **Initial value**: `drag`\n   */\n  \"-moz-window-dragging\"?: Property.MozWindowDragging | undefined;\n  /**\n   * The **`-moz-window-shadow`** CSS property specifies whether a window will have a shadow. It only works on Mac OS X.\n   *\n   * **Syntax**: `default | menu | tooltip | sheet | none`\n   *\n   * **Initial value**: `default`\n   */\n  \"-moz-window-shadow\"?: Property.MozWindowShadow | undefined;\n  /**\n   * The **`-ms-accelerator`** CSS property is a Microsoft extension that sets or retrieves a string indicating whether the object represents a keyboard shortcut.\n   *\n   * **Syntax**: `false | true`\n   *\n   * **Initial value**: `false`\n   */\n  \"-ms-accelerator\"?: Property.MsAccelerator | undefined;\n  /**\n   * The **`-ms-block-progression`** CSS property is a Microsoft extension that specifies the block progression and layout orientation.\n   *\n   * **Syntax**: `tb | rl | bt | lr`\n   *\n   * **Initial value**: `tb`\n   */\n  \"-ms-block-progression\"?: Property.MsBlockProgression | undefined;\n  /**\n   * The **`-ms-content-zoom-chaining`** CSS property is a Microsoft extension specifying the zoom behavior that occurs when a user hits the zoom limit during page manipulation.\n   *\n   * **Syntax**: `none | chained`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-content-zoom-chaining\"?: Property.MsContentZoomChaining | undefined;\n  /**\n   * The **`-ms-content-zoom-limit-max`** CSS property is a Microsoft extension that specifies the selected elements' maximum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `400%`\n   */\n  \"-ms-content-zoom-limit-max\"?: Property.MsContentZoomLimitMax | undefined;\n  /**\n   * The **`-ms-content-zoom-limit-min`** CSS property is a Microsoft extension that specifies the minimum zoom factor.\n   *\n   * **Syntax**: `<percentage>`\n   *\n   * **Initial value**: `100%`\n   */\n  \"-ms-content-zoom-limit-min\"?: Property.MsContentZoomLimitMin | undefined;\n  /**\n   * The **`-ms-content-zoom-snap-points`** CSS property is a Microsoft extension that specifies where zoom snap-points are located.\n   *\n   * **Syntax**: `snapInterval( <percentage>, <percentage> ) | snapList( <percentage># )`\n   *\n   * **Initial value**: `snapInterval(0%, 100%)`\n   */\n  \"-ms-content-zoom-snap-points\"?: Property.MsContentZoomSnapPoints | undefined;\n  /**\n   * The **`-ms-content-zoom-snap-type`** CSS property is a Microsoft extension that specifies how zooming is affected by defined snap-points.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-content-zoom-snap-type\"?: Property.MsContentZoomSnapType | undefined;\n  /**\n   * The **`-ms-content-zooming`** CSS property is a Microsoft extension that specifies whether zooming is enabled.\n   *\n   * **Syntax**: `none | zoom`\n   *\n   * **Initial value**: zoom for the top level element, none for all other elements\n   */\n  \"-ms-content-zooming\"?: Property.MsContentZooming | undefined;\n  /**\n   * The `-ms-filter` CSS property is a Microsoft extension that sets or retrieves the filter or collection of filters applied to an object.\n   *\n   * **Syntax**: `<string>`\n   *\n   * **Initial value**: \"\" (the empty string)\n   */\n  \"-ms-filter\"?: Property.MsFilter | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  \"-ms-flex-direction\"?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-flex-positive\"?: Property.FlexGrow | undefined;\n  /**\n   * The **`-ms-flow-from`** CSS property is a Microsoft extension that gets or sets a value identifying a region container in the document that accepts the content flow from the data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-flow-from\"?: Property.MsFlowFrom | undefined;\n  /**\n   * The **`-ms-flow-into`** CSS property is a Microsoft extension that gets or sets a value identifying an iframe container in the document that serves as the region's data source.\n   *\n   * **Syntax**: `[ none | <custom-ident> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-flow-into\"?: Property.MsFlowInto | undefined;\n  /**\n   * The **`grid-template-columns`** CSS property defines the line names and track sizing functions of the grid columns.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-grid-columns\"?: Property.MsGridColumns<TLength> | undefined;\n  /**\n   * The **`grid-template-rows`** CSS property defines the line names and track sizing functions of the grid rows.\n   *\n   * **Syntax**: `none | <track-list> | <auto-track-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-grid-rows\"?: Property.MsGridRows<TLength> | undefined;\n  /**\n   * The **`-ms-high-contrast-adjust`** CSS property is a Microsoft extension that gets or sets a value indicating whether to override any CSS properties that would have been set in high contrast mode.\n   *\n   * **Syntax**: `auto | none`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-high-contrast-adjust\"?: Property.MsHighContrastAdjust | undefined;\n  /**\n   * The **`-ms-hyphenate-limit-chars`** CSS property is a Microsoft extension that specifies one to three values indicating the minimum number of characters in a hyphenated word. If the word does not meet the required minimum number of characters in the word, before the hyphen, or after the hyphen, then the word is not hyphenated.\n   *\n   * **Syntax**: `auto | <integer>{1,3}`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-hyphenate-limit-chars\"?: Property.MsHyphenateLimitChars | undefined;\n  /**\n   * The **`-ms-hyphenate-limit-lines`** CSS property is a Microsoft extension specifying the maximum number of consecutive lines in an element that may be ended with a hyphenated word.\n   *\n   * **Syntax**: `no-limit | <integer>`\n   *\n   * **Initial value**: `no-limit`\n   */\n  \"-ms-hyphenate-limit-lines\"?: Property.MsHyphenateLimitLines | undefined;\n  /**\n   * The `**-ms-hyphenate-limit-zone**` CSS property is a Microsoft extension specifying the width of the hyphenation zone.\n   *\n   * **Syntax**: `<percentage> | <length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-hyphenate-limit-zone\"?: Property.MsHyphenateLimitZone<TLength> | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  \"-ms-hyphens\"?: Property.Hyphens | undefined;\n  /**\n   * The **`-ms-ime-align`** CSS property is a Microsoft extension aligning the Input Method Editor (IME) candidate window box relative to the element on which the IME composition is active. The extension is implemented in Microsoft Edge and Internet Explorer 11.\n   *\n   * **Syntax**: `auto | after`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-ime-align\"?: Property.MsImeAlign | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-line-break\"?: Property.LineBreak | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-order\"?: Property.Order | undefined;\n  /**\n   * The **`-ms-overflow-style`** CSS property is a Microsoft extension controlling the behavior of scrollbars when the content of an element overflows.\n   *\n   * **Syntax**: `auto | none | scrollbar | -ms-autohiding-scrollbar`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-overflow-style\"?: Property.MsOverflowStyle | undefined;\n  /**\n   * The **`overflow-x`** CSS property sets what shows when content overflows a block-level element's left and right edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-ms-overflow-x\"?: Property.OverflowX | undefined;\n  /**\n   * The **`overflow-y`** CSS property sets what shows when content overflows a block-level element's top and bottom edges. This may be nothing, a scroll bar, or the overflow content.\n   *\n   * **Syntax**: `visible | hidden | clip | scroll | auto`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-ms-overflow-y\"?: Property.OverflowY | undefined;\n  /**\n   * The `**-ms-scroll-chaining**` CSS property is a Microsoft extension that specifies the scrolling behavior that occurs when a user hits the scroll limit during a manipulation.\n   *\n   * **Syntax**: `chained | none`\n   *\n   * **Initial value**: `chained`\n   */\n  \"-ms-scroll-chaining\"?: Property.MsScrollChaining | undefined;\n  /**\n   * The `**-ms-scroll-limit-x-max**` CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-scroll-limit-x-max\"?: Property.MsScrollLimitXMax<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-x-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollLeft` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-scroll-limit-x-min\"?: Property.MsScrollLimitXMin<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-y-max`** CSS property is a Microsoft extension that specifies the maximum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `auto | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-scroll-limit-y-max\"?: Property.MsScrollLimitYMax<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-limit-y-min`** CSS property is a Microsoft extension that specifies the minimum value for the `Element.scrollTop` property.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-scroll-limit-y-min\"?: Property.MsScrollLimitYMin<TLength> | undefined;\n  /**\n   * The **`-ms-scroll-rails`** CSS property is a Microsoft extension that specifies whether scrolling locks to the primary axis of motion.\n   *\n   * **Syntax**: `none | railed`\n   *\n   * **Initial value**: `railed`\n   */\n  \"-ms-scroll-rails\"?: Property.MsScrollRails | undefined;\n  /**\n   * The **`-ms-scroll-snap-points-x`** CSS property is a Microsoft extension that specifies where snap-points will be located along the x-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  \"-ms-scroll-snap-points-x\"?: Property.MsScrollSnapPointsX | undefined;\n  /**\n   * The **`-ms-scroll-snap-points-y`** CSS property is a Microsoft extension that specifies where snap-points will be located along the y-axis.\n   *\n   * **Syntax**: `snapInterval( <length-percentage>, <length-percentage> ) | snapList( <length-percentage># )`\n   *\n   * **Initial value**: `snapInterval(0px, 100%)`\n   */\n  \"-ms-scroll-snap-points-y\"?: Property.MsScrollSnapPointsY | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | proximity | mandatory`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-scroll-snap-type\"?: Property.MsScrollSnapType | undefined;\n  /**\n   * The **`-ms-scroll-translation`** CSS property is a Microsoft extension that specifies whether vertical-to-horizontal scroll wheel translation occurs on the specified element.\n   *\n   * **Syntax**: `none | vertical-to-horizontal`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-scroll-translation\"?: Property.MsScrollTranslation | undefined;\n  /**\n   * The **`-ms-scrollbar-3dlight-color`** CSS property is a Microsoft extension specifying the color of the top and left edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  \"-ms-scrollbar-3dlight-color\"?: Property.MsScrollbar3dlightColor | undefined;\n  /**\n   * The **`-ms-scrollbar-arrow-color`** CSS property is a Microsoft extension that specifies the color of the arrow elements of a scroll arrow.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ButtonText`\n   */\n  \"-ms-scrollbar-arrow-color\"?: Property.MsScrollbarArrowColor | undefined;\n  /**\n   * The `**-ms-scrollbar-base-color**` CSS property is a Microsoft extension that specifies the base color of the main elements of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: depends on user agent\n   */\n  \"-ms-scrollbar-base-color\"?: Property.MsScrollbarBaseColor | undefined;\n  /**\n   * The **`-ms-scrollbar-darkshadow-color`** CSS property is a Microsoft extension that specifies the color of a scroll bar's gutter.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  \"-ms-scrollbar-darkshadow-color\"?: Property.MsScrollbarDarkshadowColor | undefined;\n  /**\n   * The `**-ms-scrollbar-face-color**` CSS property is a Microsoft extension that specifies the color of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDFace`\n   */\n  \"-ms-scrollbar-face-color\"?: Property.MsScrollbarFaceColor | undefined;\n  /**\n   * The `**-ms-scrollbar-highlight-color**` CSS property is a Microsoft extension that specifies the color of the slider tray, the top and left edges of the scroll box, and the scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDHighlight`\n   */\n  \"-ms-scrollbar-highlight-color\"?: Property.MsScrollbarHighlightColor | undefined;\n  /**\n   * The **`-ms-scrollbar-shadow-color`** CSS property is a Microsoft extension that specifies the color of the bottom and right edges of the scroll box and scroll arrows of a scroll bar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `ThreeDDarkShadow`\n   */\n  \"-ms-scrollbar-shadow-color\"?: Property.MsScrollbarShadowColor | undefined;\n  /**\n   * The **`-ms-scrollbar-track-color`** CSS property is a Microsoft extension that specifies the color of the track element of a scrollbar.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `Scrollbar`\n   */\n  \"-ms-scrollbar-track-color\"?: Property.MsScrollbarTrackColor | undefined;\n  /**\n   * The **`-ms-text-autospace`** CSS property is a Microsoft extension that specifies the autospacing and narrow space width adjustment of text.\n   *\n   * **Syntax**: `none | ideograph-alpha | ideograph-numeric | ideograph-parenthesis | ideograph-space`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-text-autospace\"?: Property.MsTextAutospace | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-text-combine-horizontal\"?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   */\n  \"-ms-text-overflow\"?: Property.TextOverflow | undefined;\n  /**\n   * The **`touch-action`** CSS property sets how an element's region can be manipulated by a touchscreen user (for example, by zooming features built into the browser).\n   *\n   * **Syntax**: `auto | none | [ [ pan-x | pan-left | pan-right ] || [ pan-y | pan-up | pan-down ] || pinch-zoom ] | manipulation`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-touch-action\"?: Property.TouchAction | undefined;\n  /**\n   * The **`-ms-touch-select`** CSS property is a Microsoft extension that toggles the gripper visual elements that enable touch text selection.\n   *\n   * **Syntax**: `grippers | none`\n   *\n   * **Initial value**: `grippers`\n   */\n  \"-ms-touch-select\"?: Property.MsTouchSelect | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-ms-transform\"?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  \"-ms-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-ms-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-ms-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  \"-ms-transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-ms-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `none | element | text`\n   *\n   * **Initial value**: `text`\n   */\n  \"-ms-user-select\"?: Property.MsUserSelect | undefined;\n  /**\n   * The **`word-break`** CSS property sets whether line breaks appear wherever the text would otherwise overflow its content box.\n   *\n   * **Syntax**: `normal | break-all | keep-all | break-word`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-ms-word-break\"?: Property.WordBreak | undefined;\n  /**\n   * The **`-ms-wrap-flow`** CSS property is a Microsoft extension that specifies how exclusions impact inline content within block-level elements.\n   *\n   * **Syntax**: `auto | both | start | end | maximum | clear`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-ms-wrap-flow\"?: Property.MsWrapFlow | undefined;\n  /**\n   * The **`-ms-wrap-margin`** CSS property is a Microsoft extension that specifies a margin that offsets the inner wrap shape from other shapes.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-ms-wrap-margin\"?: Property.MsWrapMargin<TLength> | undefined;\n  /**\n   * The **`-ms-wrap-through`** CSS property is a Microsoft extension that specifies how content should wrap around an exclusion element.\n   *\n   * **Syntax**: `wrap | none`\n   *\n   * **Initial value**: `wrap`\n   */\n  \"-ms-wrap-through\"?: Property.MsWrapThrough | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  \"-ms-writing-mode\"?: Property.WritingMode | undefined;\n  /**\n   * The CSS **`align-content`** property sets the distribution of space between and around content items along a flexbox's cross-axis or a grid's block axis.\n   *\n   * **Syntax**: `normal | <baseline-position> | <content-distribution> | <overflow-position>? <content-position>`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-align-content\"?: Property.AlignContent | undefined;\n  /**\n   * The CSS **`align-items`** property sets the `align-self` value on all direct children as a group. In Flexbox, it controls the alignment of items on the Cross Axis. In Grid Layout, it controls the alignment of items on the Block Axis within their grid area.\n   *\n   * **Syntax**: `normal | stretch | <baseline-position> | [ <overflow-position>? <self-position> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-align-items\"?: Property.AlignItems | undefined;\n  /**\n   * The **`align-self`** CSS property overrides a grid or flex item's `align-items` value. In Grid, it aligns the item inside the grid area. In Flexbox, it aligns the item on the cross axis.\n   *\n   * **Syntax**: `auto | normal | stretch | <baseline-position> | <overflow-position>? <self-position>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-align-self\"?: Property.AlignSelf | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-animation-direction\"?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   */\n  \"-webkit-animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-animation-name\"?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   */\n  \"-webkit-animation-play-state\"?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-webkit-animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`appearance`** CSS property is used to control native appearance of UI controls, that are based on operating system's theme.\n   *\n   * **Syntax**: `none | button | button-bevel | caret | checkbox | default-button | inner-spin-button | listbox | listitem | media-controls-background | media-controls-fullscreen-background | media-current-time-display | media-enter-fullscreen-button | media-exit-fullscreen-button | media-fullscreen-button | media-mute-button | media-overlay-play-button | media-play-button | media-seek-back-button | media-seek-forward-button | media-slider | media-sliderthumb | media-time-remaining-display | media-toggle-closed-captions-button | media-volume-slider | media-volume-slider-container | media-volume-sliderthumb | menulist | menulist-button | menulist-text | menulist-textfield | meter | progress-bar | progress-bar-value | push-button | radio | searchfield | searchfield-cancel-button | searchfield-decoration | searchfield-results-button | searchfield-results-decoration | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | square-button | textarea | textfield | -apple-pay-button`\n   *\n   * **Initial value**: `none` (but this value is overridden in the user agent CSS)\n   */\n  \"-webkit-appearance\"?: Property.WebkitAppearance | undefined;\n  /**\n   * The **`backdrop-filter`** CSS property lets you apply graphical effects such as blurring or color shifting to the area behind an element. Because it applies to everything _behind_ the element, to see the effect you must make the element or its background at least partially transparent.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-backdrop-filter\"?: Property.BackdropFilter | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   */\n  \"-webkit-backface-visibility\"?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   */\n  \"-webkit-background-clip\"?: Property.BackgroundClip | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   */\n  \"-webkit-background-origin\"?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  \"-webkit-background-size\"?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-border-before-color\"?: Property.WebkitBorderBeforeColor | undefined;\n  /**\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-border-before-style\"?: Property.WebkitBorderBeforeStyle | undefined;\n  /**\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-webkit-border-before-width\"?: Property.WebkitBorderBeforeWidth<TLength> | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-bottom-left-radius\"?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-bottom-right-radius\"?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-image-slice`** CSS property divides the image specified by `border-image-source` into regions. These regions form the components of an element's border image.\n   *\n   * **Syntax**: `<number-percentage>{1,4} && fill?`\n   *\n   * **Initial value**: `100%`\n   */\n  \"-webkit-border-image-slice\"?: Property.BorderImageSlice | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-top-left-radius\"?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-border-top-right-radius\"?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   */\n  \"-webkit-box-decoration-break\"?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`-webkit-box-reflect`** CSS property lets you reflect the content of an element in one specific direction.\n   *\n   * **Syntax**: `[ above | below | right | left ]? <length>? <image>?`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-box-reflect\"?: Property.WebkitBoxReflect<TLength> | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-box-shadow\"?: Property.BoxShadow | undefined;\n  /**\n   * The **`box-sizing`** CSS property sets how the total width and height of an element is calculated.\n   *\n   * **Syntax**: `content-box | border-box`\n   *\n   * **Initial value**: `content-box`\n   */\n  \"-webkit-box-sizing\"?: Property.BoxSizing | undefined;\n  /**\n   * The **`clip-path`** CSS property creates a clipping region that sets what part of an element should be shown. Parts that are inside the region are shown, while those outside are hidden.\n   *\n   * **Syntax**: `<clip-source> | [ <basic-shape> || <geometry-box> ] | none`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-clip-path\"?: Property.ClipPath | undefined;\n  /**\n   * The **`column-count`** CSS property breaks an element's content into the specified number of columns.\n   *\n   * **Syntax**: `<integer> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-column-count\"?: Property.ColumnCount | undefined;\n  /**\n   * The **`column-fill`** CSS property controls how an element's contents are balanced when broken into columns.\n   *\n   * **Syntax**: `auto | balance | balance-all`\n   *\n   * **Initial value**: `balance`\n   */\n  \"-webkit-column-fill\"?: Property.ColumnFill | undefined;\n  /**\n   * The **`column-rule-color`** CSS property sets the color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-column-rule-color\"?: Property.ColumnRuleColor | undefined;\n  /**\n   * The **`column-rule-style`** CSS property sets the style of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-style'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-column-rule-style\"?: Property.ColumnRuleStyle | undefined;\n  /**\n   * The **`column-rule-width`** CSS property sets the width of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'border-width'>`\n   *\n   * **Initial value**: `medium`\n   */\n  \"-webkit-column-rule-width\"?: Property.ColumnRuleWidth<TLength> | undefined;\n  /**\n   * The **`column-span`** CSS property makes it possible for an element to span across all columns when its value is set to `all`.\n   *\n   * **Syntax**: `none | all`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-column-span\"?: Property.ColumnSpan | undefined;\n  /**\n   * The **`column-width`** CSS property sets the ideal column width in a multi-column layout. The container will have as many columns as can fit without any of them having a width less than the `column-width` value. If the width of the container is narrower than the specified value, the single column's width will be smaller than the declared column width.\n   *\n   * **Syntax**: `<length> | auto`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-column-width\"?: Property.ColumnWidth<TLength> | undefined;\n  /**\n   * The **`filter`** CSS property applies graphical effects like blur or color shift to an element. Filters are commonly used to adjust the rendering of images, backgrounds, and borders.\n   *\n   * **Syntax**: `none | <filter-function-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-filter\"?: Property.Filter | undefined;\n  /**\n   * The **`flex-basis`** CSS property sets the initial main size of a flex item. It sets the size of the content box unless otherwise set with `box-sizing`.\n   *\n   * **Syntax**: `content | <'width'>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-flex-basis\"?: Property.FlexBasis<TLength> | undefined;\n  /**\n   * The **`flex-direction`** CSS property sets how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).\n   *\n   * **Syntax**: `row | row-reverse | column | column-reverse`\n   *\n   * **Initial value**: `row`\n   */\n  \"-webkit-flex-direction\"?: Property.FlexDirection | undefined;\n  /**\n   * The **`flex-grow`** CSS property sets the flex grow factor of a flex item's main size.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-flex-grow\"?: Property.FlexGrow | undefined;\n  /**\n   * The **`flex-shrink`** CSS property sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to `flex-shrink`.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `1`\n   */\n  \"-webkit-flex-shrink\"?: Property.FlexShrink | undefined;\n  /**\n   * The **`flex-wrap`** CSS property sets whether flex items are forced onto one line or can wrap onto multiple lines. If wrapping is allowed, it sets the direction that lines are stacked.\n   *\n   * **Syntax**: `nowrap | wrap | wrap-reverse`\n   *\n   * **Initial value**: `nowrap`\n   */\n  \"-webkit-flex-wrap\"?: Property.FlexWrap | undefined;\n  /**\n   * The **`font-feature-settings`** CSS property controls advanced typographic features in OpenType fonts.\n   *\n   * **Syntax**: `normal | <feature-tag-value>#`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-font-feature-settings\"?: Property.FontFeatureSettings | undefined;\n  /**\n   * The **`font-kerning`** CSS property sets the use of the kerning information stored in a font.\n   *\n   * **Syntax**: `auto | normal | none`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-font-kerning\"?: Property.FontKerning | undefined;\n  /**\n   * The **`font-smooth`** CSS property controls the application of anti-aliasing when fonts are rendered.\n   *\n   * **Syntax**: `auto | never | always | <absolute-size> | <length>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-font-smoothing\"?: Property.FontSmooth<TLength> | undefined;\n  /**\n   * The **`font-variant-ligatures`** CSS property controls which ligatures and contextual forms are used in textual content of the elements it applies to. This leads to more harmonized forms in the resulting text.\n   *\n   * **Syntax**: `normal | none | [ <common-lig-values> || <discretionary-lig-values> || <historical-lig-values> || <contextual-alt-values> ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-font-variant-ligatures\"?: Property.FontVariantLigatures | undefined;\n  /**\n   * The **`hyphenate-character`** CSS property sets the character (or string) used at the end of a line before a hyphenation break.\n   *\n   * **Syntax**: `auto | <string>`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-hyphenate-character\"?: Property.HyphenateCharacter | undefined;\n  /**\n   * The **`hyphens`** CSS property specifies how words should be hyphenated when text wraps across multiple lines. It can prevent hyphenation entirely, hyphenate at manually-specified points within the text, or let the browser automatically insert hyphens where appropriate.\n   *\n   * **Syntax**: `none | manual | auto`\n   *\n   * **Initial value**: `manual`\n   */\n  \"-webkit-hyphens\"?: Property.Hyphens | undefined;\n  /**\n   * The `initial-letter` CSS property sets styling for dropped, raised, and sunken initial letters.\n   *\n   * **Syntax**: `normal | [ <number> <integer>? ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-initial-letter\"?: Property.InitialLetter | undefined;\n  /**\n   * The CSS **`justify-content`** property defines how the browser distributes space between and around content items along the main-axis of a flex container, and the inline axis of a grid container.\n   *\n   * **Syntax**: `normal | <content-distribution> | <overflow-position>? [ <content-position> | left | right ]`\n   *\n   * **Initial value**: `normal`\n   */\n  \"-webkit-justify-content\"?: Property.JustifyContent | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-line-break\"?: Property.LineBreak | undefined;\n  /**\n   * The **`-webkit-line-clamp`** CSS property allows limiting of the contents of a block to the specified number of lines.\n   *\n   * **Syntax**: `none | <integer>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-line-clamp\"?: Property.WebkitLineClamp | undefined;\n  /**\n   * The **`margin-inline-end`** CSS property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. In other words, it corresponds to the `margin-top`, `margin-right`, `margin-bottom` or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-margin-end\"?: Property.MarginInlineEnd<TLength> | undefined;\n  /**\n   * The **`margin-inline-start`** CSS property defines the logical inline start margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation. It corresponds to the `margin-top`, `margin-right`, `margin-bottom`, or `margin-left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'margin-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-margin-start\"?: Property.MarginInlineStart<TLength> | undefined;\n  /**\n   * If a `mask-image` is specified, `-webkit-mask-attachment` determines whether the mask image's position is fixed within the viewport, or scrolls along with its containing block.\n   *\n   * **Syntax**: `<attachment>#`\n   *\n   * **Initial value**: `scroll`\n   */\n  \"-webkit-mask-attachment\"?: Property.WebkitMaskAttachment | undefined;\n  /**\n   * The **`mask-border-outset`** CSS property specifies the distance by which an element's mask border is set out from its border box.\n   *\n   * **Syntax**: `[ <length> | <number> ]{1,4}`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-mask-box-image-outset\"?: Property.MaskBorderOutset<TLength> | undefined;\n  /**\n   * The **`mask-border-repeat`** CSS property sets how the edge regions of a source image are adjusted to fit the dimensions of an element's mask border.\n   *\n   * **Syntax**: `[ stretch | repeat | round | space ]{1,2}`\n   *\n   * **Initial value**: `stretch`\n   */\n  \"-webkit-mask-box-image-repeat\"?: Property.MaskBorderRepeat | undefined;\n  /**\n   * The **`mask-border-slice`** CSS property divides the image set by `mask-border-source` into regions. These regions are used to form the components of an element's mask border.\n   *\n   * **Syntax**: `<number-percentage>{1,4} fill?`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-mask-box-image-slice\"?: Property.MaskBorderSlice | undefined;\n  /**\n   * The **`mask-border-source`** CSS property sets the source image used to create an element's mask border.\n   *\n   * **Syntax**: `none | <image>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-mask-box-image-source\"?: Property.MaskBorderSource | undefined;\n  /**\n   * The **`mask-border-width`** CSS property sets the width of an element's mask border.\n   *\n   * **Syntax**: `[ <length-percentage> | <number> | auto ]{1,4}`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-mask-box-image-width\"?: Property.MaskBorderWidth<TLength> | undefined;\n  /**\n   * The **`mask-clip`** CSS property determines the area which is affected by a mask. The painted content of an element must be restricted to this area.\n   *\n   * **Syntax**: `[ <box> | border | padding | content | text ]#`\n   *\n   * **Initial value**: `border`\n   */\n  \"-webkit-mask-clip\"?: Property.WebkitMaskClip | undefined;\n  /**\n   * The **`-webkit-mask-composite`** property specifies the manner in which multiple mask images applied to the same element are composited with one another. Mask images are composited in the opposite order that they are declared with the `-webkit-mask-image` property.\n   *\n   * **Syntax**: `<composite-style>#`\n   *\n   * **Initial value**: `source-over`\n   */\n  \"-webkit-mask-composite\"?: Property.WebkitMaskComposite | undefined;\n  /**\n   * The **`mask-image`** CSS property sets the image that is used as mask layer for an element. By default this means the alpha channel of the mask image will be multiplied with the alpha channel of the element. This can be controlled with the `mask-mode` property.\n   *\n   * **Syntax**: `<mask-reference>#`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-mask-image\"?: Property.WebkitMaskImage | undefined;\n  /**\n   * The **`mask-origin`** CSS property sets the origin of a mask.\n   *\n   * **Syntax**: `[ <box> | border | padding | content ]#`\n   *\n   * **Initial value**: `padding`\n   */\n  \"-webkit-mask-origin\"?: Property.WebkitMaskOrigin | undefined;\n  /**\n   * The **`mask-position`** CSS property sets the initial position, relative to the mask position layer set by `mask-origin`, for each defined mask image.\n   *\n   * **Syntax**: `<position>#`\n   *\n   * **Initial value**: `0% 0%`\n   */\n  \"-webkit-mask-position\"?: Property.WebkitMaskPosition<TLength> | undefined;\n  /**\n   * The `-webkit-mask-position-x` CSS property sets the initial horizontal position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  \"-webkit-mask-position-x\"?: Property.WebkitMaskPositionX<TLength> | undefined;\n  /**\n   * The `-webkit-mask-position-y` CSS property sets the initial vertical position of a mask image.\n   *\n   * **Syntax**: `[ <length-percentage> | top | center | bottom ]#`\n   *\n   * **Initial value**: `0%`\n   */\n  \"-webkit-mask-position-y\"?: Property.WebkitMaskPositionY<TLength> | undefined;\n  /**\n   * The **`mask-repeat`** CSS property sets how mask images are repeated. A mask image can be repeated along the horizontal axis, the vertical axis, both axes, or not repeated at all.\n   *\n   * **Syntax**: `<repeat-style>#`\n   *\n   * **Initial value**: `repeat`\n   */\n  \"-webkit-mask-repeat\"?: Property.WebkitMaskRepeat | undefined;\n  /**\n   * The `-webkit-mask-repeat-x` property specifies whether and how a mask image is repeated (tiled) horizontally.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  \"-webkit-mask-repeat-x\"?: Property.WebkitMaskRepeatX | undefined;\n  /**\n   * The `-webkit-mask-repeat-y` property sets whether and how a mask image is repeated (tiled) vertically.\n   *\n   * **Syntax**: `repeat | no-repeat | space | round`\n   *\n   * **Initial value**: `repeat`\n   */\n  \"-webkit-mask-repeat-y\"?: Property.WebkitMaskRepeatY | undefined;\n  /**\n   * The **`mask-size`** CSS property specifies the sizes of the mask images. The size of the image can be fully or partially constrained in order to preserve its intrinsic ratio.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   */\n  \"-webkit-mask-size\"?: Property.WebkitMaskSize<TLength> | undefined;\n  /**\n   * The **`max-inline-size`** CSS property defines the horizontal or vertical maximum size of an element's block, depending on its writing mode. It corresponds to either the `max-width` or the `max-height` property, depending on the value of `writing-mode`.\n   *\n   * **Syntax**: `<'max-width'>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-max-inline-size\"?: Property.MaxInlineSize<TLength> | undefined;\n  /**\n   * The **`order`** CSS property sets the order to lay out an item in a flex or grid container. Items in a container are sorted by ascending `order` value and then by their source code order.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-order\"?: Property.Order | undefined;\n  /**\n   * The `-webkit-overflow-scrolling` CSS property controls whether or not touch devices use momentum-based scrolling for a given element.\n   *\n   * **Syntax**: `auto | touch`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-overflow-scrolling\"?: Property.WebkitOverflowScrolling | undefined;\n  /**\n   * The **`padding-inline-end`** CSS property defines the logical inline end padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-padding-end\"?: Property.PaddingInlineEnd<TLength> | undefined;\n  /**\n   * The **`padding-inline-start`** CSS property defines the logical inline start padding of an element, which maps to a physical padding depending on the element's writing mode, directionality, and text orientation.\n   *\n   * **Syntax**: `<'padding-left'>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-padding-start\"?: Property.PaddingInlineStart<TLength> | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-perspective\"?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   */\n  \"-webkit-perspective-origin\"?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`print-color-adjust`** CSS property sets what, if anything, the user agent may do to optimize the appearance of the element on the output device. By default, the browser is allowed to make any adjustments to the element's appearance it determines to be necessary and prudent given the type and capabilities of the output device.\n   *\n   * **Syntax**: `economy | exact`\n   *\n   * **Initial value**: `economy`\n   */\n  \"-webkit-print-color-adjust\"?: Property.PrintColorAdjust | undefined;\n  /**\n   * The **`ruby-position`** CSS property defines the position of a ruby element relatives to its base element. It can be positioned over the element (`over`), under it (`under`), or between the characters on their right side (`inter-character`).\n   *\n   * **Syntax**: `[ alternate || [ over | under ] ] | inter-character`\n   *\n   * **Initial value**: `alternate`\n   */\n  \"-webkit-ruby-position\"?: Property.RubyPosition | undefined;\n  /**\n   * The **`scroll-snap-type`** CSS property sets how strictly snap points are enforced on the scroll container in case there is one.\n   *\n   * **Syntax**: `none | [ x | y | block | inline | both ] [ mandatory | proximity ]?`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-scroll-snap-type\"?: Property.ScrollSnapType | undefined;\n  /**\n   * The **`shape-margin`** CSS property sets a margin for a CSS shape created using `shape-outside`.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-shape-margin\"?: Property.ShapeMargin<TLength> | undefined;\n  /**\n   * **`-webkit-tap-highlight-color`** is a non-standard CSS property that sets the color of the highlight that appears over a link while it's being tapped. The highlighting indicates to the user that their tap is being successfully recognized, and indicates which element they're tapping on.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `black`\n   */\n  \"-webkit-tap-highlight-color\"?: Property.WebkitTapHighlightColor | undefined;\n  /**\n   * The **`text-combine-upright`** CSS property sets the combination of characters into the space of a single character. If the combined text is wider than 1em, the user agent must fit the contents within 1em. The resulting composition is treated as a single upright glyph for layout and decoration. This property only has an effect in vertical writing modes.\n   *\n   * **Syntax**: `none | all | [ digits <integer>? ]`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-text-combine\"?: Property.TextCombineUpright | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-decoration-color\"?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-text-decoration-line\"?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-skip`** CSS property sets what parts of an element's content any text decoration affecting the element must skip over. It controls all text decoration lines drawn by the element and also any text decoration lines drawn by its ancestors.\n   *\n   * **Syntax**: `none | [ objects || [ spaces | [ leading-spaces || trailing-spaces ] ] || edges || box-decoration ]`\n   *\n   * **Initial value**: `objects`\n   */\n  \"-webkit-text-decoration-skip\"?: Property.TextDecorationSkip | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   */\n  \"-webkit-text-decoration-style\"?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`text-emphasis-color`** CSS property sets the color of emphasis marks. This value can also be set using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-emphasis-color\"?: Property.TextEmphasisColor | undefined;\n  /**\n   * The **`text-emphasis-position`** CSS property sets where emphasis marks are drawn. Like ruby text, if there isn't enough room for emphasis marks, the line height is increased.\n   *\n   * **Syntax**: `[ over | under ] && [ right | left ]`\n   *\n   * **Initial value**: `over right`\n   */\n  \"-webkit-text-emphasis-position\"?: Property.TextEmphasisPosition | undefined;\n  /**\n   * The **`text-emphasis-style`** CSS property sets the appearance of emphasis marks. It can also be set, and reset, using the `text-emphasis` shorthand.\n   *\n   * **Syntax**: `none | [ [ filled | open ] || [ dot | circle | double-circle | triangle | sesame ] ] | <string>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-text-emphasis-style\"?: Property.TextEmphasisStyle | undefined;\n  /**\n   * The **`-webkit-text-fill-color`** CSS property specifies the fill color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-fill-color\"?: Property.WebkitTextFillColor | undefined;\n  /**\n   * The **`text-orientation`** CSS property sets the orientation of the text characters in a line. It only affects text in vertical mode (when `writing-mode` is not `horizontal-tb`). It is useful for controlling the display of languages that use vertical script, and also for making vertical table headers.\n   *\n   * **Syntax**: `mixed | upright | sideways`\n   *\n   * **Initial value**: `mixed`\n   */\n  \"-webkit-text-orientation\"?: Property.TextOrientation | undefined;\n  /**\n   * The **`text-size-adjust`** CSS property controls the text inflation algorithm used on some smartphones and tablets. Other browsers will ignore this property.\n   *\n   * **Syntax**: `none | auto | <percentage>`\n   *\n   * **Initial value**: `auto` for smartphone browsers supporting inflation, `none` in other cases (and then not modifiable).\n   */\n  \"-webkit-text-size-adjust\"?: Property.TextSizeAdjust | undefined;\n  /**\n   * The **`-webkit-text-stroke-color`** CSS property specifies the stroke color of characters of text. If this property is not set, the value of the `color` property is used.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   */\n  \"-webkit-text-stroke-color\"?: Property.WebkitTextStrokeColor | undefined;\n  /**\n   * The **`-webkit-text-stroke-width`** CSS property specifies the width of the stroke for text.\n   *\n   * **Syntax**: `<length>`\n   *\n   * **Initial value**: `0`\n   */\n  \"-webkit-text-stroke-width\"?: Property.WebkitTextStrokeWidth<TLength> | undefined;\n  /**\n   * The **`text-underline-position`** CSS property specifies the position of the underline which is set using the `text-decoration` property's `underline` value.\n   *\n   * **Syntax**: `auto | from-font | [ under || [ left | right ] ]`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-text-underline-position\"?: Property.TextUnderlinePosition | undefined;\n  /**\n   * The `-webkit-touch-callout` CSS property controls the display of the default callout shown when you touch and hold a touch target.\n   *\n   * **Syntax**: `default | none`\n   *\n   * **Initial value**: `default`\n   */\n  \"-webkit-touch-callout\"?: Property.WebkitTouchCallout | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   */\n  \"-webkit-transform\"?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   */\n  \"-webkit-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   */\n  \"-webkit-transform-style\"?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   */\n  \"-webkit-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   */\n  \"-webkit-transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   */\n  \"-webkit-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * **Syntax**: `read-only | read-write | read-write-plaintext-only`\n   *\n   * **Initial value**: `read-only`\n   */\n  \"-webkit-user-modify\"?: Property.WebkitUserModify | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   */\n  \"-webkit-user-select\"?: Property.UserSelect | undefined;\n  /**\n   * The **`writing-mode`** CSS property sets whether lines of text are laid out horizontally or vertically, as well as the direction in which blocks progress. When set for an entire document, it should be set on the root element (`html` element for HTML documents).\n   *\n   * **Syntax**: `horizontal-tb | vertical-rl | vertical-lr | sideways-rl | sideways-lr`\n   *\n   * **Initial value**: `horizontal-tb`\n   */\n  \"-webkit-writing-mode\"?: Property.WritingMode | undefined;\n}\n\nexport interface VendorShorthandPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  \"-moz-animation\"?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  \"-moz-border-image\"?: Property.BorderImage | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  \"-moz-column-rule\"?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  \"-moz-columns\"?: Property.Columns<TLength> | undefined;\n  /**\n   * In Mozilla applications like Firefox, the **`-moz-outline-radius`** CSS shorthand property can be used to give an element's `outline` rounded corners.\n   *\n   * **Syntax**: `<outline-radius>{1,4} [ / <outline-radius>{1,4} ]?`\n   */\n  \"-moz-outline-radius\"?: Property.MozOutlineRadius<TLength> | undefined;\n  /**\n   * The **`-ms-content-zoom-limit`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-limit-min` and `-ms-content-zoom-limit-max` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-limit-min'> <'-ms-content-zoom-limit-max'>`\n   */\n  \"-ms-content-zoom-limit\"?: Property.MsContentZoomLimit | undefined;\n  /**\n   * The **`-ms-content-zoom-snap`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-content-zoom-snap-type` and `-ms-content-zoom-snap-points` properties.\n   *\n   * **Syntax**: `<'-ms-content-zoom-snap-type'> || <'-ms-content-zoom-snap-points'>`\n   */\n  \"-ms-content-zoom-snap\"?: Property.MsContentZoomSnap | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  \"-ms-flex\"?: Property.Flex<TLength> | undefined;\n  /**\n   * The **\\-ms-scroll-limit** CSS property is a Microsoft extension that specifies values for the `-ms-scroll-limit-x-min`, `-ms-scroll-limit-y-min`, `-ms-scroll-limit-x-max`, and `-ms-scroll-limit-y-max` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-limit-x-min'> <'-ms-scroll-limit-y-min'> <'-ms-scroll-limit-x-max'> <'-ms-scroll-limit-y-max'>`\n   */\n  \"-ms-scroll-limit\"?: Property.MsScrollLimit | undefined;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-x` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-x'>`\n   */\n  \"-ms-scroll-snap-x\"?: Property.MsScrollSnapX | undefined;\n  /**\n   * The **`-ms-scroll-snap-x`** CSS shorthand property is a Microsoft extension that specifies values for the `-ms-scroll-snap-type` and `-ms-scroll-snap-points-y` properties.\n   *\n   * **Syntax**: `<'-ms-scroll-snap-type'> <'-ms-scroll-snap-points-y'>`\n   */\n  \"-ms-scroll-snap-y\"?: Property.MsScrollSnapY | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  \"-ms-transition\"?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   */\n  \"-webkit-animation\"?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`-webkit-border-before`** CSS property is a shorthand property for setting the individual logical block start border property values in a single place in the style sheet.\n   *\n   * **Syntax**: `<'border-width'> || <'border-style'> || <color>`\n   */\n  \"-webkit-border-before\"?: Property.WebkitBorderBefore<TLength> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   */\n  \"-webkit-border-image\"?: Property.BorderImage | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   */\n  \"-webkit-border-radius\"?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`column-rule`** shorthand CSS property sets the width, style, and color of the line drawn between columns in a multi-column layout.\n   *\n   * **Syntax**: `<'column-rule-width'> || <'column-rule-style'> || <'column-rule-color'>`\n   */\n  \"-webkit-column-rule\"?: Property.ColumnRule<TLength> | undefined;\n  /**\n   * The **`columns`** CSS shorthand property sets the number of columns to use when drawing an element's contents, as well as those columns' widths.\n   *\n   * **Syntax**: `<'column-width'> || <'column-count'>`\n   */\n  \"-webkit-columns\"?: Property.Columns<TLength> | undefined;\n  /**\n   * The **`flex`** CSS shorthand property sets how a flex _item_ will grow or shrink to fit the space available in its flex container.\n   *\n   * **Syntax**: `none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]`\n   */\n  \"-webkit-flex\"?: Property.Flex<TLength> | undefined;\n  /**\n   * The **`flex-flow`** CSS shorthand property specifies the direction of a flex container, as well as its wrapping behavior.\n   *\n   * **Syntax**: `<'flex-direction'> || <'flex-wrap'>`\n   */\n  \"-webkit-flex-flow\"?: Property.FlexFlow | undefined;\n  /**\n   * The **`mask`** CSS shorthand property hides an element (partially or fully) by masking or clipping the image at specific points.\n   *\n   * **Syntax**: `[ <mask-reference> || <position> [ / <bg-size> ]? || <repeat-style> || [ <box> | border | padding | content | text ] || [ <box> | border | padding | content ] ]#`\n   */\n  \"-webkit-mask\"?: Property.WebkitMask<TLength> | undefined;\n  /**\n   * The **`mask-border`** CSS shorthand property lets you create a mask along the edge of an element's border.\n   *\n   * **Syntax**: `<'mask-border-source'> || <'mask-border-slice'> [ / <'mask-border-width'>? [ / <'mask-border-outset'> ]? ]? || <'mask-border-repeat'> || <'mask-border-mode'>`\n   */\n  \"-webkit-mask-box-image\"?: Property.MaskBorder | undefined;\n  /**\n   * The **`text-emphasis`** CSS property applies emphasis marks to text (except spaces and control characters). It is a shorthand for `text-emphasis-style` and `text-emphasis-color`.\n   *\n   * **Syntax**: `<'text-emphasis-style'> || <'text-emphasis-color'>`\n   */\n  \"-webkit-text-emphasis\"?: Property.TextEmphasis | undefined;\n  /**\n   * The **`-webkit-text-stroke`** CSS property specifies the width and color of strokes for text characters. This is a shorthand property for the longhand properties `-webkit-text-stroke-width` and `-webkit-text-stroke-color`.\n   *\n   * **Syntax**: `<length> || <color>`\n   */\n  \"-webkit-text-stroke\"?: Property.WebkitTextStroke<TLength> | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   */\n  \"-webkit-transition\"?: Property.Transition<TTime> | undefined;\n}\n\nexport interface VendorPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}>\n  extends VendorLonghandPropertiesHyphen<TLength, TTime>,\n    VendorShorthandPropertiesHyphen<TLength, TTime> {}\n\nexport interface ObsoletePropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  /**\n   * In combination with `elevation`, the **`azimuth`** CSS property enables different audio sources to be positioned spatially for aural presentation. This is important in that it provides a natural way to tell several voices apart, as each can be positioned to originate at a different location on the sound stage. Stereo output produce a lateral sound stage, while binaural headphones and multi-speaker setups allow for a fully three-dimensional stage.\n   *\n   * **Syntax**: `<angle> | [ [ left-side | far-left | left | center-left | center | center-right | right | far-right | right-side ] || behind ] | leftwards | rightwards`\n   *\n   * **Initial value**: `center`\n   *\n   * @deprecated\n   */\n  azimuth?: Property.Azimuth | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"box-align\"?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"box-direction\"?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"box-flex\"?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"box-flex-group\"?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  \"box-lines\"?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"box-orient\"?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"box-pack\"?: Property.BoxPack | undefined;\n  /**\n   * The **`clip`** CSS property defines a visible portion of an element. The `clip` property applies only to absolutely positioned elements — that is, elements with `position:absolute` or `position:fixed`.\n   *\n   * **Syntax**: `<shape> | auto`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  clip?: Property.Clip | undefined;\n  /**\n   * The **`column-gap`** CSS property sets the size of the gap (gutter) between an element's columns.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"grid-column-gap\"?: Property.GridColumnGap<TLength> | undefined;\n  /**\n   * The **`gap`** CSS property sets the gaps (gutters) between rows and columns. It is a shorthand for `row-gap` and `column-gap`.\n   *\n   * **Syntax**: `<'grid-row-gap'> <'grid-column-gap'>?`\n   *\n   * @deprecated\n   */\n  \"grid-gap\"?: Property.GridGap<TLength> | undefined;\n  /**\n   * The **`row-gap`** CSS property sets the size of the gap (gutter) between an element's rows.\n   *\n   * **Syntax**: `<length-percentage>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"grid-row-gap\"?: Property.GridRowGap<TLength> | undefined;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"ime-mode\"?: Property.ImeMode | undefined;\n  /**\n   * The **`inset-block`** CSS property defines the logical block start and end offsets of an element, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * @deprecated\n   */\n  \"offset-block\"?: Property.InsetBlock<TLength> | undefined;\n  /**\n   * The **`inset-block-end`** CSS property defines the logical block end offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-block-end\"?: Property.InsetBlockEnd<TLength> | undefined;\n  /**\n   * The **`inset-block-start`** CSS property defines the logical block start offset of an element, which maps to a physical inset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-block-start\"?: Property.InsetBlockStart<TLength> | undefined;\n  /**\n   * The **`inset-inline`** CSS property defines the logical start and end offsets of an element in the inline direction, which maps to physical offsets depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top` and `bottom`, or `right` and `left` properties depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>{1,2}`\n   *\n   * @deprecated\n   */\n  \"offset-inline\"?: Property.InsetInline<TLength> | undefined;\n  /**\n   * The **`inset-inline-end`** CSS property defines the logical inline end inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-inline-end\"?: Property.InsetInlineEnd<TLength> | undefined;\n  /**\n   * The **`inset-inline-start`** CSS property defines the logical inline start inset of an element, which maps to a physical offset depending on the element's writing mode, directionality, and text orientation. It corresponds to the `top`, `right`, `bottom`, or `left` property depending on the values defined for `writing-mode`, `direction`, and `text-orientation`.\n   *\n   * **Syntax**: `<'top'>`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"offset-inline-start\"?: Property.InsetInlineStart<TLength> | undefined;\n  /**\n   * The **`scroll-snap-coordinate`** CSS property defines the x and y coordinate positions within an element that will align with its nearest ancestor scroll container's `scroll-snap-destination` for each respective axis.\n   *\n   * **Syntax**: `none | <position>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-coordinate\"?: Property.ScrollSnapCoordinate<TLength> | undefined;\n  /**\n   * The **`scroll-snap-destination`** CSS property defines the position in x and y coordinates within the scroll container's visual viewport which element snap points align with.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `0px 0px`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-destination\"?: Property.ScrollSnapDestination<TLength> | undefined;\n  /**\n   * The **`scroll-snap-points-x`** CSS property defines the horizontal positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-points-x\"?: Property.ScrollSnapPointsX | undefined;\n  /**\n   * The **`scroll-snap-points-y`** CSS property defines the vertical positioning of snap points within the content of the scroll container they are applied to.\n   *\n   * **Syntax**: `none | repeat( <length-percentage> )`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-points-y\"?: Property.ScrollSnapPointsY | undefined;\n  /**\n   * The **`scroll-snap-type-x`** CSS property defines how strictly snap points are enforced on the horizontal axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-type-x\"?: Property.ScrollSnapTypeX | undefined;\n  /**\n   * The **`scroll-snap-type-y`** CSS property defines how strictly snap points are enforced on the vertical axis of the scroll container in case there is one.\n   *\n   * **Syntax**: `none | mandatory | proximity`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"scroll-snap-type-y\"?: Property.ScrollSnapTypeY | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-align\"?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-direction\"?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-flex\"?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-flex-group\"?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-lines\"?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"-khtml-box-orient\"?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"-khtml-box-pack\"?: Property.BoxPack | undefined;\n  /**\n   * The **`line-break`** CSS property sets how to break lines of Chinese, Japanese, or Korean (CJK) text when working with punctuation and symbols.\n   *\n   * **Syntax**: `auto | loose | normal | strict | anywhere`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-khtml-line-break\"?: Property.LineBreak | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-khtml-opacity\"?: Property.Opacity | undefined;\n  /**\n   * The **`user-select`** CSS property controls whether the user can select text. This doesn't have any effect on content loaded as part of a browser's user interface (its chrome), except in textboxes.\n   *\n   * **Syntax**: `auto | text | none | contain | all`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-khtml-user-select\"?: Property.UserSelect | undefined;\n  /**\n   * The **`backface-visibility`** CSS property sets whether the back face of an element is visible when turned towards the user.\n   *\n   * **Syntax**: `visible | hidden`\n   *\n   * **Initial value**: `visible`\n   *\n   * @deprecated\n   */\n  \"-moz-backface-visibility\"?: Property.BackfaceVisibility | undefined;\n  /**\n   * The **`background-clip`** CSS property sets whether an element's background extends underneath its border box, padding box, or content box.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `border-box`\n   *\n   * @deprecated\n   */\n  \"-moz-background-clip\"?: Property.BackgroundClip | undefined;\n  /**\n   * The **`box-decoration-break`** CSS property specifies how an element's fragments should be rendered when broken across multiple lines, columns, or pages.\n   *\n   * **Syntax**: `slice | clone`\n   *\n   * **Initial value**: `slice`\n   *\n   * @deprecated\n   */\n  \"-moz-background-inline-policy\"?: Property.BoxDecorationBreak | undefined;\n  /**\n   * The **`background-origin`** CSS property sets the background's origin: from the border start, inside the border, or inside the padding.\n   *\n   * **Syntax**: `<box>#`\n   *\n   * **Initial value**: `padding-box`\n   *\n   * @deprecated\n   */\n  \"-moz-background-origin\"?: Property.BackgroundOrigin | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  \"-moz-background-size\"?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * The **`border-radius`** CSS property rounds the corners of an element's outer border edge. You can set a single radius to make circular corners, or two radii to make elliptical corners.\n   *\n   * **Syntax**: `<length-percentage>{1,4} [ / <length-percentage>{1,4} ]?`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius\"?: Property.BorderRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-left-radius`** CSS property rounds the bottom-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-bottomleft\"?: Property.BorderBottomLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-bottom-right-radius`** CSS property rounds the bottom-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-bottomright\"?: Property.BorderBottomRightRadius<TLength> | undefined;\n  /**\n   * The **`border-top-left-radius`** CSS property rounds the top-left corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-topleft\"?: Property.BorderTopLeftRadius<TLength> | undefined;\n  /**\n   * The **`border-top-right-radius`** CSS property rounds the top-right corner of an element by specifying the radius (or the radius of the semi-major and semi-minor axes) of the ellipse defining the curvature of the corner.\n   *\n   * **Syntax**: `<length-percentage>{1,2}`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-border-radius-topright\"?: Property.BorderTopRightRadius<TLength> | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"-moz-box-align\"?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-moz-box-direction\"?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-box-flex\"?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-moz-box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"-moz-box-orient\"?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"-moz-box-pack\"?: Property.BoxPack | undefined;\n  /**\n   * The **`box-shadow`** CSS property adds shadow effects around an element's frame. You can set multiple effects separated by commas. A box shadow is described by X and Y offsets relative to the element, blur and spread radius, and color.\n   *\n   * **Syntax**: `none | <shadow>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-box-shadow\"?: Property.BoxShadow | undefined;\n  /**\n   * The non-standard **`-moz-float-edge`** CSS property specifies whether the height and width properties of the element include the margin, border, or padding thickness.\n   *\n   * **Syntax**: `border-box | content-box | margin-box | padding-box`\n   *\n   * **Initial value**: `content-box`\n   *\n   * @deprecated\n   */\n  \"-moz-float-edge\"?: Property.MozFloatEdge | undefined;\n  /**\n   * The **`-moz-force-broken-image-icon`** extended CSS property can be used to force the broken image icon to be shown even when a broken image has an `alt` attribute.\n   *\n   * **Syntax**: `0 | 1`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-moz-force-broken-image-icon\"?: Property.MozForceBrokenImageIcon | undefined;\n  /**\n   * The **`opacity`** CSS property sets the opacity of an element. Opacity is the degree to which content behind an element is hidden, and is the opposite of transparency.\n   *\n   * **Syntax**: `<alpha-value>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-moz-opacity\"?: Property.Opacity | undefined;\n  /**\n   * The **`outline`** CSS shorthand property sets most of the outline properties in a single declaration.\n   *\n   * **Syntax**: `[ <'outline-color'> || <'outline-style'> || <'outline-width'> ]`\n   *\n   * @deprecated\n   */\n  \"-moz-outline\"?: Property.Outline<TLength> | undefined;\n  /**\n   * The **`outline-color`** CSS property sets the color of an element's outline.\n   *\n   * **Syntax**: `<color> | invert`\n   *\n   * **Initial value**: `invert`, for browsers supporting it, `currentColor` for the other\n   *\n   * @deprecated\n   */\n  \"-moz-outline-color\"?: Property.OutlineColor | undefined;\n  /**\n   * The **`outline-style`** CSS property sets the style of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `auto | <'border-style'>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-outline-style\"?: Property.OutlineStyle | undefined;\n  /**\n   * The CSS **`outline-width`** property sets the thickness of an element's outline. An outline is a line that is drawn around an element, outside the `border`.\n   *\n   * **Syntax**: `<line-width>`\n   *\n   * **Initial value**: `medium`\n   *\n   * @deprecated\n   */\n  \"-moz-outline-width\"?: Property.OutlineWidth<TLength> | undefined;\n  /**\n   * The **`perspective`** CSS property determines the distance between the z=0 plane and the user in order to give a 3D-positioned element some perspective.\n   *\n   * **Syntax**: `none | <length>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-perspective\"?: Property.Perspective<TLength> | undefined;\n  /**\n   * The **`perspective-origin`** CSS property determines the position at which the viewer is looking. It is used as the _vanishing point_ by the `perspective` property.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * @deprecated\n   */\n  \"-moz-perspective-origin\"?: Property.PerspectiveOrigin<TLength> | undefined;\n  /**\n   * The **`text-align-last`** CSS property sets how the last line of a block or a line, right before a forced line break, is aligned.\n   *\n   * **Syntax**: `auto | start | end | left | right | center | justify`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-moz-text-align-last\"?: Property.TextAlignLast | undefined;\n  /**\n   * The **`text-decoration-color`** CSS property sets the color of decorations added to text by `text-decoration-line`.\n   *\n   * **Syntax**: `<color>`\n   *\n   * **Initial value**: `currentcolor`\n   *\n   * @deprecated\n   */\n  \"-moz-text-decoration-color\"?: Property.TextDecorationColor | undefined;\n  /**\n   * The **`text-decoration-line`** CSS property sets the kind of decoration that is used on text in an element, such as an underline or overline.\n   *\n   * **Syntax**: `none | [ underline || overline || line-through || blink ] | spelling-error | grammar-error`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-text-decoration-line\"?: Property.TextDecorationLine | undefined;\n  /**\n   * The **`text-decoration-style`** CSS property sets the style of the lines specified by `text-decoration-line`. The style applies to all lines that are set with `text-decoration-line`.\n   *\n   * **Syntax**: `solid | double | dotted | dashed | wavy`\n   *\n   * **Initial value**: `solid`\n   *\n   * @deprecated\n   */\n  \"-moz-text-decoration-style\"?: Property.TextDecorationStyle | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-moz-transform\"?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * @deprecated\n   */\n  \"-moz-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transform-style`** CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element.\n   *\n   * **Syntax**: `flat | preserve-3d`\n   *\n   * **Initial value**: `flat`\n   *\n   * @deprecated\n   */\n  \"-moz-transform-style\"?: Property.TransformStyle | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * @deprecated\n   */\n  \"-moz-transition\"?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-moz-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-moz-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * @deprecated\n   */\n  \"-moz-transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  \"-moz-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * In Mozilla applications, **`-moz-user-input`** determines if an element will accept user input.\n   *\n   * **Syntax**: `auto | none | enabled | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-moz-user-input\"?: Property.MozUserInput | undefined;\n  /**\n   * The **`ime-mode`** CSS property controls the state of the input method editor (IME) for text fields. This property is obsolete.\n   *\n   * **Syntax**: `auto | normal | active | inactive | disabled`\n   *\n   * **Initial value**: `auto`\n   *\n   * @deprecated\n   */\n  \"-ms-ime-mode\"?: Property.ImeMode | undefined;\n  /**\n   * The **`animation`** shorthand CSS property applies an animation between styles. It is a shorthand for `animation-name`, `animation-duration`, `animation-timing-function`, `animation-delay`, `animation-iteration-count`, `animation-direction`, `animation-fill-mode`, and `animation-play-state`.\n   *\n   * **Syntax**: `<single-animation>#`\n   *\n   * @deprecated\n   */\n  \"-o-animation\"?: Property.Animation<TTime> | undefined;\n  /**\n   * The **`animation-delay`** CSS property specifies the amount of time to wait from applying the animation to an element before beginning to perform the animation. The animation can start later, immediately from its beginning, or immediately and partway through the animation.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-animation-delay\"?: Property.AnimationDelay<TTime> | undefined;\n  /**\n   * The **`animation-direction`** CSS property sets whether an animation should play forward, backward, or alternate back and forth between playing the sequence forward and backward.\n   *\n   * **Syntax**: `<single-animation-direction>#`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-o-animation-direction\"?: Property.AnimationDirection | undefined;\n  /**\n   * The **`animation-duration`** CSS property sets the length of time that an animation takes to complete one cycle.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-animation-duration\"?: Property.AnimationDuration<TTime> | undefined;\n  /**\n   * The **`animation-fill-mode`** CSS property sets how a CSS animation applies styles to its target before and after its execution.\n   *\n   * **Syntax**: `<single-animation-fill-mode>#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-o-animation-fill-mode\"?: Property.AnimationFillMode | undefined;\n  /**\n   * The **`animation-iteration-count`** CSS property sets the number of times an animation sequence should be played before stopping.\n   *\n   * **Syntax**: `<single-animation-iteration-count>#`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-o-animation-iteration-count\"?: Property.AnimationIterationCount | undefined;\n  /**\n   * The **`animation-name`** CSS property specifies the names of one or more `@keyframes` at-rules that describe the animation to apply to an element. Multiple `@keyframe` at-rules are specified as a comma-separated list of names. If the specified name does not match any `@keyframe` at-rule, no properties are animated.\n   *\n   * **Syntax**: `[ none | <keyframes-name> ]#`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-o-animation-name\"?: Property.AnimationName | undefined;\n  /**\n   * The **`animation-play-state`** CSS property sets whether an animation is running or paused.\n   *\n   * **Syntax**: `<single-animation-play-state>#`\n   *\n   * **Initial value**: `running`\n   *\n   * @deprecated\n   */\n  \"-o-animation-play-state\"?: Property.AnimationPlayState | undefined;\n  /**\n   * The **`animation-timing-function`** CSS property sets how an animation progresses through the duration of each cycle.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  \"-o-animation-timing-function\"?: Property.AnimationTimingFunction | undefined;\n  /**\n   * The **`background-size`** CSS property sets the size of the element's background image. The image can be left to its natural size, stretched, or constrained to fit the available space.\n   *\n   * **Syntax**: `<bg-size>#`\n   *\n   * **Initial value**: `auto auto`\n   *\n   * @deprecated\n   */\n  \"-o-background-size\"?: Property.BackgroundSize<TLength> | undefined;\n  /**\n   * The **`border-image`** CSS property draws an image around a given element. It replaces the element's regular border.\n   *\n   * **Syntax**: `<'border-image-source'> || <'border-image-slice'> [ / <'border-image-width'> | / <'border-image-width'>? / <'border-image-outset'> ]? || <'border-image-repeat'>`\n   *\n   * @deprecated\n   */\n  \"-o-border-image\"?: Property.BorderImage | undefined;\n  /**\n   * The **`object-fit`** CSS property sets how the content of a replaced element, such as an `<img>` or `<video>`, should be resized to fit its container.\n   *\n   * **Syntax**: `fill | contain | cover | none | scale-down`\n   *\n   * **Initial value**: `fill`\n   *\n   * @deprecated\n   */\n  \"-o-object-fit\"?: Property.ObjectFit | undefined;\n  /**\n   * The **`object-position`** CSS property specifies the alignment of the selected replaced element's contents within the element's box. Areas of the box which aren't covered by the replaced element's object will show the element's background.\n   *\n   * **Syntax**: `<position>`\n   *\n   * **Initial value**: `50% 50%`\n   *\n   * @deprecated\n   */\n  \"-o-object-position\"?: Property.ObjectPosition<TLength> | undefined;\n  /**\n   * The **`tab-size`** CSS property is used to customize the width of tab characters (U+0009).\n   *\n   * **Syntax**: `<integer> | <length>`\n   *\n   * **Initial value**: `8`\n   *\n   * @deprecated\n   */\n  \"-o-tab-size\"?: Property.TabSize<TLength> | undefined;\n  /**\n   * The **`text-overflow`** CSS property sets how hidden overflow content is signaled to users. It can be clipped, display an ellipsis ('`…`'), or display a custom string.\n   *\n   * **Syntax**: `[ clip | ellipsis | <string> ]{1,2}`\n   *\n   * **Initial value**: `clip`\n   *\n   * @deprecated\n   */\n  \"-o-text-overflow\"?: Property.TextOverflow | undefined;\n  /**\n   * The **`transform`** CSS property lets you rotate, scale, skew, or translate an element. It modifies the coordinate space of the CSS visual formatting model.\n   *\n   * **Syntax**: `none | <transform-list>`\n   *\n   * **Initial value**: `none`\n   *\n   * @deprecated\n   */\n  \"-o-transform\"?: Property.Transform | undefined;\n  /**\n   * The **`transform-origin`** CSS property sets the origin for an element's transformations.\n   *\n   * **Syntax**: `[ <length-percentage> | left | center | right | top | bottom ] | [ [ <length-percentage> | left | center | right ] && [ <length-percentage> | top | center | bottom ] ] <length>?`\n   *\n   * **Initial value**: `50% 50% 0`\n   *\n   * @deprecated\n   */\n  \"-o-transform-origin\"?: Property.TransformOrigin<TLength> | undefined;\n  /**\n   * The **`transition`** CSS property is a shorthand property for `transition-property`, `transition-duration`, `transition-timing-function`, and `transition-delay`.\n   *\n   * **Syntax**: `<single-transition>#`\n   *\n   * @deprecated\n   */\n  \"-o-transition\"?: Property.Transition<TTime> | undefined;\n  /**\n   * The **`transition-delay`** CSS property specifies the duration to wait before starting a property's transition effect when its value changes.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-transition-delay\"?: Property.TransitionDelay<TTime> | undefined;\n  /**\n   * The **`transition-duration`** CSS property sets the length of time a transition animation should take to complete. By default, the value is `0s`, meaning that no animation will occur.\n   *\n   * **Syntax**: `<time>#`\n   *\n   * **Initial value**: `0s`\n   *\n   * @deprecated\n   */\n  \"-o-transition-duration\"?: Property.TransitionDuration<TTime> | undefined;\n  /**\n   * The **`transition-property`** CSS property sets the CSS properties to which a transition effect should be applied.\n   *\n   * **Syntax**: `none | <single-transition-property>#`\n   *\n   * **Initial value**: all\n   *\n   * @deprecated\n   */\n  \"-o-transition-property\"?: Property.TransitionProperty | undefined;\n  /**\n   * The **`transition-timing-function`** CSS property sets how intermediate values are calculated for CSS properties being affected by a transition effect.\n   *\n   * **Syntax**: `<easing-function>#`\n   *\n   * **Initial value**: `ease`\n   *\n   * @deprecated\n   */\n  \"-o-transition-timing-function\"?: Property.TransitionTimingFunction | undefined;\n  /**\n   * The **`box-align`** CSS property specifies how an element aligns its contents across its layout in a perpendicular direction. The effect of the property is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | baseline | stretch`\n   *\n   * **Initial value**: `stretch`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-align\"?: Property.BoxAlign | undefined;\n  /**\n   * The **`box-direction`** CSS property specifies whether a box lays out its contents normally (from the top or left edge), or in reverse (from the bottom or right edge).\n   *\n   * **Syntax**: `normal | reverse | inherit`\n   *\n   * **Initial value**: `normal`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-direction\"?: Property.BoxDirection | undefined;\n  /**\n   * The **`-moz-box-flex`** and **`-webkit-box-flex`** CSS properties specify how a `-moz-box` or `-webkit-box` grows to fill the box that contains it, in the direction of the containing box's layout.\n   *\n   * **Syntax**: `<number>`\n   *\n   * **Initial value**: `0`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-flex\"?: Property.BoxFlex | undefined;\n  /**\n   * The **`box-flex-group`** CSS property assigns the flexbox's child elements to a flex group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-flex-group\"?: Property.BoxFlexGroup | undefined;\n  /**\n   * The **`box-lines`** CSS property determines whether the box may have a single or multiple lines (rows for horizontally oriented boxes, columns for vertically oriented boxes).\n   *\n   * **Syntax**: `single | multiple`\n   *\n   * **Initial value**: `single`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-lines\"?: Property.BoxLines | undefined;\n  /**\n   * The **`box-ordinal-group`** CSS property assigns the flexbox's child elements to an ordinal group.\n   *\n   * **Syntax**: `<integer>`\n   *\n   * **Initial value**: `1`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-ordinal-group\"?: Property.BoxOrdinalGroup | undefined;\n  /**\n   * The **`box-orient`** CSS property sets whether an element lays out its contents horizontally or vertically.\n   *\n   * **Syntax**: `horizontal | vertical | inline-axis | block-axis | inherit`\n   *\n   * **Initial value**: `inline-axis` (`horizontal` in XUL)\n   *\n   * @deprecated\n   */\n  \"-webkit-box-orient\"?: Property.BoxOrient | undefined;\n  /**\n   * The **`-moz-box-pack`** and **`-webkit-box-pack`** CSS properties specify how a `-moz-box` or `-webkit-box` packs its contents in the direction of its layout. The effect of this is only visible if there is extra space in the box.\n   *\n   * **Syntax**: `start | center | end | justify`\n   *\n   * **Initial value**: `start`\n   *\n   * @deprecated\n   */\n  \"-webkit-box-pack\"?: Property.BoxPack | undefined;\n}\n\nexport interface SvgPropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n  \"alignment-baseline\"?: Property.AlignmentBaseline | undefined;\n  \"baseline-shift\"?: Property.BaselineShift<TLength> | undefined;\n  clip?: Property.Clip | undefined;\n  \"clip-path\"?: Property.ClipPath | undefined;\n  \"clip-rule\"?: Property.ClipRule | undefined;\n  color?: Property.Color | undefined;\n  \"color-interpolation\"?: Property.ColorInterpolation | undefined;\n  \"color-rendering\"?: Property.ColorRendering | undefined;\n  cursor?: Property.Cursor | undefined;\n  direction?: Property.Direction | undefined;\n  display?: Property.Display | undefined;\n  \"dominant-baseline\"?: Property.DominantBaseline | undefined;\n  fill?: Property.Fill | undefined;\n  \"fill-opacity\"?: Property.FillOpacity | undefined;\n  \"fill-rule\"?: Property.FillRule | undefined;\n  filter?: Property.Filter | undefined;\n  \"flood-color\"?: Property.FloodColor | undefined;\n  \"flood-opacity\"?: Property.FloodOpacity | undefined;\n  font?: Property.Font | undefined;\n  \"font-family\"?: Property.FontFamily | undefined;\n  \"font-size\"?: Property.FontSize<TLength> | undefined;\n  \"font-size-adjust\"?: Property.FontSizeAdjust | undefined;\n  \"font-stretch\"?: Property.FontStretch | undefined;\n  \"font-style\"?: Property.FontStyle | undefined;\n  \"font-variant\"?: Property.FontVariant | undefined;\n  \"font-weight\"?: Property.FontWeight | undefined;\n  \"glyph-orientation-vertical\"?: Property.GlyphOrientationVertical | undefined;\n  \"image-rendering\"?: Property.ImageRendering | undefined;\n  \"letter-spacing\"?: Property.LetterSpacing<TLength> | undefined;\n  \"lighting-color\"?: Property.LightingColor | undefined;\n  \"line-height\"?: Property.LineHeight<TLength> | undefined;\n  marker?: Property.Marker | undefined;\n  \"marker-end\"?: Property.MarkerEnd | undefined;\n  \"marker-mid\"?: Property.MarkerMid | undefined;\n  \"marker-start\"?: Property.MarkerStart | undefined;\n  mask?: Property.Mask<TLength> | undefined;\n  opacity?: Property.Opacity | undefined;\n  overflow?: Property.Overflow | undefined;\n  \"paint-order\"?: Property.PaintOrder | undefined;\n  \"pointer-events\"?: Property.PointerEvents | undefined;\n  \"shape-rendering\"?: Property.ShapeRendering | undefined;\n  \"stop-color\"?: Property.StopColor | undefined;\n  \"stop-opacity\"?: Property.StopOpacity | undefined;\n  stroke?: Property.Stroke | undefined;\n  \"stroke-dasharray\"?: Property.StrokeDasharray<TLength> | undefined;\n  \"stroke-dashoffset\"?: Property.StrokeDashoffset<TLength> | undefined;\n  \"stroke-linecap\"?: Property.StrokeLinecap | undefined;\n  \"stroke-linejoin\"?: Property.StrokeLinejoin | undefined;\n  \"stroke-miterlimit\"?: Property.StrokeMiterlimit | undefined;\n  \"stroke-opacity\"?: Property.StrokeOpacity | undefined;\n  \"stroke-width\"?: Property.StrokeWidth<TLength> | undefined;\n  \"text-anchor\"?: Property.TextAnchor | undefined;\n  \"text-decoration\"?: Property.TextDecoration<TLength> | undefined;\n  \"text-rendering\"?: Property.TextRendering | undefined;\n  \"unicode-bidi\"?: Property.UnicodeBidi | undefined;\n  \"vector-effect\"?: Property.VectorEffect | undefined;\n  visibility?: Property.Visibility | undefined;\n  \"white-space\"?: Property.WhiteSpace | undefined;\n  \"word-spacing\"?: Property.WordSpacing<TLength> | undefined;\n  \"writing-mode\"?: Property.WritingMode | undefined;\n}\n\nexport interface PropertiesHyphen<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardPropertiesHyphen<TLength, TTime>,\n    VendorPropertiesHyphen<TLength, TTime>,\n    ObsoletePropertiesHyphen<TLength, TTime>,\n    SvgPropertiesHyphen<TLength, TTime> {}\n\nexport type StandardLonghandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardLonghandProperties<TLength, TTime>>;\n\nexport type StandardShorthandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardShorthandProperties<TLength, TTime>>;\n\nexport interface StandardPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardLonghandPropertiesFallback<TLength, TTime>,\n    StandardShorthandPropertiesFallback<TLength, TTime> {}\n\nexport type VendorLonghandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorLonghandProperties<TLength, TTime>>;\n\nexport type VendorShorthandPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorShorthandProperties<TLength, TTime>>;\n\nexport interface VendorPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends VendorLonghandPropertiesFallback<TLength, TTime>,\n    VendorShorthandPropertiesFallback<TLength, TTime> {}\n\nexport type ObsoletePropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ObsoleteProperties<TLength, TTime>>;\n\nexport type SvgPropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<SvgProperties<TLength, TTime>>;\n\nexport interface PropertiesFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardPropertiesFallback<TLength, TTime>,\n    VendorPropertiesFallback<TLength, TTime>,\n    ObsoletePropertiesFallback<TLength, TTime>,\n    SvgPropertiesFallback<TLength, TTime> {}\n\nexport type StandardLonghandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardLonghandPropertiesHyphen<TLength, TTime>>;\n\nexport type StandardShorthandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<StandardShorthandPropertiesHyphen<TLength, TTime>>;\n\nexport interface StandardPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardLonghandPropertiesHyphenFallback<TLength, TTime>,\n    StandardShorthandPropertiesHyphenFallback<TLength, TTime> {}\n\nexport type VendorLonghandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorLonghandPropertiesHyphen<TLength, TTime>>;\n\nexport type VendorShorthandPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<VendorShorthandPropertiesHyphen<TLength, TTime>>;\n\nexport interface VendorPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends VendorLonghandPropertiesHyphenFallback<TLength, TTime>,\n    VendorShorthandPropertiesHyphenFallback<TLength, TTime> {}\n\nexport type ObsoletePropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ObsoletePropertiesHyphen<TLength, TTime>>;\n\nexport type SvgPropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<SvgPropertiesHyphen<TLength, TTime>>;\n\nexport interface PropertiesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}>\n  extends StandardPropertiesHyphenFallback<TLength, TTime>,\n    VendorPropertiesHyphenFallback<TLength, TTime>,\n    ObsoletePropertiesHyphenFallback<TLength, TTime>,\n    SvgPropertiesHyphenFallback<TLength, TTime> {}\n\nexport type AtRules =\n  | \"@charset\"\n  | \"@counter-style\"\n  | \"@document\"\n  | \"@font-face\"\n  | \"@font-feature-values\"\n  | \"@font-palette-values\"\n  | \"@import\"\n  | \"@keyframes\"\n  | \"@layer\"\n  | \"@media\"\n  | \"@namespace\"\n  | \"@page\"\n  | \"@property\"\n  | \"@scope\"\n  | \"@scroll-timeline\"\n  | \"@starting-style\"\n  | \"@supports\"\n  | \"@viewport\";\n\nexport type AdvancedPseudos =\n  | \":-moz-any()\"\n  | \":-moz-dir\"\n  | \":-webkit-any()\"\n  | \"::cue\"\n  | \"::cue-region\"\n  | \"::part\"\n  | \"::slotted\"\n  | \"::view-transition-group\"\n  | \"::view-transition-image-pair\"\n  | \"::view-transition-new\"\n  | \"::view-transition-old\"\n  | \":dir\"\n  | \":has\"\n  | \":host\"\n  | \":host-context\"\n  | \":is\"\n  | \":lang\"\n  | \":matches()\"\n  | \":not\"\n  | \":nth-child\"\n  | \":nth-last-child\"\n  | \":nth-last-of-type\"\n  | \":nth-of-type\"\n  | \":where\";\n\nexport type SimplePseudos =\n  | \":-khtml-any-link\"\n  | \":-moz-any-link\"\n  | \":-moz-focusring\"\n  | \":-moz-full-screen\"\n  | \":-moz-placeholder\"\n  | \":-moz-read-only\"\n  | \":-moz-read-write\"\n  | \":-moz-ui-invalid\"\n  | \":-moz-ui-valid\"\n  | \":-ms-fullscreen\"\n  | \":-ms-input-placeholder\"\n  | \":-webkit-any-link\"\n  | \":-webkit-full-screen\"\n  | \"::-moz-placeholder\"\n  | \"::-moz-progress-bar\"\n  | \"::-moz-range-progress\"\n  | \"::-moz-range-thumb\"\n  | \"::-moz-range-track\"\n  | \"::-moz-selection\"\n  | \"::-ms-backdrop\"\n  | \"::-ms-browse\"\n  | \"::-ms-check\"\n  | \"::-ms-clear\"\n  | \"::-ms-expand\"\n  | \"::-ms-fill\"\n  | \"::-ms-fill-lower\"\n  | \"::-ms-fill-upper\"\n  | \"::-ms-input-placeholder\"\n  | \"::-ms-reveal\"\n  | \"::-ms-thumb\"\n  | \"::-ms-ticks-after\"\n  | \"::-ms-ticks-before\"\n  | \"::-ms-tooltip\"\n  | \"::-ms-track\"\n  | \"::-ms-value\"\n  | \"::-webkit-backdrop\"\n  | \"::-webkit-input-placeholder\"\n  | \"::-webkit-progress-bar\"\n  | \"::-webkit-progress-inner-value\"\n  | \"::-webkit-progress-value\"\n  | \"::-webkit-slider-runnable-track\"\n  | \"::-webkit-slider-thumb\"\n  | \"::after\"\n  | \"::backdrop\"\n  | \"::before\"\n  | \"::cue\"\n  | \"::cue-region\"\n  | \"::first-letter\"\n  | \"::first-line\"\n  | \"::grammar-error\"\n  | \"::marker\"\n  | \"::placeholder\"\n  | \"::selection\"\n  | \"::spelling-error\"\n  | \"::target-text\"\n  | \"::view-transition\"\n  | \":active\"\n  | \":after\"\n  | \":any-link\"\n  | \":before\"\n  | \":blank\"\n  | \":checked\"\n  | \":current\"\n  | \":default\"\n  | \":defined\"\n  | \":disabled\"\n  | \":empty\"\n  | \":enabled\"\n  | \":first\"\n  | \":first-child\"\n  | \":first-letter\"\n  | \":first-line\"\n  | \":first-of-type\"\n  | \":focus\"\n  | \":focus-visible\"\n  | \":focus-within\"\n  | \":fullscreen\"\n  | \":future\"\n  | \":hover\"\n  | \":in-range\"\n  | \":indeterminate\"\n  | \":invalid\"\n  | \":last-child\"\n  | \":last-of-type\"\n  | \":left\"\n  | \":link\"\n  | \":local-link\"\n  | \":nth-col\"\n  | \":nth-last-col\"\n  | \":only-child\"\n  | \":only-of-type\"\n  | \":optional\"\n  | \":out-of-range\"\n  | \":past\"\n  | \":paused\"\n  | \":picture-in-picture\"\n  | \":placeholder-shown\"\n  | \":playing\"\n  | \":read-only\"\n  | \":read-write\"\n  | \":required\"\n  | \":right\"\n  | \":root\"\n  | \":scope\"\n  | \":target\"\n  | \":target-within\"\n  | \":user-invalid\"\n  | \":user-valid\"\n  | \":valid\"\n  | \":visited\";\n\nexport type Pseudos = AdvancedPseudos | SimplePseudos;\n\nexport type HtmlAttributes =\n  | \"[abbr]\"\n  | \"[accept-charset]\"\n  | \"[accept]\"\n  | \"[accesskey]\"\n  | \"[action]\"\n  | \"[align]\"\n  | \"[alink]\"\n  | \"[allow]\"\n  | \"[allowfullscreen]\"\n  | \"[allowpaymentrequest]\"\n  | \"[alt]\"\n  | \"[archive]\"\n  | \"[async]\"\n  | \"[attributionsrc]\"\n  | \"[autobuffer]\"\n  | \"[autocapitalize]\"\n  | \"[autocomplete]\"\n  | \"[autofocus]\"\n  | \"[autoplay]\"\n  | \"[axis]\"\n  | \"[background]\"\n  | \"[behavior]\"\n  | \"[bgcolor]\"\n  | \"[blocking]\"\n  | \"[border]\"\n  | \"[bottommargin]\"\n  | \"[browsingtopics]\"\n  | \"[capture]\"\n  | \"[cellpadding]\"\n  | \"[cellspacing]\"\n  | \"[char]\"\n  | \"[charoff]\"\n  | \"[charset]\"\n  | \"[checked]\"\n  | \"[cite]\"\n  | \"[class]\"\n  | \"[classid]\"\n  | \"[clear]\"\n  | \"[codebase]\"\n  | \"[codetype]\"\n  | \"[color]\"\n  | \"[cols]\"\n  | \"[colspan]\"\n  | \"[compact]\"\n  | \"[content]\"\n  | \"[contenteditable]\"\n  | \"[contextmenu]\"\n  | \"[controls]\"\n  | \"[coords]\"\n  | \"[credentialless]\"\n  | \"[crossorigin]\"\n  | \"[data]\"\n  | \"[datetime]\"\n  | \"[declare]\"\n  | \"[decoding]\"\n  | \"[default]\"\n  | \"[defer]\"\n  | \"[dir]\"\n  | \"[direction]\"\n  | \"[dirname]\"\n  | \"[disabled]\"\n  | \"[download]\"\n  | \"[draggable]\"\n  | \"[enctype]\"\n  | \"[enterkeyhint]\"\n  | \"[exportparts]\"\n  | \"[face]\"\n  | \"[fetchpriority]\"\n  | \"[for]\"\n  | \"[form]\"\n  | \"[formaction]\"\n  | \"[formenctype]\"\n  | \"[formmethod]\"\n  | \"[formnovalidate]\"\n  | \"[formtarget]\"\n  | \"[frame]\"\n  | \"[frameborder]\"\n  | \"[headers]\"\n  | \"[height]\"\n  | \"[hidden]\"\n  | \"[high]\"\n  | \"[href]\"\n  | \"[hreflang]\"\n  | \"[hspace]\"\n  | \"[http-equiv]\"\n  | \"[id]\"\n  | \"[imagesizes]\"\n  | \"[imagesrcset]\"\n  | \"[inert]\"\n  | \"[inputmode]\"\n  | \"[integrity]\"\n  | \"[is]\"\n  | \"[ismap]\"\n  | \"[itemid]\"\n  | \"[itemprop]\"\n  | \"[itemref]\"\n  | \"[itemscope]\"\n  | \"[itemtype]\"\n  | \"[kind]\"\n  | \"[label]\"\n  | \"[lang]\"\n  | \"[language]\"\n  | \"[leftmargin]\"\n  | \"[link]\"\n  | \"[list]\"\n  | \"[loading]\"\n  | \"[longdesc]\"\n  | \"[loop]\"\n  | \"[low]\"\n  | \"[manifest]\"\n  | \"[marginheight]\"\n  | \"[marginwidth]\"\n  | \"[max]\"\n  | \"[maxlength]\"\n  | \"[media]\"\n  | \"[method]\"\n  | \"[methods]\"\n  | \"[min]\"\n  | \"[minlength]\"\n  | \"[moz-opaque]\"\n  | \"[mozactionhint]\"\n  | \"[mozallowfullscreen]\"\n  | \"[msallowfullscreen]\"\n  | \"[multiple]\"\n  | \"[muted]\"\n  | \"[name]\"\n  | \"[nohref]\"\n  | \"[nomodule]\"\n  | \"[nonce]\"\n  | \"[noresize]\"\n  | \"[noshade]\"\n  | \"[novalidate]\"\n  | \"[nowrap]\"\n  | \"[onerror]\"\n  | \"[open]\"\n  | \"[optimum]\"\n  | \"[part]\"\n  | \"[pattern]\"\n  | \"[ping]\"\n  | \"[placeholder]\"\n  | \"[popover]\"\n  | \"[popovertarget]\"\n  | \"[popovertargetaction]\"\n  | \"[poster]\"\n  | \"[preload]\"\n  | \"[profile]\"\n  | \"[readonly]\"\n  | \"[referrerpolicy]\"\n  | \"[rel]\"\n  | \"[required]\"\n  | \"[rev]\"\n  | \"[reversed]\"\n  | \"[rightmargin]\"\n  | \"[rows]\"\n  | \"[rowspan]\"\n  | \"[rules]\"\n  | \"[sandbox]\"\n  | \"[scope]\"\n  | \"[scrollamount]\"\n  | \"[scrolldelay]\"\n  | \"[scrolling]\"\n  | \"[selected]\"\n  | \"[shadowroot]\"\n  | \"[shadowrootmode]\"\n  | \"[shape]\"\n  | \"[size]\"\n  | \"[sizes]\"\n  | \"[slot]\"\n  | \"[span]\"\n  | \"[spellcheck]\"\n  | \"[src]\"\n  | \"[srcdoc]\"\n  | \"[srclang]\"\n  | \"[srcset]\"\n  | \"[standby]\"\n  | \"[start]\"\n  | \"[step]\"\n  | \"[style]\"\n  | \"[summary]\"\n  | \"[tabindex]\"\n  | \"[target]\"\n  | \"[text]\"\n  | \"[title]\"\n  | \"[topmargin]\"\n  | \"[translate]\"\n  | \"[truespeed]\"\n  | \"[type]\"\n  | \"[usemap]\"\n  | \"[valign]\"\n  | \"[value]\"\n  | \"[valuetype]\"\n  | \"[version]\"\n  | \"[virtualkeyboardpolicy]\"\n  | \"[vlink]\"\n  | \"[vspace]\"\n  | \"[webkitallowfullscreen]\"\n  | \"[width]\"\n  | \"[wrap]\"\n  | \"[x-moz-errormessage]\"\n  | \"[xmlns]\";\n\nexport type SvgAttributes =\n  | \"[accent-height]\"\n  | \"[alignment-baseline]\"\n  | \"[allowReorder]\"\n  | \"[alphabetic]\"\n  | \"[animation]\"\n  | \"[arabic-form]\"\n  | \"[ascent]\"\n  | \"[async]\"\n  | \"[attributeName]\"\n  | \"[attributeType]\"\n  | \"[azimuth]\"\n  | \"[baseFrequency]\"\n  | \"[baseProfile]\"\n  | \"[baseline-shift]\"\n  | \"[bbox]\"\n  | \"[bias]\"\n  | \"[by]\"\n  | \"[calcMode]\"\n  | \"[cap-height]\"\n  | \"[class]\"\n  | \"[clip-path]\"\n  | \"[clip-rule]\"\n  | \"[clipPathUnits]\"\n  | \"[clip]\"\n  | \"[color-interpolation-filters]\"\n  | \"[color-interpolation]\"\n  | \"[color-profile]\"\n  | \"[color]\"\n  | \"[contentScriptType]\"\n  | \"[contentStyleType]\"\n  | \"[crossorigin]\"\n  | \"[cursor]\"\n  | \"[cx]\"\n  | \"[cy]\"\n  | \"[d]\"\n  | \"[decoding]\"\n  | \"[defer]\"\n  | \"[descent]\"\n  | \"[diffuseConstant]\"\n  | \"[direction]\"\n  | \"[display]\"\n  | \"[divisor]\"\n  | \"[document]\"\n  | \"[dominant-baseline]\"\n  | \"[download]\"\n  | \"[dur]\"\n  | \"[dx]\"\n  | \"[dy]\"\n  | \"[edgeMode]\"\n  | \"[elevation]\"\n  | \"[enable-background]\"\n  | \"[fill-opacity]\"\n  | \"[fill-rule]\"\n  | \"[fill]\"\n  | \"[filterRes]\"\n  | \"[filterUnits]\"\n  | \"[filter]\"\n  | \"[flood-color]\"\n  | \"[flood-opacity]\"\n  | \"[font-family]\"\n  | \"[font-size-adjust]\"\n  | \"[font-size]\"\n  | \"[font-stretch]\"\n  | \"[font-style]\"\n  | \"[font-variant]\"\n  | \"[font-weight]\"\n  | \"[format]\"\n  | \"[fr]\"\n  | \"[from]\"\n  | \"[fx]\"\n  | \"[fy]\"\n  | \"[g1]\"\n  | \"[g2]\"\n  | \"[global]\"\n  | \"[glyph-name]\"\n  | \"[glyph-orientation-horizontal]\"\n  | \"[glyph-orientation-vertical]\"\n  | \"[glyphRef]\"\n  | \"[gradientTransform]\"\n  | \"[gradientUnits]\"\n  | \"[graphical]\"\n  | \"[hanging]\"\n  | \"[height]\"\n  | \"[horiz-adv-x]\"\n  | \"[horiz-origin-x]\"\n  | \"[horiz-origin-y]\"\n  | \"[href]\"\n  | \"[hreflang]\"\n  | \"[id]\"\n  | \"[ideographic]\"\n  | \"[image-rendering]\"\n  | \"[in2]\"\n  | \"[in]\"\n  | \"[k1]\"\n  | \"[k2]\"\n  | \"[k3]\"\n  | \"[k4]\"\n  | \"[k]\"\n  | \"[kernelMatrix]\"\n  | \"[kernelUnitLength]\"\n  | \"[kerning]\"\n  | \"[keyPoints]\"\n  | \"[lang]\"\n  | \"[lengthAdjust]\"\n  | \"[letter-spacing]\"\n  | \"[lighting-color]\"\n  | \"[limitingConeAngle]\"\n  | \"[marker-end]\"\n  | \"[marker-mid]\"\n  | \"[marker-start]\"\n  | \"[markerHeight]\"\n  | \"[markerUnits]\"\n  | \"[markerWidth]\"\n  | \"[maskContentUnits]\"\n  | \"[maskUnits]\"\n  | \"[mask]\"\n  | \"[mathematical]\"\n  | \"[media]\"\n  | \"[mode]\"\n  | \"[name]\"\n  | \"[numOctaves]\"\n  | \"[offset]\"\n  | \"[opacity]\"\n  | \"[operator]\"\n  | \"[order]\"\n  | \"[orient]\"\n  | \"[orientation]\"\n  | \"[origin]\"\n  | \"[overflow]\"\n  | \"[overline-position]\"\n  | \"[overline-thickness]\"\n  | \"[paint-order]\"\n  | \"[panose-1]\"\n  | \"[path]\"\n  | \"[patternContentUnits]\"\n  | \"[patternTransform]\"\n  | \"[patternUnits]\"\n  | \"[ping]\"\n  | \"[pointer-events]\"\n  | \"[pointsAtX]\"\n  | \"[pointsAtY]\"\n  | \"[pointsAtZ]\"\n  | \"[points]\"\n  | \"[preserveAlpha]\"\n  | \"[preserveAspectRatio]\"\n  | \"[primitiveUnits]\"\n  | \"[r]\"\n  | \"[radius]\"\n  | \"[refX]\"\n  | \"[refY]\"\n  | \"[referrerpolicy]\"\n  | \"[rel]\"\n  | \"[repeatCount]\"\n  | \"[requiredExtensions]\"\n  | \"[requiredFeatures]\"\n  | \"[rotate]\"\n  | \"[rx]\"\n  | \"[ry]\"\n  | \"[scale]\"\n  | \"[seed]\"\n  | \"[shape-rendering]\"\n  | \"[side]\"\n  | \"[slope]\"\n  | \"[solid-color]\"\n  | \"[solid-opacity]\"\n  | \"[spacing]\"\n  | \"[specularConstant]\"\n  | \"[specularExponent]\"\n  | \"[spreadMethod]\"\n  | \"[startOffset]\"\n  | \"[stdDeviation]\"\n  | \"[stemh]\"\n  | \"[stemv]\"\n  | \"[stitchTiles]\"\n  | \"[stop-color]\"\n  | \"[stop-opacity]\"\n  | \"[strikethrough-position]\"\n  | \"[strikethrough-thickness]\"\n  | \"[string]\"\n  | \"[stroke-dasharray]\"\n  | \"[stroke-dashoffset]\"\n  | \"[stroke-linecap]\"\n  | \"[stroke-linejoin]\"\n  | \"[stroke-miterlimit]\"\n  | \"[stroke-opacity]\"\n  | \"[stroke-width]\"\n  | \"[stroke]\"\n  | \"[style]\"\n  | \"[surfaceScale]\"\n  | \"[systemLanguage]\"\n  | \"[tabindex]\"\n  | \"[targetX]\"\n  | \"[targetY]\"\n  | \"[target]\"\n  | \"[text-anchor]\"\n  | \"[text-decoration]\"\n  | \"[text-overflow]\"\n  | \"[text-rendering]\"\n  | \"[textLength]\"\n  | \"[title]\"\n  | \"[to]\"\n  | \"[transform-origin]\"\n  | \"[transform]\"\n  | \"[type]\"\n  | \"[u1]\"\n  | \"[u2]\"\n  | \"[underline-position]\"\n  | \"[underline-thickness]\"\n  | \"[unicode-bidi]\"\n  | \"[unicode-range]\"\n  | \"[unicode]\"\n  | \"[units-per-em]\"\n  | \"[v-alphabetic]\"\n  | \"[v-hanging]\"\n  | \"[v-ideographic]\"\n  | \"[v-mathematical]\"\n  | \"[values]\"\n  | \"[vector-effect]\"\n  | \"[version]\"\n  | \"[vert-adv-y]\"\n  | \"[vert-origin-x]\"\n  | \"[vert-origin-y]\"\n  | \"[viewBox]\"\n  | \"[viewTarget]\"\n  | \"[visibility]\"\n  | \"[white-space]\"\n  | \"[width]\"\n  | \"[widths]\"\n  | \"[word-spacing]\"\n  | \"[writing-mode]\"\n  | \"[x-height]\"\n  | \"[x1]\"\n  | \"[x2]\"\n  | \"[xChannelSelector]\"\n  | \"[x]\"\n  | \"[y1]\"\n  | \"[y2]\"\n  | \"[yChannelSelector]\"\n  | \"[y]\"\n  | \"[z]\"\n  | \"[zoomAndPan]\";\n\nexport type Globals = \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\";\n\nexport namespace Property {\n  export type AccentColor = Globals | DataType.Color | \"auto\";\n\n  export type AlignContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"baseline\" | \"normal\" | (string & {});\n\n  export type AlignItems = Globals | DataType.SelfPosition | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n\n  export type AlignSelf = Globals | DataType.SelfPosition | \"auto\" | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n\n  export type AlignTracks = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"baseline\" | \"normal\" | (string & {});\n\n  export type All = Globals;\n\n  export type Animation<TTime = string & {}> = Globals | DataType.SingleAnimation<TTime> | (string & {});\n\n  export type AnimationComposition = Globals | DataType.SingleAnimationComposition | (string & {});\n\n  export type AnimationDelay<TTime = string & {}> = Globals | TTime | (string & {});\n\n  export type AnimationDirection = Globals | DataType.SingleAnimationDirection | (string & {});\n\n  export type AnimationDuration<TTime = string & {}> = Globals | TTime | (string & {});\n\n  export type AnimationFillMode = Globals | DataType.SingleAnimationFillMode | (string & {});\n\n  export type AnimationIterationCount = Globals | \"infinite\" | (string & {}) | (number & {});\n\n  export type AnimationName = Globals | \"none\" | (string & {});\n\n  export type AnimationPlayState = Globals | \"paused\" | \"running\" | (string & {});\n\n  export type AnimationRange<TLength = (string & {}) | 0> = Globals | DataType.TimelineRangeName | TLength | \"normal\" | (string & {});\n\n  export type AnimationRangeEnd<TLength = (string & {}) | 0> = Globals | DataType.TimelineRangeName | TLength | \"normal\" | (string & {});\n\n  export type AnimationRangeStart<TLength = (string & {}) | 0> = Globals | DataType.TimelineRangeName | TLength | \"normal\" | (string & {});\n\n  export type AnimationTimeline = Globals | DataType.SingleAnimationTimeline | (string & {});\n\n  export type AnimationTimingFunction = Globals | DataType.EasingFunction | (string & {});\n\n  export type Appearance = Globals | DataType.CompatAuto | \"auto\" | \"menulist-button\" | \"none\" | \"textfield\";\n\n  export type AspectRatio = Globals | \"auto\" | (string & {}) | (number & {});\n\n  export type Azimuth =\n    | Globals\n    | \"behind\"\n    | \"center\"\n    | \"center-left\"\n    | \"center-right\"\n    | \"far-left\"\n    | \"far-right\"\n    | \"left\"\n    | \"left-side\"\n    | \"leftwards\"\n    | \"right\"\n    | \"right-side\"\n    | \"rightwards\"\n    | (string & {});\n\n  export type BackdropFilter = Globals | \"none\" | (string & {});\n\n  export type BackfaceVisibility = Globals | \"hidden\" | \"visible\";\n\n  export type Background<TLength = (string & {}) | 0> = Globals | DataType.FinalBgLayer<TLength> | (string & {});\n\n  export type BackgroundAttachment = Globals | DataType.Attachment | (string & {});\n\n  export type BackgroundBlendMode = Globals | DataType.BlendMode | (string & {});\n\n  export type BackgroundClip = Globals | DataType.Box | (string & {});\n\n  export type BackgroundColor = Globals | DataType.Color;\n\n  export type BackgroundImage = Globals | \"none\" | (string & {});\n\n  export type BackgroundOrigin = Globals | DataType.Box | (string & {});\n\n  export type BackgroundPosition<TLength = (string & {}) | 0> = Globals | DataType.BgPosition<TLength> | (string & {});\n\n  export type BackgroundPositionX<TLength = (string & {}) | 0> = Globals | TLength | \"center\" | \"left\" | \"right\" | \"x-end\" | \"x-start\" | (string & {});\n\n  export type BackgroundPositionY<TLength = (string & {}) | 0> = Globals | TLength | \"bottom\" | \"center\" | \"top\" | \"y-end\" | \"y-start\" | (string & {});\n\n  export type BackgroundRepeat = Globals | DataType.RepeatStyle | (string & {});\n\n  export type BackgroundSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});\n\n  export type BlockOverflow = Globals | \"clip\" | \"ellipsis\" | (string & {});\n\n  export type BlockSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type Border<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBlock<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBlockColor = Globals | DataType.Color | (string & {});\n\n  export type BorderBlockEnd<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBlockEndColor = Globals | DataType.Color;\n\n  export type BorderBlockEndStyle = Globals | DataType.LineStyle;\n\n  export type BorderBlockEndWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderBlockStart<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBlockStartColor = Globals | DataType.Color;\n\n  export type BorderBlockStartStyle = Globals | DataType.LineStyle;\n\n  export type BorderBlockStartWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderBlockStyle = Globals | DataType.LineStyle;\n\n  export type BorderBlockWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderBottom<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderBottomColor = Globals | DataType.Color;\n\n  export type BorderBottomLeftRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderBottomRightRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderBottomStyle = Globals | DataType.LineStyle;\n\n  export type BorderBottomWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderCollapse = Globals | \"collapse\" | \"separate\";\n\n  export type BorderColor = Globals | DataType.Color | (string & {});\n\n  export type BorderEndEndRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderEndStartRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderImage = Globals | \"none\" | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {}) | (number & {});\n\n  export type BorderImageOutset<TLength = (string & {}) | 0> = Globals | TLength | (string & {}) | (number & {});\n\n  export type BorderImageRepeat = Globals | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {});\n\n  export type BorderImageSlice = Globals | (string & {}) | (number & {});\n\n  export type BorderImageSource = Globals | \"none\" | (string & {});\n\n  export type BorderImageWidth<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {}) | (number & {});\n\n  export type BorderInline<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderInlineColor = Globals | DataType.Color | (string & {});\n\n  export type BorderInlineEnd<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderInlineEndColor = Globals | DataType.Color;\n\n  export type BorderInlineEndStyle = Globals | DataType.LineStyle;\n\n  export type BorderInlineEndWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderInlineStart<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderInlineStartColor = Globals | DataType.Color;\n\n  export type BorderInlineStartStyle = Globals | DataType.LineStyle;\n\n  export type BorderInlineStartWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderInlineStyle = Globals | DataType.LineStyle;\n\n  export type BorderInlineWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderLeft<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderLeftColor = Globals | DataType.Color;\n\n  export type BorderLeftStyle = Globals | DataType.LineStyle;\n\n  export type BorderLeftWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderRight<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderRightColor = Globals | DataType.Color;\n\n  export type BorderRightStyle = Globals | DataType.LineStyle;\n\n  export type BorderRightWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderSpacing<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderStartEndRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderStartStartRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderStyle = Globals | DataType.LineStyle | (string & {});\n\n  export type BorderTop<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type BorderTopColor = Globals | DataType.Color;\n\n  export type BorderTopLeftRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderTopRightRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type BorderTopStyle = Globals | DataType.LineStyle;\n\n  export type BorderTopWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type BorderWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});\n\n  export type Bottom<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type BoxAlign = Globals | \"baseline\" | \"center\" | \"end\" | \"start\" | \"stretch\";\n\n  export type BoxDecorationBreak = Globals | \"clone\" | \"slice\";\n\n  export type BoxDirection = Globals | \"inherit\" | \"normal\" | \"reverse\";\n\n  export type BoxFlex = Globals | (number & {}) | (string & {});\n\n  export type BoxFlexGroup = Globals | (number & {}) | (string & {});\n\n  export type BoxLines = Globals | \"multiple\" | \"single\";\n\n  export type BoxOrdinalGroup = Globals | (number & {}) | (string & {});\n\n  export type BoxOrient = Globals | \"block-axis\" | \"horizontal\" | \"inherit\" | \"inline-axis\" | \"vertical\";\n\n  export type BoxPack = Globals | \"center\" | \"end\" | \"justify\" | \"start\";\n\n  export type BoxShadow = Globals | \"none\" | (string & {});\n\n  export type BoxSizing = Globals | \"border-box\" | \"content-box\";\n\n  export type BreakAfter =\n    | Globals\n    | \"all\"\n    | \"always\"\n    | \"auto\"\n    | \"avoid\"\n    | \"avoid-column\"\n    | \"avoid-page\"\n    | \"avoid-region\"\n    | \"column\"\n    | \"left\"\n    | \"page\"\n    | \"recto\"\n    | \"region\"\n    | \"right\"\n    | \"verso\";\n\n  export type BreakBefore =\n    | Globals\n    | \"all\"\n    | \"always\"\n    | \"auto\"\n    | \"avoid\"\n    | \"avoid-column\"\n    | \"avoid-page\"\n    | \"avoid-region\"\n    | \"column\"\n    | \"left\"\n    | \"page\"\n    | \"recto\"\n    | \"region\"\n    | \"right\"\n    | \"verso\";\n\n  export type BreakInside = Globals | \"auto\" | \"avoid\" | \"avoid-column\" | \"avoid-page\" | \"avoid-region\";\n\n  export type CaptionSide = Globals | \"block-end\" | \"block-start\" | \"bottom\" | \"inline-end\" | \"inline-start\" | \"top\";\n\n  export type Caret = Globals | DataType.Color | \"auto\" | \"bar\" | \"block\" | \"underscore\" | (string & {});\n\n  export type CaretColor = Globals | DataType.Color | \"auto\";\n\n  export type CaretShape = Globals | \"auto\" | \"bar\" | \"block\" | \"underscore\";\n\n  export type Clear = Globals | \"both\" | \"inline-end\" | \"inline-start\" | \"left\" | \"none\" | \"right\";\n\n  export type Clip = Globals | \"auto\" | (string & {});\n\n  export type ClipPath = Globals | DataType.GeometryBox | \"none\" | (string & {});\n\n  export type Color = Globals | DataType.Color;\n\n  export type PrintColorAdjust = Globals | \"economy\" | \"exact\";\n\n  export type ColorScheme = Globals | \"dark\" | \"light\" | \"normal\" | (string & {});\n\n  export type ColumnCount = Globals | \"auto\" | (number & {}) | (string & {});\n\n  export type ColumnFill = Globals | \"auto\" | \"balance\" | \"balance-all\";\n\n  export type ColumnGap<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {});\n\n  export type ColumnRule<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type ColumnRuleColor = Globals | DataType.Color;\n\n  export type ColumnRuleStyle = Globals | DataType.LineStyle | (string & {});\n\n  export type ColumnRuleWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});\n\n  export type ColumnSpan = Globals | \"all\" | \"none\";\n\n  export type ColumnWidth<TLength = (string & {}) | 0> = Globals | TLength | \"auto\";\n\n  export type Columns<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {}) | (number & {});\n\n  export type Contain = Globals | \"content\" | \"inline-size\" | \"layout\" | \"none\" | \"paint\" | \"size\" | \"strict\" | \"style\" | (string & {});\n\n  export type ContainIntrinsicBlockSize<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type ContainIntrinsicHeight<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type ContainIntrinsicInlineSize<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type ContainIntrinsicSize<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type ContainIntrinsicWidth<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type Container = Globals | \"none\" | (string & {});\n\n  export type ContainerName = Globals | \"none\" | (string & {});\n\n  export type ContainerType = Globals | \"inline-size\" | \"normal\" | \"size\";\n\n  export type Content = Globals | DataType.ContentList | \"none\" | \"normal\" | (string & {});\n\n  export type ContentVisibility = Globals | \"auto\" | \"hidden\" | \"visible\";\n\n  export type CounterIncrement = Globals | \"none\" | (string & {});\n\n  export type CounterReset = Globals | \"none\" | (string & {});\n\n  export type CounterSet = Globals | \"none\" | (string & {});\n\n  export type Cursor =\n    | Globals\n    | \"-moz-grab\"\n    | \"-webkit-grab\"\n    | \"alias\"\n    | \"all-scroll\"\n    | \"auto\"\n    | \"cell\"\n    | \"col-resize\"\n    | \"context-menu\"\n    | \"copy\"\n    | \"crosshair\"\n    | \"default\"\n    | \"e-resize\"\n    | \"ew-resize\"\n    | \"grab\"\n    | \"grabbing\"\n    | \"help\"\n    | \"move\"\n    | \"n-resize\"\n    | \"ne-resize\"\n    | \"nesw-resize\"\n    | \"no-drop\"\n    | \"none\"\n    | \"not-allowed\"\n    | \"ns-resize\"\n    | \"nw-resize\"\n    | \"nwse-resize\"\n    | \"pointer\"\n    | \"progress\"\n    | \"row-resize\"\n    | \"s-resize\"\n    | \"se-resize\"\n    | \"sw-resize\"\n    | \"text\"\n    | \"vertical-text\"\n    | \"w-resize\"\n    | \"wait\"\n    | \"zoom-in\"\n    | \"zoom-out\"\n    | (string & {});\n\n  export type Direction = Globals | \"ltr\" | \"rtl\";\n\n  export type Display =\n    | Globals\n    | DataType.DisplayOutside\n    | DataType.DisplayInside\n    | DataType.DisplayInternal\n    | DataType.DisplayLegacy\n    | \"contents\"\n    | \"list-item\"\n    | \"none\"\n    | (string & {});\n\n  export type EmptyCells = Globals | \"hide\" | \"show\";\n\n  export type Filter = Globals | \"none\" | (string & {});\n\n  export type Flex<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | \"content\" | \"fit-content\" | \"max-content\" | \"min-content\" | \"none\" | (string & {}) | (number & {});\n\n  export type FlexBasis<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-auto\"\n    | \"auto\"\n    | \"content\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type FlexDirection = Globals | \"column\" | \"column-reverse\" | \"row\" | \"row-reverse\";\n\n  export type FlexFlow = Globals | \"column\" | \"column-reverse\" | \"nowrap\" | \"row\" | \"row-reverse\" | \"wrap\" | \"wrap-reverse\" | (string & {});\n\n  export type FlexGrow = Globals | (number & {}) | (string & {});\n\n  export type FlexShrink = Globals | (number & {}) | (string & {});\n\n  export type FlexWrap = Globals | \"nowrap\" | \"wrap\" | \"wrap-reverse\";\n\n  export type Float = Globals | \"inline-end\" | \"inline-start\" | \"left\" | \"none\" | \"right\";\n\n  export type Font = Globals | \"caption\" | \"icon\" | \"menu\" | \"message-box\" | \"small-caption\" | \"status-bar\" | (string & {});\n\n  export type FontFamily = Globals | DataType.GenericFamily | (string & {});\n\n  export type FontFeatureSettings = Globals | \"normal\" | (string & {});\n\n  export type FontKerning = Globals | \"auto\" | \"none\" | \"normal\";\n\n  export type FontLanguageOverride = Globals | \"normal\" | (string & {});\n\n  export type FontOpticalSizing = Globals | \"auto\" | \"none\";\n\n  export type FontPalette = Globals | \"dark\" | \"light\" | \"normal\" | (string & {});\n\n  export type FontSize<TLength = (string & {}) | 0> = Globals | DataType.AbsoluteSize | TLength | \"larger\" | \"smaller\" | (string & {});\n\n  export type FontSizeAdjust = Globals | \"from-font\" | \"none\" | (string & {}) | (number & {});\n\n  export type FontSmooth<TLength = (string & {}) | 0> = Globals | DataType.AbsoluteSize | TLength | \"always\" | \"auto\" | \"never\";\n\n  export type FontStretch = Globals | DataType.FontStretchAbsolute;\n\n  export type FontStyle = Globals | \"italic\" | \"normal\" | \"oblique\" | (string & {});\n\n  export type FontSynthesis = Globals | \"none\" | \"position\" | \"small-caps\" | \"style\" | \"weight\" | (string & {});\n\n  export type FontSynthesisPosition = Globals | \"auto\" | \"none\";\n\n  export type FontSynthesisSmallCaps = Globals | \"auto\" | \"none\";\n\n  export type FontSynthesisStyle = Globals | \"auto\" | \"none\";\n\n  export type FontSynthesisWeight = Globals | \"auto\" | \"none\";\n\n  export type FontVariant =\n    | Globals\n    | DataType.EastAsianVariantValues\n    | \"all-petite-caps\"\n    | \"all-small-caps\"\n    | \"common-ligatures\"\n    | \"contextual\"\n    | \"diagonal-fractions\"\n    | \"discretionary-ligatures\"\n    | \"full-width\"\n    | \"historical-forms\"\n    | \"historical-ligatures\"\n    | \"lining-nums\"\n    | \"no-common-ligatures\"\n    | \"no-contextual\"\n    | \"no-discretionary-ligatures\"\n    | \"no-historical-ligatures\"\n    | \"none\"\n    | \"normal\"\n    | \"oldstyle-nums\"\n    | \"ordinal\"\n    | \"petite-caps\"\n    | \"proportional-nums\"\n    | \"proportional-width\"\n    | \"ruby\"\n    | \"slashed-zero\"\n    | \"small-caps\"\n    | \"stacked-fractions\"\n    | \"tabular-nums\"\n    | \"titling-caps\"\n    | \"unicase\"\n    | (string & {});\n\n  export type FontVariantAlternates = Globals | \"historical-forms\" | \"normal\" | (string & {});\n\n  export type FontVariantCaps = Globals | \"all-petite-caps\" | \"all-small-caps\" | \"normal\" | \"petite-caps\" | \"small-caps\" | \"titling-caps\" | \"unicase\";\n\n  export type FontVariantEastAsian = Globals | DataType.EastAsianVariantValues | \"full-width\" | \"normal\" | \"proportional-width\" | \"ruby\" | (string & {});\n\n  export type FontVariantEmoji = Globals | \"emoji\" | \"normal\" | \"text\" | \"unicode\";\n\n  export type FontVariantLigatures =\n    | Globals\n    | \"common-ligatures\"\n    | \"contextual\"\n    | \"discretionary-ligatures\"\n    | \"historical-ligatures\"\n    | \"no-common-ligatures\"\n    | \"no-contextual\"\n    | \"no-discretionary-ligatures\"\n    | \"no-historical-ligatures\"\n    | \"none\"\n    | \"normal\"\n    | (string & {});\n\n  export type FontVariantNumeric =\n    | Globals\n    | \"diagonal-fractions\"\n    | \"lining-nums\"\n    | \"normal\"\n    | \"oldstyle-nums\"\n    | \"ordinal\"\n    | \"proportional-nums\"\n    | \"slashed-zero\"\n    | \"stacked-fractions\"\n    | \"tabular-nums\"\n    | (string & {});\n\n  export type FontVariantPosition = Globals | \"normal\" | \"sub\" | \"super\";\n\n  export type FontVariationSettings = Globals | \"normal\" | (string & {});\n\n  export type FontWeight = Globals | DataType.FontWeightAbsolute | \"bolder\" | \"lighter\";\n\n  export type ForcedColorAdjust = Globals | \"auto\" | \"none\";\n\n  export type Gap<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {});\n\n  export type Grid = Globals | \"none\" | (string & {});\n\n  export type GridArea = Globals | DataType.GridLine | (string & {});\n\n  export type GridAutoColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | (string & {});\n\n  export type GridAutoFlow = Globals | \"column\" | \"dense\" | \"row\" | (string & {});\n\n  export type GridAutoRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | (string & {});\n\n  export type GridColumn = Globals | DataType.GridLine | (string & {});\n\n  export type GridColumnEnd = Globals | DataType.GridLine;\n\n  export type GridColumnGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type GridColumnStart = Globals | DataType.GridLine;\n\n  export type GridGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type GridRow = Globals | DataType.GridLine | (string & {});\n\n  export type GridRowEnd = Globals | DataType.GridLine;\n\n  export type GridRowGap<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type GridRowStart = Globals | DataType.GridLine;\n\n  export type GridTemplate = Globals | \"none\" | (string & {});\n\n  export type GridTemplateAreas = Globals | \"none\" | (string & {});\n\n  export type GridTemplateColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | \"subgrid\" | (string & {});\n\n  export type GridTemplateRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | \"subgrid\" | (string & {});\n\n  export type HangingPunctuation = Globals | \"allow-end\" | \"first\" | \"force-end\" | \"last\" | \"none\" | (string & {});\n\n  export type Height<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type HyphenateCharacter = Globals | \"auto\" | (string & {});\n\n  export type HyphenateLimitChars = Globals | \"auto\" | (string & {}) | (number & {});\n\n  export type Hyphens = Globals | \"auto\" | \"manual\" | \"none\";\n\n  export type ImageOrientation = Globals | \"flip\" | \"from-image\" | (string & {});\n\n  export type ImageRendering = Globals | \"-moz-crisp-edges\" | \"-webkit-optimize-contrast\" | \"auto\" | \"crisp-edges\" | \"pixelated\";\n\n  export type ImageResolution = Globals | \"from-image\" | (string & {});\n\n  export type ImeMode = Globals | \"active\" | \"auto\" | \"disabled\" | \"inactive\" | \"normal\";\n\n  export type InitialLetter = Globals | \"normal\" | (string & {}) | (number & {});\n\n  export type InlineSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type InputSecurity = Globals | \"auto\" | \"none\";\n\n  export type Inset<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetBlock<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetBlockStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetInline<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type InsetInlineStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type Isolation = Globals | \"auto\" | \"isolate\";\n\n  export type JustifyContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"left\" | \"normal\" | \"right\" | (string & {});\n\n  export type JustifyItems = Globals | DataType.SelfPosition | \"baseline\" | \"left\" | \"legacy\" | \"normal\" | \"right\" | \"stretch\" | (string & {});\n\n  export type JustifySelf = Globals | DataType.SelfPosition | \"auto\" | \"baseline\" | \"left\" | \"normal\" | \"right\" | \"stretch\" | (string & {});\n\n  export type JustifyTracks = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"left\" | \"normal\" | \"right\" | (string & {});\n\n  export type Left<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type LetterSpacing<TLength = (string & {}) | 0> = Globals | TLength | \"normal\";\n\n  export type LineBreak = Globals | \"anywhere\" | \"auto\" | \"loose\" | \"normal\" | \"strict\";\n\n  export type LineClamp = Globals | \"none\" | (number & {}) | (string & {});\n\n  export type LineHeight<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {}) | (number & {});\n\n  export type LineHeightStep<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ListStyle = Globals | \"inside\" | \"none\" | \"outside\" | (string & {});\n\n  export type ListStyleImage = Globals | \"none\" | (string & {});\n\n  export type ListStylePosition = Globals | \"inside\" | \"outside\";\n\n  export type ListStyleType = Globals | \"none\" | (string & {});\n\n  export type Margin<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginBlock<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginBlockStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginBottom<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginInline<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginInlineStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginLeft<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginRight<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginTop<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type MarginTrim = Globals | \"all\" | \"in-flow\" | \"none\";\n\n  export type Mask<TLength = (string & {}) | 0> = Globals | DataType.MaskLayer<TLength> | (string & {});\n\n  export type MaskBorder = Globals | \"alpha\" | \"luminance\" | \"none\" | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {}) | (number & {});\n\n  export type MaskBorderMode = Globals | \"alpha\" | \"luminance\";\n\n  export type MaskBorderOutset<TLength = (string & {}) | 0> = Globals | TLength | (string & {}) | (number & {});\n\n  export type MaskBorderRepeat = Globals | \"repeat\" | \"round\" | \"space\" | \"stretch\" | (string & {});\n\n  export type MaskBorderSlice = Globals | (string & {}) | (number & {});\n\n  export type MaskBorderSource = Globals | \"none\" | (string & {});\n\n  export type MaskBorderWidth<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {}) | (number & {});\n\n  export type MaskClip = Globals | DataType.GeometryBox | \"no-clip\" | (string & {});\n\n  export type MaskComposite = Globals | DataType.CompositingOperator | (string & {});\n\n  export type MaskImage = Globals | \"none\" | (string & {});\n\n  export type MaskMode = Globals | DataType.MaskingMode | (string & {});\n\n  export type MaskOrigin = Globals | DataType.GeometryBox | (string & {});\n\n  export type MaskPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | (string & {});\n\n  export type MaskRepeat = Globals | DataType.RepeatStyle | (string & {});\n\n  export type MaskSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});\n\n  export type MaskType = Globals | \"alpha\" | \"luminance\";\n\n  export type MasonryAutoFlow = Globals | \"definite-first\" | \"next\" | \"ordered\" | \"pack\" | (string & {});\n\n  export type MathDepth = Globals | \"auto-add\" | (string & {}) | (number & {});\n\n  export type MathShift = Globals | \"compact\" | \"normal\";\n\n  export type MathStyle = Globals | \"compact\" | \"normal\";\n\n  export type MaxBlockSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"none\"\n    | (string & {});\n\n  export type MaxHeight<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"-webkit-min-content\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"none\"\n    | (string & {});\n\n  export type MaxInlineSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"none\"\n    | (string & {});\n\n  export type MaxLines = Globals | \"none\" | (number & {}) | (string & {});\n\n  export type MaxWidth<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"-webkit-min-content\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"none\"\n    | (string & {});\n\n  export type MinBlockSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type MinHeight<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"-webkit-min-content\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type MinInlineSize<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"max-content\"\n    | \"min-content\"\n    | (string & {});\n\n  export type MinWidth<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fill-available\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"-webkit-min-content\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"min-intrinsic\"\n    | (string & {});\n\n  export type MixBlendMode = Globals | DataType.BlendMode | \"plus-lighter\";\n\n  export type Offset<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | \"auto\" | \"none\" | \"normal\" | (string & {});\n\n  export type OffsetDistance<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type OffsetPath = Globals | \"none\" | (string & {});\n\n  export type OffsetRotate = Globals | \"auto\" | \"reverse\" | (string & {});\n\n  export type ObjectFit = Globals | \"contain\" | \"cover\" | \"fill\" | \"none\" | \"scale-down\";\n\n  export type ObjectPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;\n\n  export type OffsetAnchor<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | \"auto\";\n\n  export type OffsetPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | \"auto\" | \"normal\";\n\n  export type Opacity = Globals | (string & {}) | (number & {});\n\n  export type Order = Globals | (number & {}) | (string & {});\n\n  export type Orphans = Globals | (number & {}) | (string & {});\n\n  export type Outline<TLength = (string & {}) | 0> = Globals | DataType.Color | DataType.LineStyle | DataType.LineWidth<TLength> | \"auto\" | \"invert\" | (string & {});\n\n  export type OutlineColor = Globals | DataType.Color | \"invert\";\n\n  export type OutlineOffset<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type OutlineStyle = Globals | DataType.LineStyle | \"auto\" | (string & {});\n\n  export type OutlineWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength>;\n\n  export type Overflow = Globals | \"-moz-hidden-unscrollable\" | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\" | (string & {});\n\n  export type OverflowAnchor = Globals | \"auto\" | \"none\";\n\n  export type OverflowBlock = Globals | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n\n  export type OverflowClipBox = Globals | \"content-box\" | \"padding-box\";\n\n  export type OverflowClipMargin<TLength = (string & {}) | 0> = Globals | DataType.VisualBox | TLength | (string & {});\n\n  export type OverflowInline = Globals | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n\n  export type OverflowWrap = Globals | \"anywhere\" | \"break-word\" | \"normal\";\n\n  export type OverflowX = Globals | \"-moz-hidden-unscrollable\" | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n\n  export type OverflowY = Globals | \"-moz-hidden-unscrollable\" | \"auto\" | \"clip\" | \"hidden\" | \"scroll\" | \"visible\";\n\n  export type Overlay = Globals | \"auto\" | \"none\";\n\n  export type OverscrollBehavior = Globals | \"auto\" | \"contain\" | \"none\" | (string & {});\n\n  export type OverscrollBehaviorBlock = Globals | \"auto\" | \"contain\" | \"none\";\n\n  export type OverscrollBehaviorInline = Globals | \"auto\" | \"contain\" | \"none\";\n\n  export type OverscrollBehaviorX = Globals | \"auto\" | \"contain\" | \"none\";\n\n  export type OverscrollBehaviorY = Globals | \"auto\" | \"contain\" | \"none\";\n\n  export type Padding<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingBlock<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingBlockStart<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingBottom<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingInline<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingInlineStart<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingLeft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingRight<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type PaddingTop<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type Page = Globals | \"auto\" | (string & {});\n\n  export type PageBreakAfter = Globals | \"always\" | \"auto\" | \"avoid\" | \"left\" | \"recto\" | \"right\" | \"verso\";\n\n  export type PageBreakBefore = Globals | \"always\" | \"auto\" | \"avoid\" | \"left\" | \"recto\" | \"right\" | \"verso\";\n\n  export type PageBreakInside = Globals | \"auto\" | \"avoid\";\n\n  export type PaintOrder = Globals | \"fill\" | \"markers\" | \"normal\" | \"stroke\" | (string & {});\n\n  export type Perspective<TLength = (string & {}) | 0> = Globals | TLength | \"none\";\n\n  export type PerspectiveOrigin<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;\n\n  export type PlaceContent = Globals | DataType.ContentDistribution | DataType.ContentPosition | \"baseline\" | \"normal\" | (string & {});\n\n  export type PlaceItems = Globals | DataType.SelfPosition | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n\n  export type PlaceSelf = Globals | DataType.SelfPosition | \"auto\" | \"baseline\" | \"normal\" | \"stretch\" | (string & {});\n\n  export type PointerEvents = Globals | \"all\" | \"auto\" | \"fill\" | \"inherit\" | \"none\" | \"painted\" | \"stroke\" | \"visible\" | \"visibleFill\" | \"visiblePainted\" | \"visibleStroke\";\n\n  export type Position = Globals | \"-webkit-sticky\" | \"absolute\" | \"fixed\" | \"relative\" | \"static\" | \"sticky\";\n\n  export type Quotes = Globals | \"auto\" | \"none\" | (string & {});\n\n  export type Resize = Globals | \"block\" | \"both\" | \"horizontal\" | \"inline\" | \"none\" | \"vertical\";\n\n  export type Right<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type Rotate = Globals | \"none\" | (string & {});\n\n  export type RowGap<TLength = (string & {}) | 0> = Globals | TLength | \"normal\" | (string & {});\n\n  export type RubyAlign = Globals | \"center\" | \"space-around\" | \"space-between\" | \"start\";\n\n  export type RubyMerge = Globals | \"auto\" | \"collapse\" | \"separate\";\n\n  export type RubyPosition = Globals | \"alternate\" | \"inter-character\" | \"over\" | \"under\" | (string & {});\n\n  export type Scale = Globals | \"none\" | (string & {}) | (number & {});\n\n  export type ScrollBehavior = Globals | \"auto\" | \"smooth\";\n\n  export type ScrollMargin<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type ScrollMarginBlock<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type ScrollMarginBlockEnd<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginBlockStart<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginBottom<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginInline<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type ScrollMarginInlineEnd<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginInlineStart<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginLeft<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginRight<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollMarginTop<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type ScrollPadding<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingBlock<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingBlockEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingBlockStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingBottom<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingInline<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingInlineEnd<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingInlineStart<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingLeft<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingRight<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollPaddingTop<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ScrollSnapAlign = Globals | \"center\" | \"end\" | \"none\" | \"start\" | (string & {});\n\n  export type ScrollSnapCoordinate<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | \"none\" | (string & {});\n\n  export type ScrollSnapDestination<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength>;\n\n  export type ScrollSnapPointsX = Globals | \"none\" | (string & {});\n\n  export type ScrollSnapPointsY = Globals | \"none\" | (string & {});\n\n  export type ScrollSnapStop = Globals | \"always\" | \"normal\";\n\n  export type ScrollSnapType = Globals | \"block\" | \"both\" | \"inline\" | \"none\" | \"x\" | \"y\" | (string & {});\n\n  export type ScrollSnapTypeX = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\n  export type ScrollSnapTypeY = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\n  export type ScrollTimeline = Globals | \"none\" | (string & {});\n\n  export type ScrollTimelineAxis = Globals | \"block\" | \"inline\" | \"x\" | \"y\" | (string & {});\n\n  export type ScrollTimelineName = Globals | \"none\" | (string & {});\n\n  export type ScrollbarColor = Globals | \"auto\" | (string & {});\n\n  export type ScrollbarGutter = Globals | \"auto\" | \"stable\" | (string & {});\n\n  export type ScrollbarWidth = Globals | \"auto\" | \"none\" | \"thin\";\n\n  export type ShapeImageThreshold = Globals | (string & {}) | (number & {});\n\n  export type ShapeMargin<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type ShapeOutside = Globals | DataType.Box | \"margin-box\" | \"none\" | (string & {});\n\n  export type TabSize<TLength = (string & {}) | 0> = Globals | TLength | (number & {}) | (string & {});\n\n  export type TableLayout = Globals | \"auto\" | \"fixed\";\n\n  export type TextAlign = Globals | \"-webkit-match-parent\" | \"center\" | \"end\" | \"justify\" | \"left\" | \"match-parent\" | \"right\" | \"start\";\n\n  export type TextAlignLast = Globals | \"auto\" | \"center\" | \"end\" | \"justify\" | \"left\" | \"right\" | \"start\";\n\n  export type TextCombineUpright = Globals | \"all\" | \"none\" | (string & {});\n\n  export type TextDecoration<TLength = (string & {}) | 0> =\n    | Globals\n    | DataType.Color\n    | TLength\n    | \"auto\"\n    | \"blink\"\n    | \"dashed\"\n    | \"dotted\"\n    | \"double\"\n    | \"from-font\"\n    | \"grammar-error\"\n    | \"line-through\"\n    | \"none\"\n    | \"overline\"\n    | \"solid\"\n    | \"spelling-error\"\n    | \"underline\"\n    | \"wavy\"\n    | (string & {});\n\n  export type TextDecorationColor = Globals | DataType.Color;\n\n  export type TextDecorationLine = Globals | \"blink\" | \"grammar-error\" | \"line-through\" | \"none\" | \"overline\" | \"spelling-error\" | \"underline\" | (string & {});\n\n  export type TextDecorationSkip = Globals | \"box-decoration\" | \"edges\" | \"leading-spaces\" | \"none\" | \"objects\" | \"spaces\" | \"trailing-spaces\" | (string & {});\n\n  export type TextDecorationSkipInk = Globals | \"all\" | \"auto\" | \"none\";\n\n  export type TextDecorationStyle = Globals | \"dashed\" | \"dotted\" | \"double\" | \"solid\" | \"wavy\";\n\n  export type TextDecorationThickness<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | \"from-font\" | (string & {});\n\n  export type TextEmphasis = Globals | DataType.Color | \"circle\" | \"dot\" | \"double-circle\" | \"filled\" | \"none\" | \"open\" | \"sesame\" | \"triangle\" | (string & {});\n\n  export type TextEmphasisColor = Globals | DataType.Color;\n\n  export type TextEmphasisPosition = Globals | (string & {});\n\n  export type TextEmphasisStyle = Globals | \"circle\" | \"dot\" | \"double-circle\" | \"filled\" | \"none\" | \"open\" | \"sesame\" | \"triangle\" | (string & {});\n\n  export type TextIndent<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type TextJustify = Globals | \"auto\" | \"inter-character\" | \"inter-word\" | \"none\";\n\n  export type TextOrientation = Globals | \"mixed\" | \"sideways\" | \"upright\";\n\n  export type TextOverflow = Globals | \"clip\" | \"ellipsis\" | (string & {});\n\n  export type TextRendering = Globals | \"auto\" | \"geometricPrecision\" | \"optimizeLegibility\" | \"optimizeSpeed\";\n\n  export type TextShadow = Globals | \"none\" | (string & {});\n\n  export type TextSizeAdjust = Globals | \"auto\" | \"none\" | (string & {});\n\n  export type TextTransform = Globals | \"capitalize\" | \"full-size-kana\" | \"full-width\" | \"lowercase\" | \"none\" | \"uppercase\";\n\n  export type TextUnderlineOffset<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type TextUnderlinePosition = Globals | \"auto\" | \"from-font\" | \"left\" | \"right\" | \"under\" | (string & {});\n\n  export type TextWrap = Globals | \"balance\" | \"nowrap\" | \"pretty\" | \"stable\" | \"wrap\";\n\n  export type TimelineScope = Globals | \"none\" | (string & {});\n\n  export type Top<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type TouchAction =\n    | Globals\n    | \"-ms-manipulation\"\n    | \"-ms-none\"\n    | \"-ms-pinch-zoom\"\n    | \"auto\"\n    | \"manipulation\"\n    | \"none\"\n    | \"pan-down\"\n    | \"pan-left\"\n    | \"pan-right\"\n    | \"pan-up\"\n    | \"pan-x\"\n    | \"pan-y\"\n    | \"pinch-zoom\"\n    | (string & {});\n\n  export type Transform = Globals | \"none\" | (string & {});\n\n  export type TransformBox = Globals | \"border-box\" | \"content-box\" | \"fill-box\" | \"stroke-box\" | \"view-box\";\n\n  export type TransformOrigin<TLength = (string & {}) | 0> = Globals | TLength | \"bottom\" | \"center\" | \"left\" | \"right\" | \"top\" | (string & {});\n\n  export type TransformStyle = Globals | \"flat\" | \"preserve-3d\";\n\n  export type Transition<TTime = string & {}> = Globals | DataType.SingleTransition<TTime> | (string & {});\n\n  export type TransitionBehavior = Globals | \"allow-discrete\" | \"normal\" | (string & {});\n\n  export type TransitionDelay<TTime = string & {}> = Globals | TTime | (string & {});\n\n  export type TransitionDuration<TTime = string & {}> = Globals | TTime | (string & {});\n\n  export type TransitionProperty = Globals | \"all\" | \"none\" | (string & {});\n\n  export type TransitionTimingFunction = Globals | DataType.EasingFunction | (string & {});\n\n  export type Translate<TLength = (string & {}) | 0> = Globals | TLength | \"none\" | (string & {});\n\n  export type UnicodeBidi =\n    | Globals\n    | \"-moz-isolate\"\n    | \"-moz-isolate-override\"\n    | \"-moz-plaintext\"\n    | \"-webkit-isolate\"\n    | \"-webkit-isolate-override\"\n    | \"-webkit-plaintext\"\n    | \"bidi-override\"\n    | \"embed\"\n    | \"isolate\"\n    | \"isolate-override\"\n    | \"normal\"\n    | \"plaintext\";\n\n  export type UserSelect = Globals | \"-moz-none\" | \"all\" | \"auto\" | \"contain\" | \"element\" | \"none\" | \"text\";\n\n  export type VerticalAlign<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"baseline\"\n    | \"bottom\"\n    | \"middle\"\n    | \"sub\"\n    | \"super\"\n    | \"text-bottom\"\n    | \"text-top\"\n    | \"top\"\n    | (string & {});\n\n  export type ViewTimeline = Globals | \"none\" | (string & {});\n\n  export type ViewTimelineAxis = Globals | \"block\" | \"inline\" | \"x\" | \"y\" | (string & {});\n\n  export type ViewTimelineInset<TLength = (string & {}) | 0> = Globals | TLength | \"auto\" | (string & {});\n\n  export type ViewTimelineName = Globals | \"none\" | (string & {});\n\n  export type ViewTransitionName = Globals | \"none\" | (string & {});\n\n  export type Visibility = Globals | \"collapse\" | \"hidden\" | \"visible\";\n\n  export type WhiteSpace =\n    | Globals\n    | \"-moz-pre-wrap\"\n    | \"balance\"\n    | \"break-spaces\"\n    | \"collapse\"\n    | \"discard\"\n    | \"discard-after\"\n    | \"discard-before\"\n    | \"discard-inner\"\n    | \"none\"\n    | \"normal\"\n    | \"nowrap\"\n    | \"pre\"\n    | \"pre-line\"\n    | \"pre-wrap\"\n    | \"preserve\"\n    | \"preserve-breaks\"\n    | \"preserve-spaces\"\n    | \"pretty\"\n    | \"stable\"\n    | \"wrap\"\n    | (string & {});\n\n  export type WhiteSpaceCollapse = Globals | \"break-spaces\" | \"collapse\" | \"discard\" | \"preserve\" | \"preserve-breaks\" | \"preserve-spaces\";\n\n  export type WhiteSpaceTrim = Globals | \"discard-after\" | \"discard-before\" | \"discard-inner\" | \"none\" | (string & {});\n\n  export type Widows = Globals | (number & {}) | (string & {});\n\n  export type Width<TLength = (string & {}) | 0> =\n    | Globals\n    | TLength\n    | \"-moz-fit-content\"\n    | \"-moz-max-content\"\n    | \"-moz-min-content\"\n    | \"-webkit-fit-content\"\n    | \"-webkit-max-content\"\n    | \"auto\"\n    | \"fit-content\"\n    | \"intrinsic\"\n    | \"max-content\"\n    | \"min-content\"\n    | \"min-intrinsic\"\n    | (string & {});\n\n  export type WillChange = Globals | DataType.AnimateableFeature | \"auto\" | (string & {});\n\n  export type WordBreak = Globals | \"break-all\" | \"break-word\" | \"keep-all\" | \"normal\";\n\n  export type WordSpacing<TLength = (string & {}) | 0> = Globals | TLength | \"normal\";\n\n  export type WordWrap = Globals | \"break-word\" | \"normal\";\n\n  export type WritingMode = Globals | \"horizontal-tb\" | \"sideways-lr\" | \"sideways-rl\" | \"vertical-lr\" | \"vertical-rl\";\n\n  export type ZIndex = Globals | \"auto\" | (number & {}) | (string & {});\n\n  export type Zoom = Globals | \"normal\" | \"reset\" | (string & {}) | (number & {});\n\n  export type MozAppearance =\n    | Globals\n    | \"-moz-mac-unified-toolbar\"\n    | \"-moz-win-borderless-glass\"\n    | \"-moz-win-browsertabbar-toolbox\"\n    | \"-moz-win-communications-toolbox\"\n    | \"-moz-win-communicationstext\"\n    | \"-moz-win-exclude-glass\"\n    | \"-moz-win-glass\"\n    | \"-moz-win-media-toolbox\"\n    | \"-moz-win-mediatext\"\n    | \"-moz-window-button-box\"\n    | \"-moz-window-button-box-maximized\"\n    | \"-moz-window-button-close\"\n    | \"-moz-window-button-maximize\"\n    | \"-moz-window-button-minimize\"\n    | \"-moz-window-button-restore\"\n    | \"-moz-window-frame-bottom\"\n    | \"-moz-window-frame-left\"\n    | \"-moz-window-frame-right\"\n    | \"-moz-window-titlebar\"\n    | \"-moz-window-titlebar-maximized\"\n    | \"button\"\n    | \"button-arrow-down\"\n    | \"button-arrow-next\"\n    | \"button-arrow-previous\"\n    | \"button-arrow-up\"\n    | \"button-bevel\"\n    | \"button-focus\"\n    | \"caret\"\n    | \"checkbox\"\n    | \"checkbox-container\"\n    | \"checkbox-label\"\n    | \"checkmenuitem\"\n    | \"dualbutton\"\n    | \"groupbox\"\n    | \"listbox\"\n    | \"listitem\"\n    | \"menuarrow\"\n    | \"menubar\"\n    | \"menucheckbox\"\n    | \"menuimage\"\n    | \"menuitem\"\n    | \"menuitemtext\"\n    | \"menulist\"\n    | \"menulist-button\"\n    | \"menulist-text\"\n    | \"menulist-textfield\"\n    | \"menupopup\"\n    | \"menuradio\"\n    | \"menuseparator\"\n    | \"meterbar\"\n    | \"meterchunk\"\n    | \"none\"\n    | \"progressbar\"\n    | \"progressbar-vertical\"\n    | \"progresschunk\"\n    | \"progresschunk-vertical\"\n    | \"radio\"\n    | \"radio-container\"\n    | \"radio-label\"\n    | \"radiomenuitem\"\n    | \"range\"\n    | \"range-thumb\"\n    | \"resizer\"\n    | \"resizerpanel\"\n    | \"scale-horizontal\"\n    | \"scale-vertical\"\n    | \"scalethumb-horizontal\"\n    | \"scalethumb-vertical\"\n    | \"scalethumbend\"\n    | \"scalethumbstart\"\n    | \"scalethumbtick\"\n    | \"scrollbarbutton-down\"\n    | \"scrollbarbutton-left\"\n    | \"scrollbarbutton-right\"\n    | \"scrollbarbutton-up\"\n    | \"scrollbarthumb-horizontal\"\n    | \"scrollbarthumb-vertical\"\n    | \"scrollbartrack-horizontal\"\n    | \"scrollbartrack-vertical\"\n    | \"searchfield\"\n    | \"separator\"\n    | \"sheet\"\n    | \"spinner\"\n    | \"spinner-downbutton\"\n    | \"spinner-textfield\"\n    | \"spinner-upbutton\"\n    | \"splitter\"\n    | \"statusbar\"\n    | \"statusbarpanel\"\n    | \"tab\"\n    | \"tab-scroll-arrow-back\"\n    | \"tab-scroll-arrow-forward\"\n    | \"tabpanel\"\n    | \"tabpanels\"\n    | \"textfield\"\n    | \"textfield-multiline\"\n    | \"toolbar\"\n    | \"toolbarbutton\"\n    | \"toolbarbutton-dropdown\"\n    | \"toolbargripper\"\n    | \"toolbox\"\n    | \"tooltip\"\n    | \"treeheader\"\n    | \"treeheadercell\"\n    | \"treeheadersortarrow\"\n    | \"treeitem\"\n    | \"treeline\"\n    | \"treetwisty\"\n    | \"treetwistyopen\"\n    | \"treeview\";\n\n  export type MozBinding = Globals | \"none\" | (string & {});\n\n  export type MozBorderBottomColors = Globals | DataType.Color | \"none\" | (string & {});\n\n  export type MozBorderLeftColors = Globals | DataType.Color | \"none\" | (string & {});\n\n  export type MozBorderRightColors = Globals | DataType.Color | \"none\" | (string & {});\n\n  export type MozBorderTopColors = Globals | DataType.Color | \"none\" | (string & {});\n\n  export type MozContextProperties = Globals | \"fill\" | \"fill-opacity\" | \"none\" | \"stroke\" | \"stroke-opacity\" | (string & {});\n\n  export type MozFloatEdge = Globals | \"border-box\" | \"content-box\" | \"margin-box\" | \"padding-box\";\n\n  export type MozForceBrokenImageIcon = Globals | 0 | (string & {}) | 1;\n\n  export type MozImageRegion = Globals | \"auto\" | (string & {});\n\n  export type MozOrient = Globals | \"block\" | \"horizontal\" | \"inline\" | \"vertical\";\n\n  export type MozOutlineRadius<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozOutlineRadiusBottomleft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozOutlineRadiusBottomright<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozOutlineRadiusTopleft<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozOutlineRadiusTopright<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MozStackSizing = Globals | \"ignore\" | \"stretch-to-fit\";\n\n  export type MozTextBlink = Globals | \"blink\" | \"none\";\n\n  export type MozUserFocus = Globals | \"ignore\" | \"none\" | \"normal\" | \"select-after\" | \"select-all\" | \"select-before\" | \"select-menu\" | \"select-same\";\n\n  export type MozUserInput = Globals | \"auto\" | \"disabled\" | \"enabled\" | \"none\";\n\n  export type MozUserModify = Globals | \"read-only\" | \"read-write\" | \"write-only\";\n\n  export type MozWindowDragging = Globals | \"drag\" | \"no-drag\";\n\n  export type MozWindowShadow = Globals | \"default\" | \"menu\" | \"none\" | \"sheet\" | \"tooltip\";\n\n  export type MsAccelerator = Globals | \"false\" | \"true\";\n\n  export type MsBlockProgression = Globals | \"bt\" | \"lr\" | \"rl\" | \"tb\";\n\n  export type MsContentZoomChaining = Globals | \"chained\" | \"none\";\n\n  export type MsContentZoomLimit = Globals | (string & {});\n\n  export type MsContentZoomLimitMax = Globals | (string & {});\n\n  export type MsContentZoomLimitMin = Globals | (string & {});\n\n  export type MsContentZoomSnap = Globals | \"mandatory\" | \"none\" | \"proximity\" | (string & {});\n\n  export type MsContentZoomSnapPoints = Globals | (string & {});\n\n  export type MsContentZoomSnapType = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\n  export type MsContentZooming = Globals | \"none\" | \"zoom\";\n\n  export type MsFilter = Globals | (string & {});\n\n  export type MsFlowFrom = Globals | \"none\" | (string & {});\n\n  export type MsFlowInto = Globals | \"none\" | (string & {});\n\n  export type MsGridColumns<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | (string & {});\n\n  export type MsGridRows<TLength = (string & {}) | 0> = Globals | DataType.TrackBreadth<TLength> | \"none\" | (string & {});\n\n  export type MsHighContrastAdjust = Globals | \"auto\" | \"none\";\n\n  export type MsHyphenateLimitChars = Globals | \"auto\" | (string & {}) | (number & {});\n\n  export type MsHyphenateLimitLines = Globals | \"no-limit\" | (number & {}) | (string & {});\n\n  export type MsHyphenateLimitZone<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type MsImeAlign = Globals | \"after\" | \"auto\";\n\n  export type MsOverflowStyle = Globals | \"-ms-autohiding-scrollbar\" | \"auto\" | \"none\" | \"scrollbar\";\n\n  export type MsScrollChaining = Globals | \"chained\" | \"none\";\n\n  export type MsScrollLimit = Globals | (string & {});\n\n  export type MsScrollLimitXMax<TLength = (string & {}) | 0> = Globals | TLength | \"auto\";\n\n  export type MsScrollLimitXMin<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type MsScrollLimitYMax<TLength = (string & {}) | 0> = Globals | TLength | \"auto\";\n\n  export type MsScrollLimitYMin<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type MsScrollRails = Globals | \"none\" | \"railed\";\n\n  export type MsScrollSnapPointsX = Globals | (string & {});\n\n  export type MsScrollSnapPointsY = Globals | (string & {});\n\n  export type MsScrollSnapType = Globals | \"mandatory\" | \"none\" | \"proximity\";\n\n  export type MsScrollSnapX = Globals | (string & {});\n\n  export type MsScrollSnapY = Globals | (string & {});\n\n  export type MsScrollTranslation = Globals | \"none\" | \"vertical-to-horizontal\";\n\n  export type MsScrollbar3dlightColor = Globals | DataType.Color;\n\n  export type MsScrollbarArrowColor = Globals | DataType.Color;\n\n  export type MsScrollbarBaseColor = Globals | DataType.Color;\n\n  export type MsScrollbarDarkshadowColor = Globals | DataType.Color;\n\n  export type MsScrollbarFaceColor = Globals | DataType.Color;\n\n  export type MsScrollbarHighlightColor = Globals | DataType.Color;\n\n  export type MsScrollbarShadowColor = Globals | DataType.Color;\n\n  export type MsScrollbarTrackColor = Globals | DataType.Color;\n\n  export type MsTextAutospace = Globals | \"ideograph-alpha\" | \"ideograph-numeric\" | \"ideograph-parenthesis\" | \"ideograph-space\" | \"none\";\n\n  export type MsTouchSelect = Globals | \"grippers\" | \"none\";\n\n  export type MsUserSelect = Globals | \"element\" | \"none\" | \"text\";\n\n  export type MsWrapFlow = Globals | \"auto\" | \"both\" | \"clear\" | \"end\" | \"maximum\" | \"start\";\n\n  export type MsWrapMargin<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type MsWrapThrough = Globals | \"none\" | \"wrap\";\n\n  export type WebkitAppearance =\n    | Globals\n    | \"-apple-pay-button\"\n    | \"button\"\n    | \"button-bevel\"\n    | \"caret\"\n    | \"checkbox\"\n    | \"default-button\"\n    | \"inner-spin-button\"\n    | \"listbox\"\n    | \"listitem\"\n    | \"media-controls-background\"\n    | \"media-controls-fullscreen-background\"\n    | \"media-current-time-display\"\n    | \"media-enter-fullscreen-button\"\n    | \"media-exit-fullscreen-button\"\n    | \"media-fullscreen-button\"\n    | \"media-mute-button\"\n    | \"media-overlay-play-button\"\n    | \"media-play-button\"\n    | \"media-seek-back-button\"\n    | \"media-seek-forward-button\"\n    | \"media-slider\"\n    | \"media-sliderthumb\"\n    | \"media-time-remaining-display\"\n    | \"media-toggle-closed-captions-button\"\n    | \"media-volume-slider\"\n    | \"media-volume-slider-container\"\n    | \"media-volume-sliderthumb\"\n    | \"menulist\"\n    | \"menulist-button\"\n    | \"menulist-text\"\n    | \"menulist-textfield\"\n    | \"meter\"\n    | \"none\"\n    | \"progress-bar\"\n    | \"progress-bar-value\"\n    | \"push-button\"\n    | \"radio\"\n    | \"searchfield\"\n    | \"searchfield-cancel-button\"\n    | \"searchfield-decoration\"\n    | \"searchfield-results-button\"\n    | \"searchfield-results-decoration\"\n    | \"slider-horizontal\"\n    | \"slider-vertical\"\n    | \"sliderthumb-horizontal\"\n    | \"sliderthumb-vertical\"\n    | \"square-button\"\n    | \"textarea\"\n    | \"textfield\";\n\n  export type WebkitBorderBefore<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | DataType.LineStyle | DataType.Color | (string & {});\n\n  export type WebkitBorderBeforeColor = Globals | DataType.Color;\n\n  export type WebkitBorderBeforeStyle = Globals | DataType.LineStyle | (string & {});\n\n  export type WebkitBorderBeforeWidth<TLength = (string & {}) | 0> = Globals | DataType.LineWidth<TLength> | (string & {});\n\n  export type WebkitBoxReflect<TLength = (string & {}) | 0> = Globals | TLength | \"above\" | \"below\" | \"left\" | \"right\" | (string & {});\n\n  export type WebkitLineClamp = Globals | \"none\" | (number & {}) | (string & {});\n\n  export type WebkitMask<TLength = (string & {}) | 0> =\n    | Globals\n    | DataType.Position<TLength>\n    | DataType.RepeatStyle\n    | DataType.Box\n    | \"border\"\n    | \"content\"\n    | \"none\"\n    | \"padding\"\n    | \"text\"\n    | (string & {});\n\n  export type WebkitMaskAttachment = Globals | DataType.Attachment | (string & {});\n\n  export type WebkitMaskClip = Globals | DataType.Box | \"border\" | \"content\" | \"padding\" | \"text\" | (string & {});\n\n  export type WebkitMaskComposite = Globals | DataType.CompositeStyle | (string & {});\n\n  export type WebkitMaskImage = Globals | \"none\" | (string & {});\n\n  export type WebkitMaskOrigin = Globals | DataType.Box | \"border\" | \"content\" | \"padding\" | (string & {});\n\n  export type WebkitMaskPosition<TLength = (string & {}) | 0> = Globals | DataType.Position<TLength> | (string & {});\n\n  export type WebkitMaskPositionX<TLength = (string & {}) | 0> = Globals | TLength | \"center\" | \"left\" | \"right\" | (string & {});\n\n  export type WebkitMaskPositionY<TLength = (string & {}) | 0> = Globals | TLength | \"bottom\" | \"center\" | \"top\" | (string & {});\n\n  export type WebkitMaskRepeat = Globals | DataType.RepeatStyle | (string & {});\n\n  export type WebkitMaskRepeatX = Globals | \"no-repeat\" | \"repeat\" | \"round\" | \"space\";\n\n  export type WebkitMaskRepeatY = Globals | \"no-repeat\" | \"repeat\" | \"round\" | \"space\";\n\n  export type WebkitMaskSize<TLength = (string & {}) | 0> = Globals | DataType.BgSize<TLength> | (string & {});\n\n  export type WebkitOverflowScrolling = Globals | \"auto\" | \"touch\";\n\n  export type WebkitTapHighlightColor = Globals | DataType.Color;\n\n  export type WebkitTextFillColor = Globals | DataType.Color;\n\n  export type WebkitTextStroke<TLength = (string & {}) | 0> = Globals | DataType.Color | TLength | (string & {});\n\n  export type WebkitTextStrokeColor = Globals | DataType.Color;\n\n  export type WebkitTextStrokeWidth<TLength = (string & {}) | 0> = Globals | TLength;\n\n  export type WebkitTouchCallout = Globals | \"default\" | \"none\";\n\n  export type WebkitUserModify = Globals | \"read-only\" | \"read-write\" | \"read-write-plaintext-only\";\n\n  export type AlignmentBaseline =\n    | Globals\n    | \"after-edge\"\n    | \"alphabetic\"\n    | \"auto\"\n    | \"baseline\"\n    | \"before-edge\"\n    | \"central\"\n    | \"hanging\"\n    | \"ideographic\"\n    | \"mathematical\"\n    | \"middle\"\n    | \"text-after-edge\"\n    | \"text-before-edge\";\n\n  export type BaselineShift<TLength = (string & {}) | 0> = Globals | TLength | \"baseline\" | \"sub\" | \"super\" | (string & {});\n\n  export type ClipRule = Globals | \"evenodd\" | \"nonzero\";\n\n  export type ColorInterpolation = Globals | \"auto\" | \"linearRGB\" | \"sRGB\";\n\n  export type ColorRendering = Globals | \"auto\" | \"optimizeQuality\" | \"optimizeSpeed\";\n\n  export type DominantBaseline =\n    | Globals\n    | \"alphabetic\"\n    | \"auto\"\n    | \"central\"\n    | \"hanging\"\n    | \"ideographic\"\n    | \"mathematical\"\n    | \"middle\"\n    | \"no-change\"\n    | \"reset-size\"\n    | \"text-after-edge\"\n    | \"text-before-edge\"\n    | \"use-script\";\n\n  export type Fill = Globals | DataType.Paint;\n\n  export type FillOpacity = Globals | (number & {}) | (string & {});\n\n  export type FillRule = Globals | \"evenodd\" | \"nonzero\";\n\n  export type FloodColor = Globals | DataType.Color | \"currentColor\";\n\n  export type FloodOpacity = Globals | (number & {}) | (string & {});\n\n  export type GlyphOrientationVertical = Globals | \"auto\" | (string & {}) | (number & {});\n\n  export type LightingColor = Globals | DataType.Color | \"currentColor\";\n\n  export type Marker = Globals | \"none\" | (string & {});\n\n  export type MarkerEnd = Globals | \"none\" | (string & {});\n\n  export type MarkerMid = Globals | \"none\" | (string & {});\n\n  export type MarkerStart = Globals | \"none\" | (string & {});\n\n  export type ShapeRendering = Globals | \"auto\" | \"crispEdges\" | \"geometricPrecision\" | \"optimizeSpeed\";\n\n  export type StopColor = Globals | DataType.Color | \"currentColor\";\n\n  export type StopOpacity = Globals | (number & {}) | (string & {});\n\n  export type Stroke = Globals | DataType.Paint;\n\n  export type StrokeDasharray<TLength = (string & {}) | 0> = Globals | DataType.Dasharray<TLength> | \"none\";\n\n  export type StrokeDashoffset<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type StrokeLinecap = Globals | \"butt\" | \"round\" | \"square\";\n\n  export type StrokeLinejoin = Globals | \"bevel\" | \"miter\" | \"round\";\n\n  export type StrokeMiterlimit = Globals | (number & {}) | (string & {});\n\n  export type StrokeOpacity = Globals | (number & {}) | (string & {});\n\n  export type StrokeWidth<TLength = (string & {}) | 0> = Globals | TLength | (string & {});\n\n  export type TextAnchor = Globals | \"end\" | \"middle\" | \"start\";\n\n  export type VectorEffect = Globals | \"non-scaling-stroke\" | \"none\";\n}\n\nexport namespace AtRule {\n  export interface CounterStyle<TLength = (string & {}) | 0, TTime = string & {}> {\n    additiveSymbols?: string | undefined;\n    fallback?: string | undefined;\n    negative?: string | undefined;\n    pad?: string | undefined;\n    prefix?: string | undefined;\n    range?: Range | undefined;\n    speakAs?: SpeakAs | undefined;\n    suffix?: string | undefined;\n    symbols?: string | undefined;\n    system?: System | undefined;\n  }\n\n  export interface CounterStyleHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    \"additive-symbols\"?: string | undefined;\n    fallback?: string | undefined;\n    negative?: string | undefined;\n    pad?: string | undefined;\n    prefix?: string | undefined;\n    range?: Range | undefined;\n    \"speak-as\"?: SpeakAs | undefined;\n    suffix?: string | undefined;\n    symbols?: string | undefined;\n    system?: System | undefined;\n  }\n\n  export type CounterStyleFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<CounterStyle<TLength, TTime>>;\n\n  export type CounterStyleHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<CounterStyleHyphen<TLength, TTime>>;\n\n  export interface FontFace<TLength = (string & {}) | 0, TTime = string & {}> {\n    MozFontFeatureSettings?: FontFeatureSettings | undefined;\n    ascentOverride?: AscentOverride | undefined;\n    descentOverride?: DescentOverride | undefined;\n    fontDisplay?: FontDisplay | undefined;\n    fontFamily?: string | undefined;\n    fontFeatureSettings?: FontFeatureSettings | undefined;\n    fontStretch?: FontStretch | undefined;\n    fontStyle?: FontStyle | undefined;\n    fontVariant?: FontVariant | undefined;\n    fontVariationSettings?: FontVariationSettings | undefined;\n    fontWeight?: FontWeight | undefined;\n    lineGapOverride?: LineGapOverride | undefined;\n    sizeAdjust?: string | undefined;\n    src?: string | undefined;\n    unicodeRange?: string | undefined;\n  }\n\n  export interface FontFaceHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    \"-moz-font-feature-settings\"?: FontFeatureSettings | undefined;\n    \"ascent-override\"?: AscentOverride | undefined;\n    \"descent-override\"?: DescentOverride | undefined;\n    \"font-display\"?: FontDisplay | undefined;\n    \"font-family\"?: string | undefined;\n    \"font-feature-settings\"?: FontFeatureSettings | undefined;\n    \"font-stretch\"?: FontStretch | undefined;\n    \"font-style\"?: FontStyle | undefined;\n    \"font-variant\"?: FontVariant | undefined;\n    \"font-variation-settings\"?: FontVariationSettings | undefined;\n    \"font-weight\"?: FontWeight | undefined;\n    \"line-gap-override\"?: LineGapOverride | undefined;\n    \"size-adjust\"?: string | undefined;\n    src?: string | undefined;\n    \"unicode-range\"?: string | undefined;\n  }\n\n  export type FontFaceFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontFace<TLength, TTime>>;\n\n  export type FontFaceHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontFaceHyphen<TLength, TTime>>;\n\n  export interface FontPaletteValues<TLength = (string & {}) | 0, TTime = string & {}> {\n    basePalette?: BasePalette | undefined;\n    fontFamily?: string | undefined;\n    overrideColors?: string | undefined;\n  }\n\n  export interface FontPaletteValuesHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    \"base-palette\"?: BasePalette | undefined;\n    \"font-family\"?: string | undefined;\n    \"override-colors\"?: string | undefined;\n  }\n\n  export type FontPaletteValuesFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontPaletteValues<TLength, TTime>>;\n\n  export type FontPaletteValuesHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<FontPaletteValuesHyphen<TLength, TTime>>;\n\n  export interface Page<TLength = (string & {}) | 0, TTime = string & {}> {\n    bleed?: Bleed<TLength> | undefined;\n    marks?: Marks | undefined;\n    pageOrientation?: PageOrientation | undefined;\n    size?: Size<TLength> | undefined;\n  }\n\n  export interface PageHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    bleed?: Bleed<TLength> | undefined;\n    marks?: Marks | undefined;\n    \"page-orientation\"?: PageOrientation | undefined;\n    size?: Size<TLength> | undefined;\n  }\n\n  export type PageFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Page<TLength, TTime>>;\n\n  export type PageHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<PageHyphen<TLength, TTime>>;\n\n  export interface Property<TLength = (string & {}) | 0, TTime = string & {}> {\n    inherits?: Inherits | undefined;\n    initialValue?: string | undefined;\n    syntax?: string | undefined;\n  }\n\n  export interface PropertyHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    inherits?: Inherits | undefined;\n    \"initial-value\"?: string | undefined;\n    syntax?: string | undefined;\n  }\n\n  export type PropertyFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Property<TLength, TTime>>;\n\n  export type PropertyHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<PropertyHyphen<TLength, TTime>>;\n\n  export interface Viewport<TLength = (string & {}) | 0, TTime = string & {}> {\n    height?: Height<TLength> | undefined;\n    maxHeight?: MaxHeight<TLength> | undefined;\n    maxWidth?: MaxWidth<TLength> | undefined;\n    maxZoom?: MaxZoom | undefined;\n    minHeight?: MinHeight<TLength> | undefined;\n    minWidth?: MinWidth<TLength> | undefined;\n    minZoom?: MinZoom | undefined;\n    orientation?: Orientation | undefined;\n    userZoom?: UserZoom | undefined;\n    viewportFit?: ViewportFit | undefined;\n    width?: Width<TLength> | undefined;\n    zoom?: Zoom | undefined;\n  }\n\n  export interface ViewportHyphen<TLength = (string & {}) | 0, TTime = string & {}> {\n    height?: Height<TLength> | undefined;\n    \"max-height\"?: MaxHeight<TLength> | undefined;\n    \"max-width\"?: MaxWidth<TLength> | undefined;\n    \"max-zoom\"?: MaxZoom | undefined;\n    \"min-height\"?: MinHeight<TLength> | undefined;\n    \"min-width\"?: MinWidth<TLength> | undefined;\n    \"min-zoom\"?: MinZoom | undefined;\n    orientation?: Orientation | undefined;\n    \"user-zoom\"?: UserZoom | undefined;\n    \"viewport-fit\"?: ViewportFit | undefined;\n    width?: Width<TLength> | undefined;\n    zoom?: Zoom | undefined;\n  }\n\n  export type ViewportFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<Viewport<TLength, TTime>>;\n\n  export type ViewportHyphenFallback<TLength = (string & {}) | 0, TTime = string & {}> = Fallback<ViewportHyphen<TLength, TTime>>;\n\n  type Range = \"auto\" | (string & {});\n\n  type SpeakAs = \"auto\" | \"bullets\" | \"numbers\" | \"spell-out\" | \"words\" | (string & {});\n\n  type System = \"additive\" | \"alphabetic\" | \"cyclic\" | \"fixed\" | \"numeric\" | \"symbolic\" | (string & {});\n\n  type FontFeatureSettings = \"normal\" | (string & {});\n\n  type AscentOverride = \"normal\" | (string & {});\n\n  type DescentOverride = \"normal\" | (string & {});\n\n  type FontDisplay = \"auto\" | \"block\" | \"fallback\" | \"optional\" | \"swap\";\n\n  type FontStretch = DataType.FontStretchAbsolute | (string & {});\n\n  type FontStyle = \"italic\" | \"normal\" | \"oblique\" | (string & {});\n\n  type FontVariant =\n    | DataType.EastAsianVariantValues\n    | \"all-petite-caps\"\n    | \"all-small-caps\"\n    | \"common-ligatures\"\n    | \"contextual\"\n    | \"diagonal-fractions\"\n    | \"discretionary-ligatures\"\n    | \"full-width\"\n    | \"historical-forms\"\n    | \"historical-ligatures\"\n    | \"lining-nums\"\n    | \"no-common-ligatures\"\n    | \"no-contextual\"\n    | \"no-discretionary-ligatures\"\n    | \"no-historical-ligatures\"\n    | \"none\"\n    | \"normal\"\n    | \"oldstyle-nums\"\n    | \"ordinal\"\n    | \"petite-caps\"\n    | \"proportional-nums\"\n    | \"proportional-width\"\n    | \"ruby\"\n    | \"slashed-zero\"\n    | \"small-caps\"\n    | \"stacked-fractions\"\n    | \"tabular-nums\"\n    | \"titling-caps\"\n    | \"unicase\"\n    | (string & {});\n\n  type FontVariationSettings = \"normal\" | (string & {});\n\n  type FontWeight = DataType.FontWeightAbsolute | (string & {});\n\n  type LineGapOverride = \"normal\" | (string & {});\n\n  type BasePalette = \"dark\" | \"light\" | (number & {}) | (string & {});\n\n  type Bleed<TLength> = TLength | \"auto\";\n\n  type Marks = \"crop\" | \"cross\" | \"none\" | (string & {});\n\n  type PageOrientation = \"rotate-left\" | \"rotate-right\" | \"upright\";\n\n  type Size<TLength> = DataType.PageSize | TLength | \"auto\" | \"landscape\" | \"portrait\" | (string & {});\n\n  type Inherits = \"false\" | \"true\";\n\n  type Height<TLength> = DataType.ViewportLength<TLength> | (string & {});\n\n  type MaxHeight<TLength> = DataType.ViewportLength<TLength>;\n\n  type MaxWidth<TLength> = DataType.ViewportLength<TLength>;\n\n  type MaxZoom = \"auto\" | (string & {}) | (number & {});\n\n  type MinHeight<TLength> = DataType.ViewportLength<TLength>;\n\n  type MinWidth<TLength> = DataType.ViewportLength<TLength>;\n\n  type MinZoom = \"auto\" | (string & {}) | (number & {});\n\n  type Orientation = \"auto\" | \"landscape\" | \"portrait\";\n\n  type UserZoom = \"fixed\" | \"zoom\";\n\n  type ViewportFit = \"auto\" | \"contain\" | \"cover\";\n\n  type Width<TLength> = DataType.ViewportLength<TLength> | (string & {});\n\n  type Zoom = \"auto\" | (string & {}) | (number & {});\n}\n\n/**\n * **Attention!** Data types receives its name from the spec. E.g. `<color>` becomes `DataType.Color` and\n * `<content-distribution>` becomes `DataType.ContentDistribution`. It happens quite frequent that these data types\n * are split into several data types or/and name changes as the spec develops. So there's a risk that a minor/patch\n * update from `csstype` can break your typing if you're using the `DataType` namespace.\n */\nexport namespace DataType {\n  type AbsoluteSize = \"large\" | \"medium\" | \"small\" | \"x-large\" | \"x-small\" | \"xx-large\" | \"xx-small\" | \"xxx-large\";\n\n  type AnimateableFeature = \"contents\" | \"scroll-position\" | (string & {});\n\n  type Attachment = \"fixed\" | \"local\" | \"scroll\";\n\n  type BgPosition<TLength> = TLength | \"bottom\" | \"center\" | \"left\" | \"right\" | \"top\" | (string & {});\n\n  type BgSize<TLength> = TLength | \"auto\" | \"contain\" | \"cover\" | (string & {});\n\n  type BlendMode =\n    | \"color\"\n    | \"color-burn\"\n    | \"color-dodge\"\n    | \"darken\"\n    | \"difference\"\n    | \"exclusion\"\n    | \"hard-light\"\n    | \"hue\"\n    | \"lighten\"\n    | \"luminosity\"\n    | \"multiply\"\n    | \"normal\"\n    | \"overlay\"\n    | \"saturation\"\n    | \"screen\"\n    | \"soft-light\";\n\n  type Box = \"border-box\" | \"content-box\" | \"padding-box\";\n\n  type Color = NamedColor | DeprecatedSystemColor | \"currentcolor\" | (string & {});\n\n  type CompatAuto =\n    | \"button\"\n    | \"checkbox\"\n    | \"listbox\"\n    | \"menulist\"\n    | \"meter\"\n    | \"progress-bar\"\n    | \"push-button\"\n    | \"radio\"\n    | \"searchfield\"\n    | \"slider-horizontal\"\n    | \"square-button\"\n    | \"textarea\";\n\n  type CompositeStyle =\n    | \"clear\"\n    | \"copy\"\n    | \"destination-atop\"\n    | \"destination-in\"\n    | \"destination-out\"\n    | \"destination-over\"\n    | \"source-atop\"\n    | \"source-in\"\n    | \"source-out\"\n    | \"source-over\"\n    | \"xor\";\n\n  type CompositingOperator = \"add\" | \"exclude\" | \"intersect\" | \"subtract\";\n\n  type ContentDistribution = \"space-around\" | \"space-between\" | \"space-evenly\" | \"stretch\";\n\n  type ContentList = Quote | \"contents\" | (string & {});\n\n  type ContentPosition = \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"start\";\n\n  type CubicBezierTimingFunction = \"ease\" | \"ease-in\" | \"ease-in-out\" | \"ease-out\" | (string & {});\n\n  type Dasharray<TLength> = TLength | (string & {}) | (number & {});\n\n  type DeprecatedSystemColor =\n    | \"ActiveBorder\"\n    | \"ActiveCaption\"\n    | \"AppWorkspace\"\n    | \"Background\"\n    | \"ButtonFace\"\n    | \"ButtonHighlight\"\n    | \"ButtonShadow\"\n    | \"ButtonText\"\n    | \"CaptionText\"\n    | \"GrayText\"\n    | \"Highlight\"\n    | \"HighlightText\"\n    | \"InactiveBorder\"\n    | \"InactiveCaption\"\n    | \"InactiveCaptionText\"\n    | \"InfoBackground\"\n    | \"InfoText\"\n    | \"Menu\"\n    | \"MenuText\"\n    | \"Scrollbar\"\n    | \"ThreeDDarkShadow\"\n    | \"ThreeDFace\"\n    | \"ThreeDHighlight\"\n    | \"ThreeDLightShadow\"\n    | \"ThreeDShadow\"\n    | \"Window\"\n    | \"WindowFrame\"\n    | \"WindowText\";\n\n  type DisplayInside = \"-ms-flexbox\" | \"-ms-grid\" | \"-webkit-flex\" | \"flex\" | \"flow\" | \"flow-root\" | \"grid\" | \"ruby\" | \"table\";\n\n  type DisplayInternal =\n    | \"ruby-base\"\n    | \"ruby-base-container\"\n    | \"ruby-text\"\n    | \"ruby-text-container\"\n    | \"table-caption\"\n    | \"table-cell\"\n    | \"table-column\"\n    | \"table-column-group\"\n    | \"table-footer-group\"\n    | \"table-header-group\"\n    | \"table-row\"\n    | \"table-row-group\";\n\n  type DisplayLegacy = \"-ms-inline-flexbox\" | \"-ms-inline-grid\" | \"-webkit-inline-flex\" | \"inline-block\" | \"inline-flex\" | \"inline-grid\" | \"inline-list-item\" | \"inline-table\";\n\n  type DisplayOutside = \"block\" | \"inline\" | \"run-in\";\n\n  type EasingFunction = CubicBezierTimingFunction | StepTimingFunction | \"linear\";\n\n  type EastAsianVariantValues = \"jis04\" | \"jis78\" | \"jis83\" | \"jis90\" | \"simplified\" | \"traditional\";\n\n  type FinalBgLayer<TLength> = Color | BgPosition<TLength> | RepeatStyle | Attachment | Box | \"none\" | (string & {});\n\n  type FontStretchAbsolute =\n    | \"condensed\"\n    | \"expanded\"\n    | \"extra-condensed\"\n    | \"extra-expanded\"\n    | \"normal\"\n    | \"semi-condensed\"\n    | \"semi-expanded\"\n    | \"ultra-condensed\"\n    | \"ultra-expanded\"\n    | (string & {});\n\n  type FontWeightAbsolute = \"bold\" | \"normal\" | (number & {}) | (string & {});\n\n  type GenericFamily = \"cursive\" | \"fantasy\" | \"monospace\" | \"sans-serif\" | \"serif\";\n\n  type GeometryBox = Box | \"fill-box\" | \"margin-box\" | \"stroke-box\" | \"view-box\";\n\n  type GridLine = \"auto\" | (string & {}) | (number & {});\n\n  type LineStyle = \"dashed\" | \"dotted\" | \"double\" | \"groove\" | \"hidden\" | \"inset\" | \"none\" | \"outset\" | \"ridge\" | \"solid\";\n\n  type LineWidth<TLength> = TLength | \"medium\" | \"thick\" | \"thin\";\n\n  type MaskLayer<TLength> = Position<TLength> | RepeatStyle | GeometryBox | CompositingOperator | MaskingMode | \"no-clip\" | \"none\" | (string & {});\n\n  type MaskingMode = \"alpha\" | \"luminance\" | \"match-source\";\n\n  type NamedColor =\n    | \"aliceblue\"\n    | \"antiquewhite\"\n    | \"aqua\"\n    | \"aquamarine\"\n    | \"azure\"\n    | \"beige\"\n    | \"bisque\"\n    | \"black\"\n    | \"blanchedalmond\"\n    | \"blue\"\n    | \"blueviolet\"\n    | \"brown\"\n    | \"burlywood\"\n    | \"cadetblue\"\n    | \"chartreuse\"\n    | \"chocolate\"\n    | \"coral\"\n    | \"cornflowerblue\"\n    | \"cornsilk\"\n    | \"crimson\"\n    | \"cyan\"\n    | \"darkblue\"\n    | \"darkcyan\"\n    | \"darkgoldenrod\"\n    | \"darkgray\"\n    | \"darkgreen\"\n    | \"darkgrey\"\n    | \"darkkhaki\"\n    | \"darkmagenta\"\n    | \"darkolivegreen\"\n    | \"darkorange\"\n    | \"darkorchid\"\n    | \"darkred\"\n    | \"darksalmon\"\n    | \"darkseagreen\"\n    | \"darkslateblue\"\n    | \"darkslategray\"\n    | \"darkslategrey\"\n    | \"darkturquoise\"\n    | \"darkviolet\"\n    | \"deeppink\"\n    | \"deepskyblue\"\n    | \"dimgray\"\n    | \"dimgrey\"\n    | \"dodgerblue\"\n    | \"firebrick\"\n    | \"floralwhite\"\n    | \"forestgreen\"\n    | \"fuchsia\"\n    | \"gainsboro\"\n    | \"ghostwhite\"\n    | \"gold\"\n    | \"goldenrod\"\n    | \"gray\"\n    | \"green\"\n    | \"greenyellow\"\n    | \"grey\"\n    | \"honeydew\"\n    | \"hotpink\"\n    | \"indianred\"\n    | \"indigo\"\n    | \"ivory\"\n    | \"khaki\"\n    | \"lavender\"\n    | \"lavenderblush\"\n    | \"lawngreen\"\n    | \"lemonchiffon\"\n    | \"lightblue\"\n    | \"lightcoral\"\n    | \"lightcyan\"\n    | \"lightgoldenrodyellow\"\n    | \"lightgray\"\n    | \"lightgreen\"\n    | \"lightgrey\"\n    | \"lightpink\"\n    | \"lightsalmon\"\n    | \"lightseagreen\"\n    | \"lightskyblue\"\n    | \"lightslategray\"\n    | \"lightslategrey\"\n    | \"lightsteelblue\"\n    | \"lightyellow\"\n    | \"lime\"\n    | \"limegreen\"\n    | \"linen\"\n    | \"magenta\"\n    | \"maroon\"\n    | \"mediumaquamarine\"\n    | \"mediumblue\"\n    | \"mediumorchid\"\n    | \"mediumpurple\"\n    | \"mediumseagreen\"\n    | \"mediumslateblue\"\n    | \"mediumspringgreen\"\n    | \"mediumturquoise\"\n    | \"mediumvioletred\"\n    | \"midnightblue\"\n    | \"mintcream\"\n    | \"mistyrose\"\n    | \"moccasin\"\n    | \"navajowhite\"\n    | \"navy\"\n    | \"oldlace\"\n    | \"olive\"\n    | \"olivedrab\"\n    | \"orange\"\n    | \"orangered\"\n    | \"orchid\"\n    | \"palegoldenrod\"\n    | \"palegreen\"\n    | \"paleturquoise\"\n    | \"palevioletred\"\n    | \"papayawhip\"\n    | \"peachpuff\"\n    | \"peru\"\n    | \"pink\"\n    | \"plum\"\n    | \"powderblue\"\n    | \"purple\"\n    | \"rebeccapurple\"\n    | \"red\"\n    | \"rosybrown\"\n    | \"royalblue\"\n    | \"saddlebrown\"\n    | \"salmon\"\n    | \"sandybrown\"\n    | \"seagreen\"\n    | \"seashell\"\n    | \"sienna\"\n    | \"silver\"\n    | \"skyblue\"\n    | \"slateblue\"\n    | \"slategray\"\n    | \"slategrey\"\n    | \"snow\"\n    | \"springgreen\"\n    | \"steelblue\"\n    | \"tan\"\n    | \"teal\"\n    | \"thistle\"\n    | \"tomato\"\n    | \"transparent\"\n    | \"turquoise\"\n    | \"violet\"\n    | \"wheat\"\n    | \"white\"\n    | \"whitesmoke\"\n    | \"yellow\"\n    | \"yellowgreen\";\n\n  type PageSize = \"A3\" | \"A4\" | \"A5\" | \"B4\" | \"B5\" | \"JIS-B4\" | \"JIS-B5\" | \"ledger\" | \"legal\" | \"letter\";\n\n  type Paint = Color | \"child\" | \"context-fill\" | \"context-stroke\" | \"none\" | (string & {});\n\n  type Position<TLength> = TLength | \"bottom\" | \"center\" | \"left\" | \"right\" | \"top\" | (string & {});\n\n  type Quote = \"close-quote\" | \"no-close-quote\" | \"no-open-quote\" | \"open-quote\";\n\n  type RepeatStyle = \"no-repeat\" | \"repeat\" | \"repeat-x\" | \"repeat-y\" | \"round\" | \"space\" | (string & {});\n\n  type SelfPosition = \"center\" | \"end\" | \"flex-end\" | \"flex-start\" | \"self-end\" | \"self-start\" | \"start\";\n\n  type SingleAnimation<TTime> =\n    | EasingFunction\n    | SingleAnimationDirection\n    | SingleAnimationFillMode\n    | SingleAnimationTimeline\n    | TTime\n    | \"infinite\"\n    | \"none\"\n    | \"paused\"\n    | \"running\"\n    | (string & {})\n    | (number & {});\n\n  type SingleAnimationComposition = \"accumulate\" | \"add\" | \"replace\";\n\n  type SingleAnimationDirection = \"alternate\" | \"alternate-reverse\" | \"normal\" | \"reverse\";\n\n  type SingleAnimationFillMode = \"backwards\" | \"both\" | \"forwards\" | \"none\";\n\n  type SingleAnimationTimeline = \"auto\" | \"none\" | (string & {});\n\n  type SingleTransition<TTime> = EasingFunction | TTime | \"all\" | \"allow-discrete\" | \"none\" | \"normal\" | (string & {});\n\n  type StepTimingFunction = \"step-end\" | \"step-start\" | (string & {});\n\n  type TimelineRangeName = \"contain\" | \"cover\" | \"entry\" | \"entry-crossing\" | \"exit\" | \"exit-crossing\";\n\n  type TrackBreadth<TLength> = TLength | \"auto\" | \"max-content\" | \"min-content\" | (string & {});\n\n  type ViewportLength<TLength> = TLength | \"auto\" | (string & {});\n\n  type VisualBox = \"border-box\" | \"content-box\" | \"padding-box\";\n}\n"},"externals":{"cjsCode":"\"use strict\";var sp=Object.create;var $r=Object.defineProperty;var lp=Object.getOwnPropertyDescriptor;var up=Object.getOwnPropertyNames;var ap=Object.getPrototypeOf,cp=Object.prototype.hasOwnProperty;var Ce=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),_o=(e,t)=>{for(var n in t)$r(e,n,{get:t[n],enumerable:!0})},au=(e,t,n,r)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let i of up(t))!cp.call(e,i)&&i!==n&&$r(e,i,{get:()=>t[i],enumerable:!(r=lp(t,i))||r.enumerable});return e};var Pt=(e,t,n)=>(n=e!=null?sp(ap(e)):{},au(t||!e||!e.__esModule?$r(n,\"default\",{value:e,enumerable:!0}):n,e)),fp=e=>au($r({},\"__esModule\",{value:!0}),e);var wu=Ce(P=>{\"use strict\";var Ln=Symbol.for(\"react.element\"),dp=Symbol.for(\"react.portal\"),pp=Symbol.for(\"react.fragment\"),hp=Symbol.for(\"react.strict_mode\"),mp=Symbol.for(\"react.profiler\"),vp=Symbol.for(\"react.provider\"),yp=Symbol.for(\"react.context\"),gp=Symbol.for(\"react.forward_ref\"),Sp=Symbol.for(\"react.suspense\"),wp=Symbol.for(\"react.memo\"),_p=Symbol.for(\"react.lazy\"),cu=Symbol.iterator;function kp(e){return e===null||typeof e!=\"object\"?null:(e=cu&&e[cu]||e[\"@@iterator\"],typeof e==\"function\"?e:null)}var pu={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},hu=Object.assign,mu={};function Yt(e,t,n){this.props=e,this.context=t,this.refs=mu,this.updater=n||pu}Yt.prototype.isReactComponent={};Yt.prototype.setState=function(e,t){if(typeof e!=\"object\"&&typeof e!=\"function\"&&e!=null)throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");this.updater.enqueueSetState(this,e,t,\"setState\")};Yt.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,\"forceUpdate\")};function vu(){}vu.prototype=Yt.prototype;function Eo(e,t,n){this.props=e,this.context=t,this.refs=mu,this.updater=n||pu}var xo=Eo.prototype=new vu;xo.constructor=Eo;hu(xo,Yt.prototype);xo.isPureReactComponent=!0;var fu=Array.isArray,yu=Object.prototype.hasOwnProperty,Co={current:null},gu={key:!0,ref:!0,__self:!0,__source:!0};function Su(e,t,n){var r,i={},o=null,s=null;if(t!=null)for(r in t.ref!==void 0&&(s=t.ref),t.key!==void 0&&(o=\"\"+t.key),t)yu.call(t,r)&&!gu.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(l===1)i.children=n;else if(1<l){for(var u=Array(l),a=0;a<l;a++)u[a]=arguments[a+2];i.children=u}if(e&&e.defaultProps)for(r in l=e.defaultProps,l)i[r]===void 0&&(i[r]=l[r]);return{$$typeof:Ln,type:e,key:o,ref:s,props:i,_owner:Co.current}}function Ep(e,t){return{$$typeof:Ln,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function To(e){return typeof e==\"object\"&&e!==null&&e.$$typeof===Ln}function xp(e){var t={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+e.replace(/[=:]/g,function(n){return t[n]})}var du=/\\/+/g;function ko(e,t){return typeof e==\"object\"&&e!==null&&e.key!=null?xp(\"\"+e.key):t.toString(36)}function Ur(e,t,n,r,i){var o=typeof e;(o===\"undefined\"||o===\"boolean\")&&(e=null);var s=!1;if(e===null)s=!0;else switch(o){case\"string\":case\"number\":s=!0;break;case\"object\":switch(e.$$typeof){case Ln:case dp:s=!0}}if(s)return s=e,i=i(s),e=r===\"\"?\".\"+ko(s,0):r,fu(i)?(n=\"\",e!=null&&(n=e.replace(du,\"$&/\")+\"/\"),Ur(i,t,n,\"\",function(a){return a})):i!=null&&(To(i)&&(i=Ep(i,n+(!i.key||s&&s.key===i.key?\"\":(\"\"+i.key).replace(du,\"$&/\")+\"/\")+e)),t.push(i)),1;if(s=0,r=r===\"\"?\".\":r+\":\",fu(e))for(var l=0;l<e.length;l++){o=e[l];var u=r+ko(o,l);s+=Ur(o,t,n,u,i)}else if(u=kp(e),typeof u==\"function\")for(e=u.call(e),l=0;!(o=e.next()).done;)o=o.value,u=r+ko(o,l++),s+=Ur(o,t,n,u,i);else if(o===\"object\")throw t=String(e),Error(\"Objects are not valid as a React child (found: \"+(t===\"[object Object]\"?\"object with keys {\"+Object.keys(e).join(\", \")+\"}\":t)+\"). If you meant to render a collection of children, use an array instead.\");return s}function Fr(e,t,n){if(e==null)return e;var r=[],i=0;return Ur(e,r,\"\",\"\",function(o){return t.call(n,o,i++)}),r}function Cp(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(n){(e._status===0||e._status===-1)&&(e._status=1,e._result=n)},function(n){(e._status===0||e._status===-1)&&(e._status=2,e._result=n)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var ne={current:null},Vr={transition:null},Tp={ReactCurrentDispatcher:ne,ReactCurrentBatchConfig:Vr,ReactCurrentOwner:Co};P.Children={map:Fr,forEach:function(e,t,n){Fr(e,function(){t.apply(this,arguments)},n)},count:function(e){var t=0;return Fr(e,function(){t++}),t},toArray:function(e){return Fr(e,function(t){return t})||[]},only:function(e){if(!To(e))throw Error(\"React.Children.only expected to receive a single React element child.\");return e}};P.Component=Yt;P.Fragment=pp;P.Profiler=mp;P.PureComponent=Eo;P.StrictMode=hp;P.Suspense=Sp;P.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Tp;P.cloneElement=function(e,t,n){if(e==null)throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \"+e+\".\");var r=hu({},e.props),i=e.key,o=e.ref,s=e._owner;if(t!=null){if(t.ref!==void 0&&(o=t.ref,s=Co.current),t.key!==void 0&&(i=\"\"+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(u in t)yu.call(t,u)&&!gu.hasOwnProperty(u)&&(r[u]=t[u]===void 0&&l!==void 0?l[u]:t[u])}var u=arguments.length-2;if(u===1)r.children=n;else if(1<u){l=Array(u);for(var a=0;a<u;a++)l[a]=arguments[a+2];r.children=l}return{$$typeof:Ln,type:e.type,key:i,ref:o,props:r,_owner:s}};P.createContext=function(e){return e={$$typeof:yp,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:vp,_context:e},e.Consumer=e};P.createElement=Su;P.createFactory=function(e){var t=Su.bind(null,e);return t.type=e,t};P.createRef=function(){return{current:null}};P.forwardRef=function(e){return{$$typeof:gp,render:e}};P.isValidElement=To;P.lazy=function(e){return{$$typeof:_p,_payload:{_status:-1,_result:e},_init:Cp}};P.memo=function(e,t){return{$$typeof:wp,type:e,compare:t===void 0?null:t}};P.startTransition=function(e){var t=Vr.transition;Vr.transition={};try{e()}finally{Vr.transition=t}};P.unstable_act=function(){throw Error(\"act(...) is not supported in production builds of React.\")};P.useCallback=function(e,t){return ne.current.useCallback(e,t)};P.useContext=function(e){return ne.current.useContext(e)};P.useDebugValue=function(){};P.useDeferredValue=function(e){return ne.current.useDeferredValue(e)};P.useEffect=function(e,t){return ne.current.useEffect(e,t)};P.useId=function(){return ne.current.useId()};P.useImperativeHandle=function(e,t,n){return ne.current.useImperativeHandle(e,t,n)};P.useInsertionEffect=function(e,t){return ne.current.useInsertionEffect(e,t)};P.useLayoutEffect=function(e,t){return ne.current.useLayoutEffect(e,t)};P.useMemo=function(e,t){return ne.current.useMemo(e,t)};P.useReducer=function(e,t,n){return ne.current.useReducer(e,t,n)};P.useRef=function(e){return ne.current.useRef(e)};P.useState=function(e){return ne.current.useState(e)};P.useSyncExternalStore=function(e,t,n){return ne.current.useSyncExternalStore(e,t,n)};P.useTransition=function(){return ne.current.useTransition()};P.version=\"18.2.0\"});var tt=Ce((fy,_u)=>{\"use strict\";_u.exports=wu()});var Ru=Ce(R=>{\"use strict\";function zo(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,i=e[r];if(0<Br(i,t))e[r]=t,e[n]=i,n=r;else break e}}function Te(e){return e.length===0?null:e[0]}function Hr(e){if(e.length===0)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length,o=i>>>1;r<o;){var s=2*(r+1)-1,l=e[s],u=s+1,a=e[u];if(0>Br(l,n))u<i&&0>Br(a,l)?(e[r]=a,e[u]=n,r=u):(e[r]=l,e[s]=n,r=s);else if(u<i&&0>Br(a,n))e[r]=a,e[u]=n,r=u;else break e}}return t}function Br(e,t){var n=e.sortIndex-t.sortIndex;return n!==0?n:e.id-t.id}typeof performance==\"object\"&&typeof performance.now==\"function\"?(ku=performance,R.unstable_now=function(){return ku.now()}):(Po=Date,Eu=Po.now(),R.unstable_now=function(){return Po.now()-Eu});var ku,Po,Eu,Me=[],nt=[],Pp=1,ge=null,J=3,Qr=!1,It=!1,Mn=!1,Tu=typeof setTimeout==\"function\"?setTimeout:null,Pu=typeof clearTimeout==\"function\"?clearTimeout:null,xu=typeof setImmediate<\"u\"?setImmediate:null;typeof navigator<\"u\"&&navigator.scheduling!==void 0&&navigator.scheduling.isInputPending!==void 0&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function Ro(e){for(var t=Te(nt);t!==null;){if(t.callback===null)Hr(nt);else if(t.startTime<=e)Hr(nt),t.sortIndex=t.expirationTime,zo(Me,t);else break;t=Te(nt)}}function Oo(e){if(Mn=!1,Ro(e),!It)if(Te(Me)!==null)It=!0,Ao(Lo);else{var t=Te(nt);t!==null&&Mo(Oo,t.startTime-e)}}function Lo(e,t){It=!1,Mn&&(Mn=!1,Pu(Dn),Dn=-1),Qr=!0;var n=J;try{for(Ro(t),ge=Te(Me);ge!==null&&(!(ge.expirationTime>t)||e&&!zu());){var r=ge.callback;if(typeof r==\"function\"){ge.callback=null,J=ge.priorityLevel;var i=r(ge.expirationTime<=t);t=R.unstable_now(),typeof i==\"function\"?ge.callback=i:ge===Te(Me)&&Hr(Me),Ro(t)}else Hr(Me);ge=Te(Me)}if(ge!==null)var o=!0;else{var s=Te(nt);s!==null&&Mo(Oo,s.startTime-t),o=!1}return o}finally{ge=null,J=n,Qr=!1}}var Kr=!1,Wr=null,Dn=-1,Iu=5,Nu=-1;function zu(){return!(R.unstable_now()-Nu<Iu)}function Io(){if(Wr!==null){var e=R.unstable_now();Nu=e;var t=!0;try{t=Wr(!0,e)}finally{t?An():(Kr=!1,Wr=null)}}else Kr=!1}var An;typeof xu==\"function\"?An=function(){xu(Io)}:typeof MessageChannel<\"u\"?(No=new MessageChannel,Cu=No.port2,No.port1.onmessage=Io,An=function(){Cu.postMessage(null)}):An=function(){Tu(Io,0)};var No,Cu;function Ao(e){Wr=e,Kr||(Kr=!0,An())}function Mo(e,t){Dn=Tu(function(){e(R.unstable_now())},t)}R.unstable_IdlePriority=5;R.unstable_ImmediatePriority=1;R.unstable_LowPriority=4;R.unstable_NormalPriority=3;R.unstable_Profiling=null;R.unstable_UserBlockingPriority=2;R.unstable_cancelCallback=function(e){e.callback=null};R.unstable_continueExecution=function(){It||Qr||(It=!0,Ao(Lo))};R.unstable_forceFrameRate=function(e){0>e||125<e?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):Iu=0<e?Math.floor(1e3/e):5};R.unstable_getCurrentPriorityLevel=function(){return J};R.unstable_getFirstCallbackNode=function(){return Te(Me)};R.unstable_next=function(e){switch(J){case 1:case 2:case 3:var t=3;break;default:t=J}var n=J;J=t;try{return e()}finally{J=n}};R.unstable_pauseExecution=function(){};R.unstable_requestPaint=function(){};R.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=J;J=e;try{return t()}finally{J=n}};R.unstable_scheduleCallback=function(e,t,n){var r=R.unstable_now();switch(typeof n==\"object\"&&n!==null?(n=n.delay,n=typeof n==\"number\"&&0<n?r+n:r):n=r,e){case 1:var i=-1;break;case 2:i=250;break;case 5:i=1073741823;break;case 4:i=1e4;break;default:i=5e3}return i=n+i,e={id:Pp++,callback:t,priorityLevel:e,startTime:n,expirationTime:i,sortIndex:-1},n>r?(e.sortIndex=n,zo(nt,e),Te(Me)===null&&e===Te(nt)&&(Mn?(Pu(Dn),Dn=-1):Mn=!0,Mo(Oo,n-r))):(e.sortIndex=i,zo(Me,e),It||Qr||(It=!0,Ao(Lo))),e};R.unstable_shouldYield=zu;R.unstable_wrapCallback=function(e){var t=J;return function(){var n=J;J=t;try{return e.apply(this,arguments)}finally{J=n}}}});var Lu=Ce((py,Ou)=>{\"use strict\";Ou.exports=Ru()});var Uf=Ce(ye=>{\"use strict\";var Ua=tt(),me=Lu();function g(e){for(var t=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+e,n=1;n<arguments.length;n++)t+=\"&args[]=\"+encodeURIComponent(arguments[n]);return\"Minified React error #\"+e+\"; visit \"+t+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}var Va=new Set,ir={};function Vt(e,t){vn(e,t),vn(e+\"Capture\",t)}function vn(e,t){for(ir[e]=t,e=0;e<t.length;e++)Va.add(t[e])}var Xe=!(typeof window>\"u\"||typeof window.document>\"u\"||typeof window.document.createElement>\"u\"),is=Object.prototype.hasOwnProperty,Ip=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,Au={},Mu={};function Np(e){return is.call(Mu,e)?!0:is.call(Au,e)?!1:Ip.test(e)?Mu[e]=!0:(Au[e]=!0,!1)}function zp(e,t,n,r){if(n!==null&&n.type===0)return!1;switch(typeof t){case\"function\":case\"symbol\":return!0;case\"boolean\":return r?!1:n!==null?!n.acceptsBooleans:(e=e.toLowerCase().slice(0,5),e!==\"data-\"&&e!==\"aria-\");default:return!1}}function Rp(e,t,n,r){if(t===null||typeof t>\"u\"||zp(e,t,n,r))return!0;if(r)return!1;if(n!==null)switch(n.type){case 3:return!t;case 4:return t===!1;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}function oe(e,t,n,r,i,o,s){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=s}var G={};\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function(e){G[e]=new oe(e,0,!1,e,null,!1,!1)});[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach(function(e){var t=e[0];G[t]=new oe(t,1,!1,e[1],null,!1,!1)});[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach(function(e){G[e]=new oe(e,2,!1,e.toLowerCase(),null,!1,!1)});[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach(function(e){G[e]=new oe(e,2,!1,e,null,!1,!1)});\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function(e){G[e]=new oe(e,3,!1,e.toLowerCase(),null,!1,!1)});[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach(function(e){G[e]=new oe(e,3,!0,e,null,!1,!1)});[\"capture\",\"download\"].forEach(function(e){G[e]=new oe(e,4,!1,e,null,!1,!1)});[\"cols\",\"rows\",\"size\",\"span\"].forEach(function(e){G[e]=new oe(e,6,!1,e,null,!1,!1)});[\"rowSpan\",\"start\"].forEach(function(e){G[e]=new oe(e,5,!1,e.toLowerCase(),null,!1,!1)});var Js=/[\\-:]([a-z])/g;function Zs(e){return e[1].toUpperCase()}\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function(e){var t=e.replace(Js,Zs);G[t]=new oe(t,1,!1,e,null,!1,!1)});\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function(e){var t=e.replace(Js,Zs);G[t]=new oe(t,1,!1,e,\"http://www.w3.org/1999/xlink\",!1,!1)});[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach(function(e){var t=e.replace(Js,Zs);G[t]=new oe(t,1,!1,e,\"http://www.w3.org/XML/1998/namespace\",!1,!1)});[\"tabIndex\",\"crossOrigin\"].forEach(function(e){G[e]=new oe(e,1,!1,e.toLowerCase(),null,!1,!1)});G.xlinkHref=new oe(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0,!1);[\"src\",\"href\",\"action\",\"formAction\"].forEach(function(e){G[e]=new oe(e,1,!1,e.toLowerCase(),null,!0,!0)});function qs(e,t,n,r){var i=G.hasOwnProperty(t)?G[t]:null;(i!==null?i.type!==0:r||!(2<t.length)||t[0]!==\"o\"&&t[0]!==\"O\"||t[1]!==\"n\"&&t[1]!==\"N\")&&(Rp(t,n,i,r)&&(n=null),r||i===null?Np(t)&&(n===null?e.removeAttribute(t):e.setAttribute(t,\"\"+n)):i.mustUseProperty?e[i.propertyName]=n===null?i.type===3?!1:\"\":n:(t=i.attributeName,r=i.attributeNamespace,n===null?e.removeAttribute(t):(i=i.type,n=i===3||i===4&&n===!0?\"\":\"\"+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}var Ze=Ua.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Xr=Symbol.for(\"react.element\"),Zt=Symbol.for(\"react.portal\"),qt=Symbol.for(\"react.fragment\"),bs=Symbol.for(\"react.strict_mode\"),os=Symbol.for(\"react.profiler\"),Ba=Symbol.for(\"react.provider\"),Wa=Symbol.for(\"react.context\"),el=Symbol.for(\"react.forward_ref\"),ss=Symbol.for(\"react.suspense\"),ls=Symbol.for(\"react.suspense_list\"),tl=Symbol.for(\"react.memo\"),it=Symbol.for(\"react.lazy\");Symbol.for(\"react.scope\");Symbol.for(\"react.debug_trace_mode\");var Ha=Symbol.for(\"react.offscreen\");Symbol.for(\"react.legacy_hidden\");Symbol.for(\"react.cache\");Symbol.for(\"react.tracing_marker\");var Du=Symbol.iterator;function jn(e){return e===null||typeof e!=\"object\"?null:(e=Du&&e[Du]||e[\"@@iterator\"],typeof e==\"function\"?e:null)}var $=Object.assign,Do;function Qn(e){if(Do===void 0)try{throw Error()}catch(n){var t=n.stack.trim().match(/\\n( *(at )?)/);Do=t&&t[1]||\"\"}return`\n`+Do+e}var jo=!1;function $o(e,t){if(!e||jo)return\"\";jo=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,\"props\",{set:function(){throw Error()}}),typeof Reflect==\"object\"&&Reflect.construct){try{Reflect.construct(t,[])}catch(a){var r=a}Reflect.construct(e,[],t)}else{try{t.call()}catch(a){r=a}e.call(t.prototype)}else{try{throw Error()}catch(a){r=a}e()}}catch(a){if(a&&r&&typeof a.stack==\"string\"){for(var i=a.stack.split(`\n`),o=r.stack.split(`\n`),s=i.length-1,l=o.length-1;1<=s&&0<=l&&i[s]!==o[l];)l--;for(;1<=s&&0<=l;s--,l--)if(i[s]!==o[l]){if(s!==1||l!==1)do if(s--,l--,0>l||i[s]!==o[l]){var u=`\n`+i[s].replace(\" at new \",\" at \");return e.displayName&&u.includes(\"<anonymous>\")&&(u=u.replace(\"<anonymous>\",e.displayName)),u}while(1<=s&&0<=l);break}}}finally{jo=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:\"\")?Qn(e):\"\"}function Op(e){switch(e.tag){case 5:return Qn(e.type);case 16:return Qn(\"Lazy\");case 13:return Qn(\"Suspense\");case 19:return Qn(\"SuspenseList\");case 0:case 2:case 15:return e=$o(e.type,!1),e;case 11:return e=$o(e.type.render,!1),e;case 1:return e=$o(e.type,!0),e;default:return\"\"}}function us(e){if(e==null)return null;if(typeof e==\"function\")return e.displayName||e.name||null;if(typeof e==\"string\")return e;switch(e){case qt:return\"Fragment\";case Zt:return\"Portal\";case os:return\"Profiler\";case bs:return\"StrictMode\";case ss:return\"Suspense\";case ls:return\"SuspenseList\"}if(typeof e==\"object\")switch(e.$$typeof){case Wa:return(e.displayName||\"Context\")+\".Consumer\";case Ba:return(e._context.displayName||\"Context\")+\".Provider\";case el:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||\"\",e=e!==\"\"?\"ForwardRef(\"+e+\")\":\"ForwardRef\"),e;case tl:return t=e.displayName||null,t!==null?t:us(e.type)||\"Memo\";case it:t=e._payload,e=e._init;try{return us(e(t))}catch{}}return null}function Lp(e){var t=e.type;switch(e.tag){case 24:return\"Cache\";case 9:return(t.displayName||\"Context\")+\".Consumer\";case 10:return(t._context.displayName||\"Context\")+\".Provider\";case 18:return\"DehydratedFragment\";case 11:return e=t.render,e=e.displayName||e.name||\"\",t.displayName||(e!==\"\"?\"ForwardRef(\"+e+\")\":\"ForwardRef\");case 7:return\"Fragment\";case 5:return t;case 4:return\"Portal\";case 3:return\"Root\";case 6:return\"Text\";case 16:return us(t);case 8:return t===bs?\"StrictMode\":\"Mode\";case 22:return\"Offscreen\";case 12:return\"Profiler\";case 21:return\"Scope\";case 13:return\"Suspense\";case 19:return\"SuspenseList\";case 25:return\"TracingMarker\";case 1:case 0:case 17:case 2:case 14:case 15:if(typeof t==\"function\")return t.displayName||t.name||null;if(typeof t==\"string\")return t}return null}function gt(e){switch(typeof e){case\"boolean\":case\"number\":case\"string\":case\"undefined\":return e;case\"object\":return e;default:return\"\"}}function Qa(e){var t=e.type;return(e=e.nodeName)&&e.toLowerCase()===\"input\"&&(t===\"checkbox\"||t===\"radio\")}function Ap(e){var t=Qa(e)?\"checked\":\"value\",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=\"\"+e[t];if(!e.hasOwnProperty(t)&&typeof n<\"u\"&&typeof n.get==\"function\"&&typeof n.set==\"function\"){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(s){r=\"\"+s,o.call(this,s)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(s){r=\"\"+s},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}function Yr(e){e._valueTracker||(e._valueTracker=Ap(e))}function Ka(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r=\"\";return e&&(r=Qa(e)?e.checked?\"true\":\"false\":e.value),e=r,e!==n?(t.setValue(e),!0):!1}function ki(e){if(e=e||(typeof document<\"u\"?document:void 0),typeof e>\"u\")return null;try{return e.activeElement||e.body}catch{return e.body}}function as(e,t){var n=t.checked;return $({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:n??e._wrapperState.initialChecked})}function ju(e,t){var n=t.defaultValue==null?\"\":t.defaultValue,r=t.checked!=null?t.checked:t.defaultChecked;n=gt(t.value!=null?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:t.type===\"checkbox\"||t.type===\"radio\"?t.checked!=null:t.value!=null}}function Xa(e,t){t=t.checked,t!=null&&qs(e,\"checked\",t,!1)}function cs(e,t){Xa(e,t);var n=gt(t.value),r=t.type;if(n!=null)r===\"number\"?(n===0&&e.value===\"\"||e.value!=n)&&(e.value=\"\"+n):e.value!==\"\"+n&&(e.value=\"\"+n);else if(r===\"submit\"||r===\"reset\"){e.removeAttribute(\"value\");return}t.hasOwnProperty(\"value\")?fs(e,t.type,n):t.hasOwnProperty(\"defaultValue\")&&fs(e,t.type,gt(t.defaultValue)),t.checked==null&&t.defaultChecked!=null&&(e.defaultChecked=!!t.defaultChecked)}function $u(e,t,n){if(t.hasOwnProperty(\"value\")||t.hasOwnProperty(\"defaultValue\")){var r=t.type;if(!(r!==\"submit\"&&r!==\"reset\"||t.value!==void 0&&t.value!==null))return;t=\"\"+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}n=e.name,n!==\"\"&&(e.name=\"\"),e.defaultChecked=!!e._wrapperState.initialChecked,n!==\"\"&&(e.name=n)}function fs(e,t,n){(t!==\"number\"||ki(e.ownerDocument)!==e)&&(n==null?e.defaultValue=\"\"+e._wrapperState.initialValue:e.defaultValue!==\"\"+n&&(e.defaultValue=\"\"+n))}var Kn=Array.isArray;function cn(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t[\"$\"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty(\"$\"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=\"\"+gt(n),t=null,i=0;i<e.length;i++){if(e[i].value===n){e[i].selected=!0,r&&(e[i].defaultSelected=!0);return}t!==null||e[i].disabled||(t=e[i])}t!==null&&(t.selected=!0)}}function ds(e,t){if(t.dangerouslySetInnerHTML!=null)throw Error(g(91));return $({},t,{value:void 0,defaultValue:void 0,children:\"\"+e._wrapperState.initialValue})}function Fu(e,t){var n=t.value;if(n==null){if(n=t.children,t=t.defaultValue,n!=null){if(t!=null)throw Error(g(92));if(Kn(n)){if(1<n.length)throw Error(g(93));n=n[0]}t=n}t==null&&(t=\"\"),n=t}e._wrapperState={initialValue:gt(n)}}function Ya(e,t){var n=gt(t.value),r=gt(t.defaultValue);n!=null&&(n=\"\"+n,n!==e.value&&(e.value=n),t.defaultValue==null&&e.defaultValue!==n&&(e.defaultValue=n)),r!=null&&(e.defaultValue=\"\"+r)}function Uu(e){var t=e.textContent;t===e._wrapperState.initialValue&&t!==\"\"&&t!==null&&(e.value=t)}function Ga(e){switch(e){case\"svg\":return\"http://www.w3.org/2000/svg\";case\"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}function ps(e,t){return e==null||e===\"http://www.w3.org/1999/xhtml\"?Ga(t):e===\"http://www.w3.org/2000/svg\"&&t===\"foreignObject\"?\"http://www.w3.org/1999/xhtml\":e}var Gr,Ja=function(e){return typeof MSApp<\"u\"&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction(function(){return e(t,n,r,i)})}:e}(function(e,t){if(e.namespaceURI!==\"http://www.w3.org/2000/svg\"||\"innerHTML\"in e)e.innerHTML=t;else{for(Gr=Gr||document.createElement(\"div\"),Gr.innerHTML=\"<svg>\"+t.valueOf().toString()+\"</svg>\",t=Gr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function or(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&n.nodeType===3){n.nodeValue=t;return}}e.textContent=t}var Gn={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Mp=[\"Webkit\",\"ms\",\"Moz\",\"O\"];Object.keys(Gn).forEach(function(e){Mp.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Gn[t]=Gn[e]})});function Za(e,t,n){return t==null||typeof t==\"boolean\"||t===\"\"?\"\":n||typeof t!=\"number\"||t===0||Gn.hasOwnProperty(e)&&Gn[e]?(\"\"+t).trim():t+\"px\"}function qa(e,t){e=e.style;for(var n in t)if(t.hasOwnProperty(n)){var r=n.indexOf(\"--\")===0,i=Za(n,t[n],r);n===\"float\"&&(n=\"cssFloat\"),r?e.setProperty(n,i):e[n]=i}}var Dp=$({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function hs(e,t){if(t){if(Dp[e]&&(t.children!=null||t.dangerouslySetInnerHTML!=null))throw Error(g(137,e));if(t.dangerouslySetInnerHTML!=null){if(t.children!=null)throw Error(g(60));if(typeof t.dangerouslySetInnerHTML!=\"object\"||!(\"__html\"in t.dangerouslySetInnerHTML))throw Error(g(61))}if(t.style!=null&&typeof t.style!=\"object\")throw Error(g(62))}}function ms(e,t){if(e.indexOf(\"-\")===-1)return typeof t.is==\"string\";switch(e){case\"annotation-xml\":case\"color-profile\":case\"font-face\":case\"font-face-src\":case\"font-face-uri\":case\"font-face-format\":case\"font-face-name\":case\"missing-glyph\":return!1;default:return!0}}var vs=null;function nl(e){return e=e.target||e.srcElement||window,e.correspondingUseElement&&(e=e.correspondingUseElement),e.nodeType===3?e.parentNode:e}var ys=null,fn=null,dn=null;function Vu(e){if(e=Er(e)){if(typeof ys!=\"function\")throw Error(g(280));var t=e.stateNode;t&&(t=Ji(t),ys(e.stateNode,e.type,t))}}function ba(e){fn?dn?dn.push(e):dn=[e]:fn=e}function ec(){if(fn){var e=fn,t=dn;if(dn=fn=null,Vu(e),t)for(e=0;e<t.length;e++)Vu(t[e])}}function tc(e,t){return e(t)}function nc(){}var Fo=!1;function rc(e,t,n){if(Fo)return e(t,n);Fo=!0;try{return tc(e,t,n)}finally{Fo=!1,(fn!==null||dn!==null)&&(nc(),ec())}}function sr(e,t){var n=e.stateNode;if(n===null)return null;var r=Ji(n);if(r===null)return null;n=r[t];e:switch(t){case\"onClick\":case\"onClickCapture\":case\"onDoubleClick\":case\"onDoubleClickCapture\":case\"onMouseDown\":case\"onMouseDownCapture\":case\"onMouseMove\":case\"onMouseMoveCapture\":case\"onMouseUp\":case\"onMouseUpCapture\":case\"onMouseEnter\":(r=!r.disabled)||(e=e.type,r=!(e===\"button\"||e===\"input\"||e===\"select\"||e===\"textarea\")),e=!r;break e;default:e=!1}if(e)return null;if(n&&typeof n!=\"function\")throw Error(g(231,t,typeof n));return n}var gs=!1;if(Xe)try{Gt={},Object.defineProperty(Gt,\"passive\",{get:function(){gs=!0}}),window.addEventListener(\"test\",Gt,Gt),window.removeEventListener(\"test\",Gt,Gt)}catch{gs=!1}var Gt;function jp(e,t,n,r,i,o,s,l,u){var a=Array.prototype.slice.call(arguments,3);try{t.apply(n,a)}catch(p){this.onError(p)}}var Jn=!1,Ei=null,xi=!1,Ss=null,$p={onError:function(e){Jn=!0,Ei=e}};function Fp(e,t,n,r,i,o,s,l,u){Jn=!1,Ei=null,jp.apply($p,arguments)}function Up(e,t,n,r,i,o,s,l,u){if(Fp.apply(this,arguments),Jn){if(Jn){var a=Ei;Jn=!1,Ei=null}else throw Error(g(198));xi||(xi=!0,Ss=a)}}function Bt(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do t=e,t.flags&4098&&(n=t.return),e=t.return;while(e)}return t.tag===3?n:null}function ic(e){if(e.tag===13){var t=e.memoizedState;if(t===null&&(e=e.alternate,e!==null&&(t=e.memoizedState)),t!==null)return t.dehydrated}return null}function Bu(e){if(Bt(e)!==e)throw Error(g(188))}function Vp(e){var t=e.alternate;if(!t){if(t=Bt(e),t===null)throw Error(g(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(i===null)break;var o=i.alternate;if(o===null){if(r=i.return,r!==null){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return Bu(i),e;if(o===r)return Bu(i),t;o=o.sibling}throw Error(g(188))}if(n.return!==r.return)n=i,r=o;else{for(var s=!1,l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}if(!s){for(l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s)throw Error(g(189))}}if(n.alternate!==r)throw Error(g(190))}if(n.tag!==3)throw Error(g(188));return n.stateNode.current===n?e:t}function oc(e){return e=Vp(e),e!==null?sc(e):null}function sc(e){if(e.tag===5||e.tag===6)return e;for(e=e.child;e!==null;){var t=sc(e);if(t!==null)return t;e=e.sibling}return null}var lc=me.unstable_scheduleCallback,Wu=me.unstable_cancelCallback,Bp=me.unstable_shouldYield,Wp=me.unstable_requestPaint,U=me.unstable_now,Hp=me.unstable_getCurrentPriorityLevel,rl=me.unstable_ImmediatePriority,uc=me.unstable_UserBlockingPriority,Ci=me.unstable_NormalPriority,Qp=me.unstable_LowPriority,ac=me.unstable_IdlePriority,Ki=null,Fe=null;function Kp(e){if(Fe&&typeof Fe.onCommitFiberRoot==\"function\")try{Fe.onCommitFiberRoot(Ki,e,void 0,(e.current.flags&128)===128)}catch{}}var Re=Math.clz32?Math.clz32:Gp,Xp=Math.log,Yp=Math.LN2;function Gp(e){return e>>>=0,e===0?32:31-(Xp(e)/Yp|0)|0}var Jr=64,Zr=4194304;function Xn(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return e&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return e&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function Ti(e,t){var n=e.pendingLanes;if(n===0)return 0;var r=0,i=e.suspendedLanes,o=e.pingedLanes,s=n&268435455;if(s!==0){var l=s&~i;l!==0?r=Xn(l):(o&=s,o!==0&&(r=Xn(o)))}else s=n&~i,s!==0?r=Xn(s):o!==0&&(r=Xn(o));if(r===0)return 0;if(t!==0&&t!==r&&!(t&i)&&(i=r&-r,o=t&-t,i>=o||i===16&&(o&4194240)!==0))return t;if(r&4&&(r|=n&16),t=e.entangledLanes,t!==0)for(e=e.entanglements,t&=r;0<t;)n=31-Re(t),i=1<<n,r|=e[n],t&=~i;return r}function Jp(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}function Zp(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,o=e.pendingLanes;0<o;){var s=31-Re(o),l=1<<s,u=i[s];u===-1?(!(l&n)||l&r)&&(i[s]=Jp(l,t)):u<=t&&(e.expiredLanes|=l),o&=~l}}function ws(e){return e=e.pendingLanes&-1073741825,e!==0?e:e&1073741824?1073741824:0}function cc(){var e=Jr;return Jr<<=1,!(Jr&4194240)&&(Jr=64),e}function Uo(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function _r(e,t,n){e.pendingLanes|=t,t!==536870912&&(e.suspendedLanes=0,e.pingedLanes=0),e=e.eventTimes,t=31-Re(t),e[t]=n}function qp(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var i=31-Re(n),o=1<<i;t[i]=0,r[i]=-1,e[i]=-1,n&=~o}}function il(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-Re(n),i=1<<r;i&t|e[r]&t&&(e[r]|=t),n&=~i}}var z=0;function fc(e){return e&=-e,1<e?4<e?e&268435455?16:536870912:4:1}var dc,ol,pc,hc,mc,_s=!1,qr=[],ct=null,ft=null,dt=null,lr=new Map,ur=new Map,st=[],bp=\"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit\".split(\" \");function Hu(e,t){switch(e){case\"focusin\":case\"focusout\":ct=null;break;case\"dragenter\":case\"dragleave\":ft=null;break;case\"mouseover\":case\"mouseout\":dt=null;break;case\"pointerover\":case\"pointerout\":lr.delete(t.pointerId);break;case\"gotpointercapture\":case\"lostpointercapture\":ur.delete(t.pointerId)}}function $n(e,t,n,r,i,o){return e===null||e.nativeEvent!==o?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:o,targetContainers:[i]},t!==null&&(t=Er(t),t!==null&&ol(t)),e):(e.eventSystemFlags|=r,t=e.targetContainers,i!==null&&t.indexOf(i)===-1&&t.push(i),e)}function eh(e,t,n,r,i){switch(t){case\"focusin\":return ct=$n(ct,e,t,n,r,i),!0;case\"dragenter\":return ft=$n(ft,e,t,n,r,i),!0;case\"mouseover\":return dt=$n(dt,e,t,n,r,i),!0;case\"pointerover\":var o=i.pointerId;return lr.set(o,$n(lr.get(o)||null,e,t,n,r,i)),!0;case\"gotpointercapture\":return o=i.pointerId,ur.set(o,$n(ur.get(o)||null,e,t,n,r,i)),!0}return!1}function vc(e){var t=Rt(e.target);if(t!==null){var n=Bt(t);if(n!==null){if(t=n.tag,t===13){if(t=ic(n),t!==null){e.blockedOn=t,mc(e.priority,function(){pc(n)});return}}else if(t===3&&n.stateNode.current.memoizedState.isDehydrated){e.blockedOn=n.tag===3?n.stateNode.containerInfo:null;return}}}e.blockedOn=null}function di(e){if(e.blockedOn!==null)return!1;for(var t=e.targetContainers;0<t.length;){var n=ks(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(n===null){n=e.nativeEvent;var r=new n.constructor(n.type,n);vs=r,n.target.dispatchEvent(r),vs=null}else return t=Er(n),t!==null&&ol(t),e.blockedOn=n,!1;t.shift()}return!0}function Qu(e,t,n){di(e)&&n.delete(t)}function th(){_s=!1,ct!==null&&di(ct)&&(ct=null),ft!==null&&di(ft)&&(ft=null),dt!==null&&di(dt)&&(dt=null),lr.forEach(Qu),ur.forEach(Qu)}function Fn(e,t){e.blockedOn===t&&(e.blockedOn=null,_s||(_s=!0,me.unstable_scheduleCallback(me.unstable_NormalPriority,th)))}function ar(e){function t(i){return Fn(i,e)}if(0<qr.length){Fn(qr[0],e);for(var n=1;n<qr.length;n++){var r=qr[n];r.blockedOn===e&&(r.blockedOn=null)}}for(ct!==null&&Fn(ct,e),ft!==null&&Fn(ft,e),dt!==null&&Fn(dt,e),lr.forEach(t),ur.forEach(t),n=0;n<st.length;n++)r=st[n],r.blockedOn===e&&(r.blockedOn=null);for(;0<st.length&&(n=st[0],n.blockedOn===null);)vc(n),n.blockedOn===null&&st.shift()}var pn=Ze.ReactCurrentBatchConfig,Pi=!0;function nh(e,t,n,r){var i=z,o=pn.transition;pn.transition=null;try{z=1,sl(e,t,n,r)}finally{z=i,pn.transition=o}}function rh(e,t,n,r){var i=z,o=pn.transition;pn.transition=null;try{z=4,sl(e,t,n,r)}finally{z=i,pn.transition=o}}function sl(e,t,n,r){if(Pi){var i=ks(e,t,n,r);if(i===null)Xo(e,t,r,Ii,n),Hu(e,r);else if(eh(i,e,t,n,r))r.stopPropagation();else if(Hu(e,r),t&4&&-1<bp.indexOf(e)){for(;i!==null;){var o=Er(i);if(o!==null&&dc(o),o=ks(e,t,n,r),o===null&&Xo(e,t,r,Ii,n),o===i)break;i=o}i!==null&&r.stopPropagation()}else Xo(e,t,r,null,n)}}var Ii=null;function ks(e,t,n,r){if(Ii=null,e=nl(r),e=Rt(e),e!==null)if(t=Bt(e),t===null)e=null;else if(n=t.tag,n===13){if(e=ic(t),e!==null)return e;e=null}else if(n===3){if(t.stateNode.current.memoizedState.isDehydrated)return t.tag===3?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Ii=e,null}function yc(e){switch(e){case\"cancel\":case\"click\":case\"close\":case\"contextmenu\":case\"copy\":case\"cut\":case\"auxclick\":case\"dblclick\":case\"dragend\":case\"dragstart\":case\"drop\":case\"focusin\":case\"focusout\":case\"input\":case\"invalid\":case\"keydown\":case\"keypress\":case\"keyup\":case\"mousedown\":case\"mouseup\":case\"paste\":case\"pause\":case\"play\":case\"pointercancel\":case\"pointerdown\":case\"pointerup\":case\"ratechange\":case\"reset\":case\"resize\":case\"seeked\":case\"submit\":case\"touchcancel\":case\"touchend\":case\"touchstart\":case\"volumechange\":case\"change\":case\"selectionchange\":case\"textInput\":case\"compositionstart\":case\"compositionend\":case\"compositionupdate\":case\"beforeblur\":case\"afterblur\":case\"beforeinput\":case\"blur\":case\"fullscreenchange\":case\"focus\":case\"hashchange\":case\"popstate\":case\"select\":case\"selectstart\":return 1;case\"drag\":case\"dragenter\":case\"dragexit\":case\"dragleave\":case\"dragover\":case\"mousemove\":case\"mouseout\":case\"mouseover\":case\"pointermove\":case\"pointerout\":case\"pointerover\":case\"scroll\":case\"toggle\":case\"touchmove\":case\"wheel\":case\"mouseenter\":case\"mouseleave\":case\"pointerenter\":case\"pointerleave\":return 4;case\"message\":switch(Hp()){case rl:return 1;case uc:return 4;case Ci:case Qp:return 16;case ac:return 536870912;default:return 16}default:return 16}}var ut=null,ll=null,pi=null;function gc(){if(pi)return pi;var e,t=ll,n=t.length,r,i=\"value\"in ut?ut.value:ut.textContent,o=i.length;for(e=0;e<n&&t[e]===i[e];e++);var s=n-e;for(r=1;r<=s&&t[n-r]===i[o-r];r++);return pi=i.slice(e,1<r?1-r:void 0)}function hi(e){var t=e.keyCode;return\"charCode\"in e?(e=e.charCode,e===0&&t===13&&(e=13)):e=t,e===10&&(e=13),32<=e||e===13?e:0}function br(){return!0}function Ku(){return!1}function ve(e){function t(n,r,i,o,s){this._reactName=n,this._targetInst=i,this.type=r,this.nativeEvent=o,this.target=s,this.currentTarget=null;for(var l in e)e.hasOwnProperty(l)&&(n=e[l],this[l]=n?n(o):o[l]);return this.isDefaultPrevented=(o.defaultPrevented!=null?o.defaultPrevented:o.returnValue===!1)?br:Ku,this.isPropagationStopped=Ku,this}return $(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var n=this.nativeEvent;n&&(n.preventDefault?n.preventDefault():typeof n.returnValue!=\"unknown\"&&(n.returnValue=!1),this.isDefaultPrevented=br)},stopPropagation:function(){var n=this.nativeEvent;n&&(n.stopPropagation?n.stopPropagation():typeof n.cancelBubble!=\"unknown\"&&(n.cancelBubble=!0),this.isPropagationStopped=br)},persist:function(){},isPersistent:br}),t}var En={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},ul=ve(En),kr=$({},En,{view:0,detail:0}),ih=ve(kr),Vo,Bo,Un,Xi=$({},kr,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:al,button:0,buttons:0,relatedTarget:function(e){return e.relatedTarget===void 0?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return\"movementX\"in e?e.movementX:(e!==Un&&(Un&&e.type===\"mousemove\"?(Vo=e.screenX-Un.screenX,Bo=e.screenY-Un.screenY):Bo=Vo=0,Un=e),Vo)},movementY:function(e){return\"movementY\"in e?e.movementY:Bo}}),Xu=ve(Xi),oh=$({},Xi,{dataTransfer:0}),sh=ve(oh),lh=$({},kr,{relatedTarget:0}),Wo=ve(lh),uh=$({},En,{animationName:0,elapsedTime:0,pseudoElement:0}),ah=ve(uh),ch=$({},En,{clipboardData:function(e){return\"clipboardData\"in e?e.clipboardData:window.clipboardData}}),fh=ve(ch),dh=$({},En,{data:0}),Yu=ve(dh),ph={Esc:\"Escape\",Spacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},hh={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",116:\"F5\",117:\"F6\",118:\"F7\",119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"},mh={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function vh(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):(e=mh[e])?!!t[e]:!1}function al(){return vh}var yh=$({},kr,{key:function(e){if(e.key){var t=ph[e.key]||e.key;if(t!==\"Unidentified\")return t}return e.type===\"keypress\"?(e=hi(e),e===13?\"Enter\":String.fromCharCode(e)):e.type===\"keydown\"||e.type===\"keyup\"?hh[e.keyCode]||\"Unidentified\":\"\"},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:al,charCode:function(e){return e.type===\"keypress\"?hi(e):0},keyCode:function(e){return e.type===\"keydown\"||e.type===\"keyup\"?e.keyCode:0},which:function(e){return e.type===\"keypress\"?hi(e):e.type===\"keydown\"||e.type===\"keyup\"?e.keyCode:0}}),gh=ve(yh),Sh=$({},Xi,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Gu=ve(Sh),wh=$({},kr,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:al}),_h=ve(wh),kh=$({},En,{propertyName:0,elapsedTime:0,pseudoElement:0}),Eh=ve(kh),xh=$({},Xi,{deltaX:function(e){return\"deltaX\"in e?e.deltaX:\"wheelDeltaX\"in e?-e.wheelDeltaX:0},deltaY:function(e){return\"deltaY\"in e?e.deltaY:\"wheelDeltaY\"in e?-e.wheelDeltaY:\"wheelDelta\"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Ch=ve(xh),Th=[9,13,27,32],cl=Xe&&\"CompositionEvent\"in window,Zn=null;Xe&&\"documentMode\"in document&&(Zn=document.documentMode);var Ph=Xe&&\"TextEvent\"in window&&!Zn,Sc=Xe&&(!cl||Zn&&8<Zn&&11>=Zn),Ju=\" \",Zu=!1;function wc(e,t){switch(e){case\"keyup\":return Th.indexOf(t.keyCode)!==-1;case\"keydown\":return t.keyCode!==229;case\"keypress\":case\"mousedown\":case\"focusout\":return!0;default:return!1}}function _c(e){return e=e.detail,typeof e==\"object\"&&\"data\"in e?e.data:null}var bt=!1;function Ih(e,t){switch(e){case\"compositionend\":return _c(t);case\"keypress\":return t.which!==32?null:(Zu=!0,Ju);case\"textInput\":return e=t.data,e===Ju&&Zu?null:e;default:return null}}function Nh(e,t){if(bt)return e===\"compositionend\"||!cl&&wc(e,t)?(e=gc(),pi=ll=ut=null,bt=!1,e):null;switch(e){case\"paste\":return null;case\"keypress\":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case\"compositionend\":return Sc&&t.locale!==\"ko\"?null:t.data;default:return null}}var zh={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function qu(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t===\"input\"?!!zh[e.type]:t===\"textarea\"}function kc(e,t,n,r){ba(r),t=Ni(t,\"onChange\"),0<t.length&&(n=new ul(\"onChange\",\"change\",null,n,r),e.push({event:n,listeners:t}))}var qn=null,cr=null;function Rh(e){Lc(e,0)}function Yi(e){var t=nn(e);if(Ka(t))return e}function Oh(e,t){if(e===\"change\")return t}var Ec=!1;Xe&&(Xe?(ti=\"oninput\"in document,ti||(Ho=document.createElement(\"div\"),Ho.setAttribute(\"oninput\",\"return;\"),ti=typeof Ho.oninput==\"function\"),ei=ti):ei=!1,Ec=ei&&(!document.documentMode||9<document.documentMode));var ei,ti,Ho;function bu(){qn&&(qn.detachEvent(\"onpropertychange\",xc),cr=qn=null)}function xc(e){if(e.propertyName===\"value\"&&Yi(cr)){var t=[];kc(t,cr,e,nl(e)),rc(Rh,t)}}function Lh(e,t,n){e===\"focusin\"?(bu(),qn=t,cr=n,qn.attachEvent(\"onpropertychange\",xc)):e===\"focusout\"&&bu()}function Ah(e){if(e===\"selectionchange\"||e===\"keyup\"||e===\"keydown\")return Yi(cr)}function Mh(e,t){if(e===\"click\")return Yi(t)}function Dh(e,t){if(e===\"input\"||e===\"change\")return Yi(t)}function jh(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var Le=typeof Object.is==\"function\"?Object.is:jh;function fr(e,t){if(Le(e,t))return!0;if(typeof e!=\"object\"||e===null||typeof t!=\"object\"||t===null)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!is.call(t,i)||!Le(e[i],t[i]))return!1}return!0}function ea(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ta(e,t){var n=ea(e);e=0;for(var r;n;){if(n.nodeType===3){if(r=e+n.textContent.length,e<=t&&r>=t)return{node:n,offset:t-e};e=r}e:{for(;n;){if(n.nextSibling){n=n.nextSibling;break e}n=n.parentNode}n=void 0}n=ea(n)}}function Cc(e,t){return e&&t?e===t?!0:e&&e.nodeType===3?!1:t&&t.nodeType===3?Cc(e,t.parentNode):\"contains\"in e?e.contains(t):e.compareDocumentPosition?!!(e.compareDocumentPosition(t)&16):!1:!1}function Tc(){for(var e=window,t=ki();t instanceof e.HTMLIFrameElement;){try{var n=typeof t.contentWindow.location.href==\"string\"}catch{n=!1}if(n)e=t.contentWindow;else break;t=ki(e.document)}return t}function fl(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&(t===\"input\"&&(e.type===\"text\"||e.type===\"search\"||e.type===\"tel\"||e.type===\"url\"||e.type===\"password\")||t===\"textarea\"||e.contentEditable===\"true\")}function $h(e){var t=Tc(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&Cc(n.ownerDocument.documentElement,n)){if(r!==null&&fl(n)){if(t=r.start,e=r.end,e===void 0&&(e=t),\"selectionStart\"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(e=(t=n.ownerDocument||document)&&t.defaultView||window,e.getSelection){e=e.getSelection();var i=n.textContent.length,o=Math.min(r.start,i);r=r.end===void 0?o:Math.min(r.end,i),!e.extend&&o>r&&(i=r,r=o,o=i),i=ta(n,o);var s=ta(n,r);i&&s&&(e.rangeCount!==1||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==s.node||e.focusOffset!==s.offset)&&(t=t.createRange(),t.setStart(i.node,i.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(s.node,s.offset)):(t.setEnd(s.node,s.offset),e.addRange(t)))}}for(t=[],e=n;e=e.parentNode;)e.nodeType===1&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(typeof n.focus==\"function\"&&n.focus(),n=0;n<t.length;n++)e=t[n],e.element.scrollLeft=e.left,e.element.scrollTop=e.top}}var Fh=Xe&&\"documentMode\"in document&&11>=document.documentMode,en=null,Es=null,bn=null,xs=!1;function na(e,t,n){var r=n.window===n?n.document:n.nodeType===9?n:n.ownerDocument;xs||en==null||en!==ki(r)||(r=en,\"selectionStart\"in r&&fl(r)?r={start:r.selectionStart,end:r.selectionEnd}:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection(),r={anchorNode:r.anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset}),bn&&fr(bn,r)||(bn=r,r=Ni(Es,\"onSelect\"),0<r.length&&(t=new ul(\"onSelect\",\"select\",null,t,n),e.push({event:t,listeners:r}),t.target=en)))}function ni(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n[\"Webkit\"+e]=\"webkit\"+t,n[\"Moz\"+e]=\"moz\"+t,n}var tn={animationend:ni(\"Animation\",\"AnimationEnd\"),animationiteration:ni(\"Animation\",\"AnimationIteration\"),animationstart:ni(\"Animation\",\"AnimationStart\"),transitionend:ni(\"Transition\",\"TransitionEnd\")},Qo={},Pc={};Xe&&(Pc=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete tn.animationend.animation,delete tn.animationiteration.animation,delete tn.animationstart.animation),\"TransitionEvent\"in window||delete tn.transitionend.transition);function Gi(e){if(Qo[e])return Qo[e];if(!tn[e])return e;var t=tn[e],n;for(n in t)if(t.hasOwnProperty(n)&&n in Pc)return Qo[e]=t[n];return e}var Ic=Gi(\"animationend\"),Nc=Gi(\"animationiteration\"),zc=Gi(\"animationstart\"),Rc=Gi(\"transitionend\"),Oc=new Map,ra=\"abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel\".split(\" \");function wt(e,t){Oc.set(e,t),Vt(t,[e])}for(ri=0;ri<ra.length;ri++)ii=ra[ri],ia=ii.toLowerCase(),oa=ii[0].toUpperCase()+ii.slice(1),wt(ia,\"on\"+oa);var ii,ia,oa,ri;wt(Ic,\"onAnimationEnd\");wt(Nc,\"onAnimationIteration\");wt(zc,\"onAnimationStart\");wt(\"dblclick\",\"onDoubleClick\");wt(\"focusin\",\"onFocus\");wt(\"focusout\",\"onBlur\");wt(Rc,\"onTransitionEnd\");vn(\"onMouseEnter\",[\"mouseout\",\"mouseover\"]);vn(\"onMouseLeave\",[\"mouseout\",\"mouseover\"]);vn(\"onPointerEnter\",[\"pointerout\",\"pointerover\"]);vn(\"onPointerLeave\",[\"pointerout\",\"pointerover\"]);Vt(\"onChange\",\"change click focusin focusout input keydown keyup selectionchange\".split(\" \"));Vt(\"onSelect\",\"focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange\".split(\" \"));Vt(\"onBeforeInput\",[\"compositionend\",\"keypress\",\"textInput\",\"paste\"]);Vt(\"onCompositionEnd\",\"compositionend focusout keydown keypress keyup mousedown\".split(\" \"));Vt(\"onCompositionStart\",\"compositionstart focusout keydown keypress keyup mousedown\".split(\" \"));Vt(\"onCompositionUpdate\",\"compositionupdate focusout keydown keypress keyup mousedown\".split(\" \"));var Yn=\"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),Uh=new Set(\"cancel close invalid load scroll toggle\".split(\" \").concat(Yn));function sa(e,t,n){var r=e.type||\"unknown-event\";e.currentTarget=n,Up(r,t,void 0,e),e.currentTarget=null}function Lc(e,t){t=(t&4)!==0;for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var s=r.length-1;0<=s;s--){var l=r[s],u=l.instance,a=l.currentTarget;if(l=l.listener,u!==o&&i.isPropagationStopped())break e;sa(i,l,a),o=u}else for(s=0;s<r.length;s++){if(l=r[s],u=l.instance,a=l.currentTarget,l=l.listener,u!==o&&i.isPropagationStopped())break e;sa(i,l,a),o=u}}}if(xi)throw e=Ss,xi=!1,Ss=null,e}function L(e,t){var n=t[Ns];n===void 0&&(n=t[Ns]=new Set);var r=e+\"__bubble\";n.has(r)||(Ac(t,e,2,!1),n.add(r))}function Ko(e,t,n){var r=0;t&&(r|=4),Ac(n,e,r,t)}var oi=\"_reactListening\"+Math.random().toString(36).slice(2);function dr(e){if(!e[oi]){e[oi]=!0,Va.forEach(function(n){n!==\"selectionchange\"&&(Uh.has(n)||Ko(n,!1,e),Ko(n,!0,e))});var t=e.nodeType===9?e:e.ownerDocument;t===null||t[oi]||(t[oi]=!0,Ko(\"selectionchange\",!1,t))}}function Ac(e,t,n,r){switch(yc(t)){case 1:var i=nh;break;case 4:i=rh;break;default:i=sl}n=i.bind(null,t,n,e),i=void 0,!gs||t!==\"touchstart\"&&t!==\"touchmove\"&&t!==\"wheel\"||(i=!0),r?i!==void 0?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):i!==void 0?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Xo(e,t,n,r,i){var o=r;if(!(t&1)&&!(t&2)&&r!==null)e:for(;;){if(r===null)return;var s=r.tag;if(s===3||s===4){var l=r.stateNode.containerInfo;if(l===i||l.nodeType===8&&l.parentNode===i)break;if(s===4)for(s=r.return;s!==null;){var u=s.tag;if((u===3||u===4)&&(u=s.stateNode.containerInfo,u===i||u.nodeType===8&&u.parentNode===i))return;s=s.return}for(;l!==null;){if(s=Rt(l),s===null)return;if(u=s.tag,u===5||u===6){r=o=s;continue e}l=l.parentNode}}r=r.return}rc(function(){var a=o,p=nl(n),f=[];e:{var d=Oc.get(e);if(d!==void 0){var v=ul,y=e;switch(e){case\"keypress\":if(hi(n)===0)break e;case\"keydown\":case\"keyup\":v=gh;break;case\"focusin\":y=\"focus\",v=Wo;break;case\"focusout\":y=\"blur\",v=Wo;break;case\"beforeblur\":case\"afterblur\":v=Wo;break;case\"click\":if(n.button===2)break e;case\"auxclick\":case\"dblclick\":case\"mousedown\":case\"mousemove\":case\"mouseup\":case\"mouseout\":case\"mouseover\":case\"contextmenu\":v=Xu;break;case\"drag\":case\"dragend\":case\"dragenter\":case\"dragexit\":case\"dragleave\":case\"dragover\":case\"dragstart\":case\"drop\":v=sh;break;case\"touchcancel\":case\"touchend\":case\"touchmove\":case\"touchstart\":v=_h;break;case Ic:case Nc:case zc:v=ah;break;case Rc:v=Eh;break;case\"scroll\":v=ih;break;case\"wheel\":v=Ch;break;case\"copy\":case\"cut\":case\"paste\":v=fh;break;case\"gotpointercapture\":case\"lostpointercapture\":case\"pointercancel\":case\"pointerdown\":case\"pointermove\":case\"pointerout\":case\"pointerover\":case\"pointerup\":v=Gu}var w=(t&4)!==0,T=!w&&e===\"scroll\",h=w?d!==null?d+\"Capture\":null:d;w=[];for(var c=a,m;c!==null;){m=c;var S=m.stateNode;if(m.tag===5&&S!==null&&(m=S,h!==null&&(S=sr(c,h),S!=null&&w.push(pr(c,S,m)))),T)break;c=c.return}0<w.length&&(d=new v(d,y,null,n,p),f.push({event:d,listeners:w}))}}if(!(t&7)){e:{if(d=e===\"mouseover\"||e===\"pointerover\",v=e===\"mouseout\"||e===\"pointerout\",d&&n!==vs&&(y=n.relatedTarget||n.fromElement)&&(Rt(y)||y[Ye]))break e;if((v||d)&&(d=p.window===p?p:(d=p.ownerDocument)?d.defaultView||d.parentWindow:window,v?(y=n.relatedTarget||n.toElement,v=a,y=y?Rt(y):null,y!==null&&(T=Bt(y),y!==T||y.tag!==5&&y.tag!==6)&&(y=null)):(v=null,y=a),v!==y)){if(w=Xu,S=\"onMouseLeave\",h=\"onMouseEnter\",c=\"mouse\",(e===\"pointerout\"||e===\"pointerover\")&&(w=Gu,S=\"onPointerLeave\",h=\"onPointerEnter\",c=\"pointer\"),T=v==null?d:nn(v),m=y==null?d:nn(y),d=new w(S,c+\"leave\",v,n,p),d.target=T,d.relatedTarget=m,S=null,Rt(p)===a&&(w=new w(h,c+\"enter\",y,n,p),w.target=m,w.relatedTarget=T,S=w),T=S,v&&y)t:{for(w=v,h=y,c=0,m=w;m;m=Jt(m))c++;for(m=0,S=h;S;S=Jt(S))m++;for(;0<c-m;)w=Jt(w),c--;for(;0<m-c;)h=Jt(h),m--;for(;c--;){if(w===h||h!==null&&w===h.alternate)break t;w=Jt(w),h=Jt(h)}w=null}else w=null;v!==null&&la(f,d,v,w,!1),y!==null&&T!==null&&la(f,T,y,w,!0)}}e:{if(d=a?nn(a):window,v=d.nodeName&&d.nodeName.toLowerCase(),v===\"select\"||v===\"input\"&&d.type===\"file\")var k=Oh;else if(qu(d))if(Ec)k=Dh;else{k=Ah;var E=Lh}else(v=d.nodeName)&&v.toLowerCase()===\"input\"&&(d.type===\"checkbox\"||d.type===\"radio\")&&(k=Mh);if(k&&(k=k(e,a))){kc(f,k,n,p);break e}E&&E(e,d,a),e===\"focusout\"&&(E=d._wrapperState)&&E.controlled&&d.type===\"number\"&&fs(d,\"number\",d.value)}switch(E=a?nn(a):window,e){case\"focusin\":(qu(E)||E.contentEditable===\"true\")&&(en=E,Es=a,bn=null);break;case\"focusout\":bn=Es=en=null;break;case\"mousedown\":xs=!0;break;case\"contextmenu\":case\"mouseup\":case\"dragend\":xs=!1,na(f,n,p);break;case\"selectionchange\":if(Fh)break;case\"keydown\":case\"keyup\":na(f,n,p)}var x;if(cl)e:{switch(e){case\"compositionstart\":var C=\"onCompositionStart\";break e;case\"compositionend\":C=\"onCompositionEnd\";break e;case\"compositionupdate\":C=\"onCompositionUpdate\";break e}C=void 0}else bt?wc(e,n)&&(C=\"onCompositionEnd\"):e===\"keydown\"&&n.keyCode===229&&(C=\"onCompositionStart\");C&&(Sc&&n.locale!==\"ko\"&&(bt||C!==\"onCompositionStart\"?C===\"onCompositionEnd\"&&bt&&(x=gc()):(ut=p,ll=\"value\"in ut?ut.value:ut.textContent,bt=!0)),E=Ni(a,C),0<E.length&&(C=new Yu(C,e,null,n,p),f.push({event:C,listeners:E}),x?C.data=x:(x=_c(n),x!==null&&(C.data=x)))),(x=Ph?Ih(e,n):Nh(e,n))&&(a=Ni(a,\"onBeforeInput\"),0<a.length&&(p=new Yu(\"onBeforeInput\",\"beforeinput\",null,n,p),f.push({event:p,listeners:a}),p.data=x))}Lc(f,t)})}function pr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ni(e,t){for(var n=t+\"Capture\",r=[];e!==null;){var i=e,o=i.stateNode;i.tag===5&&o!==null&&(i=o,o=sr(e,n),o!=null&&r.unshift(pr(e,o,i)),o=sr(e,t),o!=null&&r.push(pr(e,o,i))),e=e.return}return r}function Jt(e){if(e===null)return null;do e=e.return;while(e&&e.tag!==5);return e||null}function la(e,t,n,r,i){for(var o=t._reactName,s=[];n!==null&&n!==r;){var l=n,u=l.alternate,a=l.stateNode;if(u!==null&&u===r)break;l.tag===5&&a!==null&&(l=a,i?(u=sr(n,o),u!=null&&s.unshift(pr(n,u,l))):i||(u=sr(n,o),u!=null&&s.push(pr(n,u,l)))),n=n.return}s.length!==0&&e.push({event:t,listeners:s})}var Vh=/\\r\\n?/g,Bh=/\\u0000|\\uFFFD/g;function ua(e){return(typeof e==\"string\"?e:\"\"+e).replace(Vh,`\n`).replace(Bh,\"\")}function si(e,t,n){if(t=ua(t),ua(e)!==t&&n)throw Error(g(425))}function zi(){}var Cs=null,Ts=null;function Ps(e,t){return e===\"textarea\"||e===\"noscript\"||typeof t.children==\"string\"||typeof t.children==\"number\"||typeof t.dangerouslySetInnerHTML==\"object\"&&t.dangerouslySetInnerHTML!==null&&t.dangerouslySetInnerHTML.__html!=null}var Is=typeof setTimeout==\"function\"?setTimeout:void 0,Wh=typeof clearTimeout==\"function\"?clearTimeout:void 0,aa=typeof Promise==\"function\"?Promise:void 0,Hh=typeof queueMicrotask==\"function\"?queueMicrotask:typeof aa<\"u\"?function(e){return aa.resolve(null).then(e).catch(Qh)}:Is;function Qh(e){setTimeout(function(){throw e})}function Yo(e,t){var n=t,r=0;do{var i=n.nextSibling;if(e.removeChild(n),i&&i.nodeType===8)if(n=i.data,n===\"/$\"){if(r===0){e.removeChild(i),ar(t);return}r--}else n!==\"$\"&&n!==\"$?\"&&n!==\"$!\"||r++;n=i}while(n);ar(t)}function pt(e){for(;e!=null;e=e.nextSibling){var t=e.nodeType;if(t===1||t===3)break;if(t===8){if(t=e.data,t===\"$\"||t===\"$!\"||t===\"$?\")break;if(t===\"/$\")return null}}return e}function ca(e){e=e.previousSibling;for(var t=0;e;){if(e.nodeType===8){var n=e.data;if(n===\"$\"||n===\"$!\"||n===\"$?\"){if(t===0)return e;t--}else n===\"/$\"&&t++}e=e.previousSibling}return null}var xn=Math.random().toString(36).slice(2),$e=\"__reactFiber$\"+xn,hr=\"__reactProps$\"+xn,Ye=\"__reactContainer$\"+xn,Ns=\"__reactEvents$\"+xn,Kh=\"__reactListeners$\"+xn,Xh=\"__reactHandles$\"+xn;function Rt(e){var t=e[$e];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Ye]||n[$e]){if(n=t.alternate,t.child!==null||n!==null&&n.child!==null)for(e=ca(e);e!==null;){if(n=e[$e])return n;e=ca(e)}return t}e=n,n=e.parentNode}return null}function Er(e){return e=e[$e]||e[Ye],!e||e.tag!==5&&e.tag!==6&&e.tag!==13&&e.tag!==3?null:e}function nn(e){if(e.tag===5||e.tag===6)return e.stateNode;throw Error(g(33))}function Ji(e){return e[hr]||null}var zs=[],rn=-1;function _t(e){return{current:e}}function A(e){0>rn||(e.current=zs[rn],zs[rn]=null,rn--)}function O(e,t){rn++,zs[rn]=e.current,e.current=t}var St={},ee=_t(St),ae=_t(!1),Dt=St;function yn(e,t){var n=e.type.contextTypes;if(!n)return St;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i={},o;for(o in n)i[o]=t[o];return r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function ce(e){return e=e.childContextTypes,e!=null}function Ri(){A(ae),A(ee)}function fa(e,t,n){if(ee.current!==St)throw Error(g(168));O(ee,t),O(ae,n)}function Mc(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,typeof r.getChildContext!=\"function\")return n;r=r.getChildContext();for(var i in r)if(!(i in t))throw Error(g(108,Lp(e)||\"Unknown\",i));return $({},n,r)}function Oi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||St,Dt=ee.current,O(ee,e),O(ae,ae.current),!0}function da(e,t,n){var r=e.stateNode;if(!r)throw Error(g(169));n?(e=Mc(e,t,Dt),r.__reactInternalMemoizedMergedChildContext=e,A(ae),A(ee),O(ee,e)):A(ae),O(ae,n)}var We=null,Zi=!1,Go=!1;function Dc(e){We===null?We=[e]:We.push(e)}function Yh(e){Zi=!0,Dc(e)}function kt(){if(!Go&&We!==null){Go=!0;var e=0,t=z;try{var n=We;for(z=1;e<n.length;e++){var r=n[e];do r=r(!0);while(r!==null)}We=null,Zi=!1}catch(i){throw We!==null&&(We=We.slice(e+1)),lc(rl,kt),i}finally{z=t,Go=!1}}return null}var on=[],sn=0,Li=null,Ai=0,Se=[],we=0,jt=null,He=1,Qe=\"\";function Nt(e,t){on[sn++]=Ai,on[sn++]=Li,Li=e,Ai=t}function jc(e,t,n){Se[we++]=He,Se[we++]=Qe,Se[we++]=jt,jt=e;var r=He;e=Qe;var i=32-Re(r)-1;r&=~(1<<i),n+=1;var o=32-Re(t)+i;if(30<o){var s=i-i%5;o=(r&(1<<s)-1).toString(32),r>>=s,i-=s,He=1<<32-Re(t)+i|n<<i|r,Qe=o+e}else He=1<<o|n<<i|r,Qe=e}function dl(e){e.return!==null&&(Nt(e,1),jc(e,1,0))}function pl(e){for(;e===Li;)Li=on[--sn],on[sn]=null,Ai=on[--sn],on[sn]=null;for(;e===jt;)jt=Se[--we],Se[we]=null,Qe=Se[--we],Se[we]=null,He=Se[--we],Se[we]=null}var he=null,pe=null,M=!1,ze=null;function $c(e,t){var n=_e(5,null,null,0);n.elementType=\"DELETED\",n.stateNode=t,n.return=e,t=e.deletions,t===null?(e.deletions=[n],e.flags|=16):t.push(n)}function pa(e,t){switch(e.tag){case 5:var n=e.type;return t=t.nodeType!==1||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t,t!==null?(e.stateNode=t,he=e,pe=pt(t.firstChild),!0):!1;case 6:return t=e.pendingProps===\"\"||t.nodeType!==3?null:t,t!==null?(e.stateNode=t,he=e,pe=null,!0):!1;case 13:return t=t.nodeType!==8?null:t,t!==null?(n=jt!==null?{id:He,overflow:Qe}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},n=_e(18,null,null,0),n.stateNode=t,n.return=e,e.child=n,he=e,pe=null,!0):!1;default:return!1}}function Rs(e){return(e.mode&1)!==0&&(e.flags&128)===0}function Os(e){if(M){var t=pe;if(t){var n=t;if(!pa(e,t)){if(Rs(e))throw Error(g(418));t=pt(n.nextSibling);var r=he;t&&pa(e,t)?$c(r,n):(e.flags=e.flags&-4097|2,M=!1,he=e)}}else{if(Rs(e))throw Error(g(418));e.flags=e.flags&-4097|2,M=!1,he=e}}}function ha(e){for(e=e.return;e!==null&&e.tag!==5&&e.tag!==3&&e.tag!==13;)e=e.return;he=e}function li(e){if(e!==he)return!1;if(!M)return ha(e),M=!0,!1;var t;if((t=e.tag!==3)&&!(t=e.tag!==5)&&(t=e.type,t=t!==\"head\"&&t!==\"body\"&&!Ps(e.type,e.memoizedProps)),t&&(t=pe)){if(Rs(e))throw Fc(),Error(g(418));for(;t;)$c(e,t),t=pt(t.nextSibling)}if(ha(e),e.tag===13){if(e=e.memoizedState,e=e!==null?e.dehydrated:null,!e)throw Error(g(317));e:{for(e=e.nextSibling,t=0;e;){if(e.nodeType===8){var n=e.data;if(n===\"/$\"){if(t===0){pe=pt(e.nextSibling);break e}t--}else n!==\"$\"&&n!==\"$!\"&&n!==\"$?\"||t++}e=e.nextSibling}pe=null}}else pe=he?pt(e.stateNode.nextSibling):null;return!0}function Fc(){for(var e=pe;e;)e=pt(e.nextSibling)}function gn(){pe=he=null,M=!1}function hl(e){ze===null?ze=[e]:ze.push(e)}var Gh=Ze.ReactCurrentBatchConfig;function Ie(e,t){if(e&&e.defaultProps){t=$({},t),e=e.defaultProps;for(var n in e)t[n]===void 0&&(t[n]=e[n]);return t}return t}var Mi=_t(null),Di=null,ln=null,ml=null;function vl(){ml=ln=Di=null}function yl(e){var t=Mi.current;A(Mi),e._currentValue=t}function Ls(e,t,n){for(;e!==null;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,r!==null&&(r.childLanes|=t)):r!==null&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function hn(e,t){Di=e,ml=ln=null,e=e.dependencies,e!==null&&e.firstContext!==null&&(e.lanes&t&&(ue=!0),e.firstContext=null)}function Ee(e){var t=e._currentValue;if(ml!==e)if(e={context:e,memoizedValue:t,next:null},ln===null){if(Di===null)throw Error(g(308));ln=e,Di.dependencies={lanes:0,firstContext:e}}else ln=ln.next=e;return t}var Ot=null;function gl(e){Ot===null?Ot=[e]:Ot.push(e)}function Uc(e,t,n,r){var i=t.interleaved;return i===null?(n.next=n,gl(t)):(n.next=i.next,i.next=n),t.interleaved=n,Ge(e,r)}function Ge(e,t){e.lanes|=t;var n=e.alternate;for(n!==null&&(n.lanes|=t),n=e,e=e.return;e!==null;)e.childLanes|=t,n=e.alternate,n!==null&&(n.childLanes|=t),n=e,e=e.return;return n.tag===3?n.stateNode:null}var ot=!1;function Sl(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Vc(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ke(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function ht(e,t,n){var r=e.updateQueue;if(r===null)return null;if(r=r.shared,I&2){var i=r.pending;return i===null?t.next=t:(t.next=i.next,i.next=t),r.pending=t,Ge(e,n)}return i=r.interleaved,i===null?(t.next=t,gl(r)):(t.next=i.next,i.next=t),r.interleaved=t,Ge(e,n)}function mi(e,t,n){if(t=t.updateQueue,t!==null&&(t=t.shared,(n&4194240)!==0)){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,il(e,n)}}function ma(e,t){var n=e.updateQueue,r=e.alternate;if(r!==null&&(r=r.updateQueue,n===r)){var i=null,o=null;if(n=n.firstBaseUpdate,n!==null){do{var s={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};o===null?i=o=s:o=o.next=s,n=n.next}while(n!==null);o===null?i=o=t:o=o.next=t}else i=o=t;n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},e.updateQueue=n;return}e=n.lastBaseUpdate,e===null?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ji(e,t,n,r){var i=e.updateQueue;ot=!1;var o=i.firstBaseUpdate,s=i.lastBaseUpdate,l=i.shared.pending;if(l!==null){i.shared.pending=null;var u=l,a=u.next;u.next=null,s===null?o=a:s.next=a,s=u;var p=e.alternate;p!==null&&(p=p.updateQueue,l=p.lastBaseUpdate,l!==s&&(l===null?p.firstBaseUpdate=a:l.next=a,p.lastBaseUpdate=u))}if(o!==null){var f=i.baseState;s=0,p=a=u=null,l=o;do{var d=l.lane,v=l.eventTime;if((r&d)===d){p!==null&&(p=p.next={eventTime:v,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var y=e,w=l;switch(d=t,v=n,w.tag){case 1:if(y=w.payload,typeof y==\"function\"){f=y.call(v,f,d);break e}f=y;break e;case 3:y.flags=y.flags&-65537|128;case 0:if(y=w.payload,d=typeof y==\"function\"?y.call(v,f,d):y,d==null)break e;f=$({},f,d);break e;case 2:ot=!0}}l.callback!==null&&l.lane!==0&&(e.flags|=64,d=i.effects,d===null?i.effects=[l]:d.push(l))}else v={eventTime:v,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},p===null?(a=p=v,u=f):p=p.next=v,s|=d;if(l=l.next,l===null){if(l=i.shared.pending,l===null)break;d=l,l=d.next,d.next=null,i.lastBaseUpdate=d,i.shared.pending=null}}while(!0);if(p===null&&(u=f),i.baseState=u,i.firstBaseUpdate=a,i.lastBaseUpdate=p,t=i.shared.interleaved,t!==null){i=t;do s|=i.lane,i=i.next;while(i!==t)}else o===null&&(i.shared.lanes=0);Ft|=s,e.lanes=s,e.memoizedState=f}}function va(e,t,n){if(e=t.effects,t.effects=null,e!==null)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(i!==null){if(r.callback=null,r=n,typeof i!=\"function\")throw Error(g(191,i));i.call(r)}}}var Bc=new Ua.Component().refs;function As(e,t,n,r){t=e.memoizedState,n=n(r,t),n=n==null?t:$({},t,n),e.memoizedState=n,e.lanes===0&&(e.updateQueue.baseState=n)}var qi={isMounted:function(e){return(e=e._reactInternals)?Bt(e)===e:!1},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ie(),i=vt(e),o=Ke(r,i);o.payload=t,n!=null&&(o.callback=n),t=ht(e,o,i),t!==null&&(Oe(t,e,i,r),mi(t,e,i))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ie(),i=vt(e),o=Ke(r,i);o.tag=1,o.payload=t,n!=null&&(o.callback=n),t=ht(e,o,i),t!==null&&(Oe(t,e,i,r),mi(t,e,i))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ie(),r=vt(e),i=Ke(n,r);i.tag=2,t!=null&&(i.callback=t),t=ht(e,i,r),t!==null&&(Oe(t,e,r,n),mi(t,e,r))}};function ya(e,t,n,r,i,o,s){return e=e.stateNode,typeof e.shouldComponentUpdate==\"function\"?e.shouldComponentUpdate(r,o,s):t.prototype&&t.prototype.isPureReactComponent?!fr(n,r)||!fr(i,o):!0}function Wc(e,t,n){var r=!1,i=St,o=t.contextType;return typeof o==\"object\"&&o!==null?o=Ee(o):(i=ce(t)?Dt:ee.current,r=t.contextTypes,o=(r=r!=null)?yn(e,i):St),t=new t(n,o),e.memoizedState=t.state!==null&&t.state!==void 0?t.state:null,t.updater=qi,e.stateNode=t,t._reactInternals=e,r&&(e=e.stateNode,e.__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function ga(e,t,n,r){e=t.state,typeof t.componentWillReceiveProps==\"function\"&&t.componentWillReceiveProps(n,r),typeof t.UNSAFE_componentWillReceiveProps==\"function\"&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&qi.enqueueReplaceState(t,t.state,null)}function Ms(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=Bc,Sl(e);var o=t.contextType;typeof o==\"object\"&&o!==null?i.context=Ee(o):(o=ce(t)?Dt:ee.current,i.context=yn(e,o)),i.state=e.memoizedState,o=t.getDerivedStateFromProps,typeof o==\"function\"&&(As(e,t,o,n),i.state=e.memoizedState),typeof t.getDerivedStateFromProps==\"function\"||typeof i.getSnapshotBeforeUpdate==\"function\"||typeof i.UNSAFE_componentWillMount!=\"function\"&&typeof i.componentWillMount!=\"function\"||(t=i.state,typeof i.componentWillMount==\"function\"&&i.componentWillMount(),typeof i.UNSAFE_componentWillMount==\"function\"&&i.UNSAFE_componentWillMount(),t!==i.state&&qi.enqueueReplaceState(i,i.state,null),ji(e,n,i,r),i.state=e.memoizedState),typeof i.componentDidMount==\"function\"&&(e.flags|=4194308)}function Vn(e,t,n){if(e=n.ref,e!==null&&typeof e!=\"function\"&&typeof e!=\"object\"){if(n._owner){if(n=n._owner,n){if(n.tag!==1)throw Error(g(309));var r=n.stateNode}if(!r)throw Error(g(147,e));var i=r,o=\"\"+e;return t!==null&&t.ref!==null&&typeof t.ref==\"function\"&&t.ref._stringRef===o?t.ref:(t=function(s){var l=i.refs;l===Bc&&(l=i.refs={}),s===null?delete l[o]:l[o]=s},t._stringRef=o,t)}if(typeof e!=\"string\")throw Error(g(284));if(!n._owner)throw Error(g(290,e))}return e}function ui(e,t){throw e=Object.prototype.toString.call(t),Error(g(31,e===\"[object Object]\"?\"object with keys {\"+Object.keys(t).join(\", \")+\"}\":e))}function Sa(e){var t=e._init;return t(e._payload)}function Hc(e){function t(h,c){if(e){var m=h.deletions;m===null?(h.deletions=[c],h.flags|=16):m.push(c)}}function n(h,c){if(!e)return null;for(;c!==null;)t(h,c),c=c.sibling;return null}function r(h,c){for(h=new Map;c!==null;)c.key!==null?h.set(c.key,c):h.set(c.index,c),c=c.sibling;return h}function i(h,c){return h=yt(h,c),h.index=0,h.sibling=null,h}function o(h,c,m){return h.index=m,e?(m=h.alternate,m!==null?(m=m.index,m<c?(h.flags|=2,c):m):(h.flags|=2,c)):(h.flags|=1048576,c)}function s(h){return e&&h.alternate===null&&(h.flags|=2),h}function l(h,c,m,S){return c===null||c.tag!==6?(c=ns(m,h.mode,S),c.return=h,c):(c=i(c,m),c.return=h,c)}function u(h,c,m,S){var k=m.type;return k===qt?p(h,c,m.props.children,S,m.key):c!==null&&(c.elementType===k||typeof k==\"object\"&&k!==null&&k.$$typeof===it&&Sa(k)===c.type)?(S=i(c,m.props),S.ref=Vn(h,c,m),S.return=h,S):(S=_i(m.type,m.key,m.props,null,h.mode,S),S.ref=Vn(h,c,m),S.return=h,S)}function a(h,c,m,S){return c===null||c.tag!==4||c.stateNode.containerInfo!==m.containerInfo||c.stateNode.implementation!==m.implementation?(c=rs(m,h.mode,S),c.return=h,c):(c=i(c,m.children||[]),c.return=h,c)}function p(h,c,m,S,k){return c===null||c.tag!==7?(c=Mt(m,h.mode,S,k),c.return=h,c):(c=i(c,m),c.return=h,c)}function f(h,c,m){if(typeof c==\"string\"&&c!==\"\"||typeof c==\"number\")return c=ns(\"\"+c,h.mode,m),c.return=h,c;if(typeof c==\"object\"&&c!==null){switch(c.$$typeof){case Xr:return m=_i(c.type,c.key,c.props,null,h.mode,m),m.ref=Vn(h,null,c),m.return=h,m;case Zt:return c=rs(c,h.mode,m),c.return=h,c;case it:var S=c._init;return f(h,S(c._payload),m)}if(Kn(c)||jn(c))return c=Mt(c,h.mode,m,null),c.return=h,c;ui(h,c)}return null}function d(h,c,m,S){var k=c!==null?c.key:null;if(typeof m==\"string\"&&m!==\"\"||typeof m==\"number\")return k!==null?null:l(h,c,\"\"+m,S);if(typeof m==\"object\"&&m!==null){switch(m.$$typeof){case Xr:return m.key===k?u(h,c,m,S):null;case Zt:return m.key===k?a(h,c,m,S):null;case it:return k=m._init,d(h,c,k(m._payload),S)}if(Kn(m)||jn(m))return k!==null?null:p(h,c,m,S,null);ui(h,m)}return null}function v(h,c,m,S,k){if(typeof S==\"string\"&&S!==\"\"||typeof S==\"number\")return h=h.get(m)||null,l(c,h,\"\"+S,k);if(typeof S==\"object\"&&S!==null){switch(S.$$typeof){case Xr:return h=h.get(S.key===null?m:S.key)||null,u(c,h,S,k);case Zt:return h=h.get(S.key===null?m:S.key)||null,a(c,h,S,k);case it:var E=S._init;return v(h,c,m,E(S._payload),k)}if(Kn(S)||jn(S))return h=h.get(m)||null,p(c,h,S,k,null);ui(c,S)}return null}function y(h,c,m,S){for(var k=null,E=null,x=c,C=c=0,H=null;x!==null&&C<m.length;C++){x.index>C?(H=x,x=null):H=x.sibling;var N=d(h,x,m[C],S);if(N===null){x===null&&(x=H);break}e&&x&&N.alternate===null&&t(h,x),c=o(N,c,C),E===null?k=N:E.sibling=N,E=N,x=H}if(C===m.length)return n(h,x),M&&Nt(h,C),k;if(x===null){for(;C<m.length;C++)x=f(h,m[C],S),x!==null&&(c=o(x,c,C),E===null?k=x:E.sibling=x,E=x);return M&&Nt(h,C),k}for(x=r(h,x);C<m.length;C++)H=v(x,h,C,m[C],S),H!==null&&(e&&H.alternate!==null&&x.delete(H.key===null?C:H.key),c=o(H,c,C),E===null?k=H:E.sibling=H,E=H);return e&&x.forEach(function(et){return t(h,et)}),M&&Nt(h,C),k}function w(h,c,m,S){var k=jn(m);if(typeof k!=\"function\")throw Error(g(150));if(m=k.call(m),m==null)throw Error(g(151));for(var E=k=null,x=c,C=c=0,H=null,N=m.next();x!==null&&!N.done;C++,N=m.next()){x.index>C?(H=x,x=null):H=x.sibling;var et=d(h,x,N.value,S);if(et===null){x===null&&(x=H);break}e&&x&&et.alternate===null&&t(h,x),c=o(et,c,C),E===null?k=et:E.sibling=et,E=et,x=H}if(N.done)return n(h,x),M&&Nt(h,C),k;if(x===null){for(;!N.done;C++,N=m.next())N=f(h,N.value,S),N!==null&&(c=o(N,c,C),E===null?k=N:E.sibling=N,E=N);return M&&Nt(h,C),k}for(x=r(h,x);!N.done;C++,N=m.next())N=v(x,h,C,N.value,S),N!==null&&(e&&N.alternate!==null&&x.delete(N.key===null?C:N.key),c=o(N,c,C),E===null?k=N:E.sibling=N,E=N);return e&&x.forEach(function(op){return t(h,op)}),M&&Nt(h,C),k}function T(h,c,m,S){if(typeof m==\"object\"&&m!==null&&m.type===qt&&m.key===null&&(m=m.props.children),typeof m==\"object\"&&m!==null){switch(m.$$typeof){case Xr:e:{for(var k=m.key,E=c;E!==null;){if(E.key===k){if(k=m.type,k===qt){if(E.tag===7){n(h,E.sibling),c=i(E,m.props.children),c.return=h,h=c;break e}}else if(E.elementType===k||typeof k==\"object\"&&k!==null&&k.$$typeof===it&&Sa(k)===E.type){n(h,E.sibling),c=i(E,m.props),c.ref=Vn(h,E,m),c.return=h,h=c;break e}n(h,E);break}else t(h,E);E=E.sibling}m.type===qt?(c=Mt(m.props.children,h.mode,S,m.key),c.return=h,h=c):(S=_i(m.type,m.key,m.props,null,h.mode,S),S.ref=Vn(h,c,m),S.return=h,h=S)}return s(h);case Zt:e:{for(E=m.key;c!==null;){if(c.key===E)if(c.tag===4&&c.stateNode.containerInfo===m.containerInfo&&c.stateNode.implementation===m.implementation){n(h,c.sibling),c=i(c,m.children||[]),c.return=h,h=c;break e}else{n(h,c);break}else t(h,c);c=c.sibling}c=rs(m,h.mode,S),c.return=h,h=c}return s(h);case it:return E=m._init,T(h,c,E(m._payload),S)}if(Kn(m))return y(h,c,m,S);if(jn(m))return w(h,c,m,S);ui(h,m)}return typeof m==\"string\"&&m!==\"\"||typeof m==\"number\"?(m=\"\"+m,c!==null&&c.tag===6?(n(h,c.sibling),c=i(c,m),c.return=h,h=c):(n(h,c),c=ns(m,h.mode,S),c.return=h,h=c),s(h)):n(h,c)}return T}var Sn=Hc(!0),Qc=Hc(!1),xr={},Ue=_t(xr),mr=_t(xr),vr=_t(xr);function Lt(e){if(e===xr)throw Error(g(174));return e}function wl(e,t){switch(O(vr,t),O(mr,e),O(Ue,xr),e=t.nodeType,e){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:ps(null,\"\");break;default:e=e===8?t.parentNode:t,t=e.namespaceURI||null,e=e.tagName,t=ps(t,e)}A(Ue),O(Ue,t)}function wn(){A(Ue),A(mr),A(vr)}function Kc(e){Lt(vr.current);var t=Lt(Ue.current),n=ps(t,e.type);t!==n&&(O(mr,e),O(Ue,n))}function _l(e){mr.current===e&&(A(Ue),A(mr))}var D=_t(0);function $i(e){for(var t=e;t!==null;){if(t.tag===13){var n=t.memoizedState;if(n!==null&&(n=n.dehydrated,n===null||n.data===\"$?\"||n.data===\"$!\"))return t}else if(t.tag===19&&t.memoizedProps.revealOrder!==void 0){if(t.flags&128)return t}else if(t.child!==null){t.child.return=t,t=t.child;continue}if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Jo=[];function kl(){for(var e=0;e<Jo.length;e++)Jo[e]._workInProgressVersionPrimary=null;Jo.length=0}var vi=Ze.ReactCurrentDispatcher,Zo=Ze.ReactCurrentBatchConfig,$t=0,j=null,B=null,Q=null,Fi=!1,er=!1,yr=0,Jh=0;function Z(){throw Error(g(321))}function El(e,t){if(t===null)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Le(e[n],t[n]))return!1;return!0}function xl(e,t,n,r,i,o){if($t=o,j=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,vi.current=e===null||e.memoizedState===null?em:tm,e=n(r,i),er){o=0;do{if(er=!1,yr=0,25<=o)throw Error(g(301));o+=1,Q=B=null,t.updateQueue=null,vi.current=nm,e=n(r,i)}while(er)}if(vi.current=Ui,t=B!==null&&B.next!==null,$t=0,Q=B=j=null,Fi=!1,t)throw Error(g(300));return e}function Cl(){var e=yr!==0;return yr=0,e}function je(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return Q===null?j.memoizedState=Q=e:Q=Q.next=e,Q}function xe(){if(B===null){var e=j.alternate;e=e!==null?e.memoizedState:null}else e=B.next;var t=Q===null?j.memoizedState:Q.next;if(t!==null)Q=t,B=e;else{if(e===null)throw Error(g(310));B=e,e={memoizedState:B.memoizedState,baseState:B.baseState,baseQueue:B.baseQueue,queue:B.queue,next:null},Q===null?j.memoizedState=Q=e:Q=Q.next=e}return Q}function gr(e,t){return typeof t==\"function\"?t(e):t}function qo(e){var t=xe(),n=t.queue;if(n===null)throw Error(g(311));n.lastRenderedReducer=e;var r=B,i=r.baseQueue,o=n.pending;if(o!==null){if(i!==null){var s=i.next;i.next=o.next,o.next=s}r.baseQueue=i=o,n.pending=null}if(i!==null){o=i.next,r=r.baseState;var l=s=null,u=null,a=o;do{var p=a.lane;if(($t&p)===p)u!==null&&(u=u.next={lane:0,action:a.action,hasEagerState:a.hasEagerState,eagerState:a.eagerState,next:null}),r=a.hasEagerState?a.eagerState:e(r,a.action);else{var f={lane:p,action:a.action,hasEagerState:a.hasEagerState,eagerState:a.eagerState,next:null};u===null?(l=u=f,s=r):u=u.next=f,j.lanes|=p,Ft|=p}a=a.next}while(a!==null&&a!==o);u===null?s=r:u.next=l,Le(r,t.memoizedState)||(ue=!0),t.memoizedState=r,t.baseState=s,t.baseQueue=u,n.lastRenderedState=r}if(e=n.interleaved,e!==null){i=e;do o=i.lane,j.lanes|=o,Ft|=o,i=i.next;while(i!==e)}else i===null&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function bo(e){var t=xe(),n=t.queue;if(n===null)throw Error(g(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(i!==null){n.pending=null;var s=i=i.next;do o=e(o,s.action),s=s.next;while(s!==i);Le(o,t.memoizedState)||(ue=!0),t.memoizedState=o,t.baseQueue===null&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function Xc(){}function Yc(e,t){var n=j,r=xe(),i=t(),o=!Le(r.memoizedState,i);if(o&&(r.memoizedState=i,ue=!0),r=r.queue,Tl(Zc.bind(null,n,r,e),[e]),r.getSnapshot!==t||o||Q!==null&&Q.memoizedState.tag&1){if(n.flags|=2048,Sr(9,Jc.bind(null,n,r,i,t),void 0,null),K===null)throw Error(g(349));$t&30||Gc(n,t,i)}return i}function Gc(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},t=j.updateQueue,t===null?(t={lastEffect:null,stores:null},j.updateQueue=t,t.stores=[e]):(n=t.stores,n===null?t.stores=[e]:n.push(e))}function Jc(e,t,n,r){t.value=n,t.getSnapshot=r,qc(t)&&bc(e)}function Zc(e,t,n){return n(function(){qc(t)&&bc(e)})}function qc(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Le(e,n)}catch{return!0}}function bc(e){var t=Ge(e,1);t!==null&&Oe(t,e,1,-1)}function wa(e){var t=je();return typeof e==\"function\"&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:gr,lastRenderedState:e},t.queue=e,e=e.dispatch=bh.bind(null,j,e),[t.memoizedState,e]}function Sr(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},t=j.updateQueue,t===null?(t={lastEffect:null,stores:null},j.updateQueue=t,t.lastEffect=e.next=e):(n=t.lastEffect,n===null?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e)),e}function ef(){return xe().memoizedState}function yi(e,t,n,r){var i=je();j.flags|=e,i.memoizedState=Sr(1|t,n,void 0,r===void 0?null:r)}function bi(e,t,n,r){var i=xe();r=r===void 0?null:r;var o=void 0;if(B!==null){var s=B.memoizedState;if(o=s.destroy,r!==null&&El(r,s.deps)){i.memoizedState=Sr(t,n,o,r);return}}j.flags|=e,i.memoizedState=Sr(1|t,n,o,r)}function _a(e,t){return yi(8390656,8,e,t)}function Tl(e,t){return bi(2048,8,e,t)}function tf(e,t){return bi(4,2,e,t)}function nf(e,t){return bi(4,4,e,t)}function rf(e,t){if(typeof t==\"function\")return e=e(),t(e),function(){t(null)};if(t!=null)return e=e(),t.current=e,function(){t.current=null}}function of(e,t,n){return n=n!=null?n.concat([e]):null,bi(4,4,rf.bind(null,t,e),n)}function Pl(){}function sf(e,t){var n=xe();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&El(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function lf(e,t){var n=xe();t=t===void 0?null:t;var r=n.memoizedState;return r!==null&&t!==null&&El(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function uf(e,t,n){return $t&21?(Le(n,t)||(n=cc(),j.lanes|=n,Ft|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,ue=!0),e.memoizedState=n)}function Zh(e,t){var n=z;z=n!==0&&4>n?n:4,e(!0);var r=Zo.transition;Zo.transition={};try{e(!1),t()}finally{z=n,Zo.transition=r}}function af(){return xe().memoizedState}function qh(e,t,n){var r=vt(e);if(n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},cf(e))ff(t,n);else if(n=Uc(e,t,n,r),n!==null){var i=ie();Oe(n,e,r,i),df(n,t,r)}}function bh(e,t,n){var r=vt(e),i={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(cf(e))ff(t,i);else{var o=e.alternate;if(e.lanes===0&&(o===null||o.lanes===0)&&(o=t.lastRenderedReducer,o!==null))try{var s=t.lastRenderedState,l=o(s,n);if(i.hasEagerState=!0,i.eagerState=l,Le(l,s)){var u=t.interleaved;u===null?(i.next=i,gl(t)):(i.next=u.next,u.next=i),t.interleaved=i;return}}catch{}finally{}n=Uc(e,t,i,r),n!==null&&(i=ie(),Oe(n,e,r,i),df(n,t,r))}}function cf(e){var t=e.alternate;return e===j||t!==null&&t===j}function ff(e,t){er=Fi=!0;var n=e.pending;n===null?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function df(e,t,n){if(n&4194240){var r=t.lanes;r&=e.pendingLanes,n|=r,t.lanes=n,il(e,n)}}var Ui={readContext:Ee,useCallback:Z,useContext:Z,useEffect:Z,useImperativeHandle:Z,useInsertionEffect:Z,useLayoutEffect:Z,useMemo:Z,useReducer:Z,useRef:Z,useState:Z,useDebugValue:Z,useDeferredValue:Z,useTransition:Z,useMutableSource:Z,useSyncExternalStore:Z,useId:Z,unstable_isNewReconciler:!1},em={readContext:Ee,useCallback:function(e,t){return je().memoizedState=[e,t===void 0?null:t],e},useContext:Ee,useEffect:_a,useImperativeHandle:function(e,t,n){return n=n!=null?n.concat([e]):null,yi(4194308,4,rf.bind(null,t,e),n)},useLayoutEffect:function(e,t){return yi(4194308,4,e,t)},useInsertionEffect:function(e,t){return yi(4,2,e,t)},useMemo:function(e,t){var n=je();return t=t===void 0?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=je();return t=n!==void 0?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=qh.bind(null,j,e),[r.memoizedState,e]},useRef:function(e){var t=je();return e={current:e},t.memoizedState=e},useState:wa,useDebugValue:Pl,useDeferredValue:function(e){return je().memoizedState=e},useTransition:function(){var e=wa(!1),t=e[0];return e=Zh.bind(null,e[1]),je().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=j,i=je();if(M){if(n===void 0)throw Error(g(407));n=n()}else{if(n=t(),K===null)throw Error(g(349));$t&30||Gc(r,t,n)}i.memoizedState=n;var o={value:n,getSnapshot:t};return i.queue=o,_a(Zc.bind(null,r,o,e),[e]),r.flags|=2048,Sr(9,Jc.bind(null,r,o,n,t),void 0,null),n},useId:function(){var e=je(),t=K.identifierPrefix;if(M){var n=Qe,r=He;n=(r&~(1<<32-Re(r)-1)).toString(32)+n,t=\":\"+t+\"R\"+n,n=yr++,0<n&&(t+=\"H\"+n.toString(32)),t+=\":\"}else n=Jh++,t=\":\"+t+\"r\"+n.toString(32)+\":\";return e.memoizedState=t},unstable_isNewReconciler:!1},tm={readContext:Ee,useCallback:sf,useContext:Ee,useEffect:Tl,useImperativeHandle:of,useInsertionEffect:tf,useLayoutEffect:nf,useMemo:lf,useReducer:qo,useRef:ef,useState:function(){return qo(gr)},useDebugValue:Pl,useDeferredValue:function(e){var t=xe();return uf(t,B.memoizedState,e)},useTransition:function(){var e=qo(gr)[0],t=xe().memoizedState;return[e,t]},useMutableSource:Xc,useSyncExternalStore:Yc,useId:af,unstable_isNewReconciler:!1},nm={readContext:Ee,useCallback:sf,useContext:Ee,useEffect:Tl,useImperativeHandle:of,useInsertionEffect:tf,useLayoutEffect:nf,useMemo:lf,useReducer:bo,useRef:ef,useState:function(){return bo(gr)},useDebugValue:Pl,useDeferredValue:function(e){var t=xe();return B===null?t.memoizedState=e:uf(t,B.memoizedState,e)},useTransition:function(){var e=bo(gr)[0],t=xe().memoizedState;return[e,t]},useMutableSource:Xc,useSyncExternalStore:Yc,useId:af,unstable_isNewReconciler:!1};function _n(e,t){try{var n=\"\",r=t;do n+=Op(r),r=r.return;while(r);var i=n}catch(o){i=`\nError generating stack: `+o.message+`\n`+o.stack}return{value:e,source:t,stack:i,digest:null}}function es(e,t,n){return{value:e,source:null,stack:n??null,digest:t??null}}function Ds(e,t){try{console.error(t.value)}catch(n){setTimeout(function(){throw n})}}var rm=typeof WeakMap==\"function\"?WeakMap:Map;function pf(e,t,n){n=Ke(-1,n),n.tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Bi||(Bi=!0,Ks=r),Ds(e,t)},n}function hf(e,t,n){n=Ke(-1,n),n.tag=3;var r=e.type.getDerivedStateFromError;if(typeof r==\"function\"){var i=t.value;n.payload=function(){return r(i)},n.callback=function(){Ds(e,t)}}var o=e.stateNode;return o!==null&&typeof o.componentDidCatch==\"function\"&&(n.callback=function(){Ds(e,t),typeof r!=\"function\"&&(mt===null?mt=new Set([this]):mt.add(this));var s=t.stack;this.componentDidCatch(t.value,{componentStack:s!==null?s:\"\"})}),n}function ka(e,t,n){var r=e.pingCache;if(r===null){r=e.pingCache=new rm;var i=new Set;r.set(t,i)}else i=r.get(t),i===void 0&&(i=new Set,r.set(t,i));i.has(n)||(i.add(n),e=ym.bind(null,e,t,n),t.then(e,e))}function Ea(e){do{var t;if((t=e.tag===13)&&(t=e.memoizedState,t=t!==null?t.dehydrated!==null:!0),t)return e;e=e.return}while(e!==null);return null}function xa(e,t,n,r,i){return e.mode&1?(e.flags|=65536,e.lanes=i,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,n.tag===1&&(n.alternate===null?n.tag=17:(t=Ke(-1,1),t.tag=2,ht(n,t,1))),n.lanes|=1),e)}var im=Ze.ReactCurrentOwner,ue=!1;function re(e,t,n,r){t.child=e===null?Qc(t,null,n,r):Sn(t,e.child,n,r)}function Ca(e,t,n,r,i){n=n.render;var o=t.ref;return hn(t,i),r=xl(e,t,n,r,o,i),n=Cl(),e!==null&&!ue?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Je(e,t,i)):(M&&n&&dl(t),t.flags|=1,re(e,t,r,i),t.child)}function Ta(e,t,n,r,i){if(e===null){var o=n.type;return typeof o==\"function\"&&!Ml(o)&&o.defaultProps===void 0&&n.compare===null&&n.defaultProps===void 0?(t.tag=15,t.type=o,mf(e,t,o,r,i)):(e=_i(n.type,null,r,t,t.mode,i),e.ref=t.ref,e.return=t,t.child=e)}if(o=e.child,!(e.lanes&i)){var s=o.memoizedProps;if(n=n.compare,n=n!==null?n:fr,n(s,r)&&e.ref===t.ref)return Je(e,t,i)}return t.flags|=1,e=yt(o,r),e.ref=t.ref,e.return=t,t.child=e}function mf(e,t,n,r,i){if(e!==null){var o=e.memoizedProps;if(fr(o,r)&&e.ref===t.ref)if(ue=!1,t.pendingProps=r=o,(e.lanes&i)!==0)e.flags&131072&&(ue=!0);else return t.lanes=e.lanes,Je(e,t,i)}return js(e,t,n,r,i)}function vf(e,t,n){var r=t.pendingProps,i=r.children,o=e!==null?e.memoizedState:null;if(r.mode===\"hidden\")if(!(t.mode&1))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},O(an,de),de|=n;else{if(!(n&1073741824))return e=o!==null?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,O(an,de),de|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=o!==null?o.baseLanes:n,O(an,de),de|=r}else o!==null?(r=o.baseLanes|n,t.memoizedState=null):r=n,O(an,de),de|=r;return re(e,t,i,n),t.child}function yf(e,t){var n=t.ref;(e===null&&n!==null||e!==null&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function js(e,t,n,r,i){var o=ce(n)?Dt:ee.current;return o=yn(t,o),hn(t,i),n=xl(e,t,n,r,o,i),r=Cl(),e!==null&&!ue?(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Je(e,t,i)):(M&&r&&dl(t),t.flags|=1,re(e,t,n,i),t.child)}function Pa(e,t,n,r,i){if(ce(n)){var o=!0;Oi(t)}else o=!1;if(hn(t,i),t.stateNode===null)gi(e,t),Wc(t,n,r),Ms(t,n,r,i),r=!0;else if(e===null){var s=t.stateNode,l=t.memoizedProps;s.props=l;var u=s.context,a=n.contextType;typeof a==\"object\"&&a!==null?a=Ee(a):(a=ce(n)?Dt:ee.current,a=yn(t,a));var p=n.getDerivedStateFromProps,f=typeof p==\"function\"||typeof s.getSnapshotBeforeUpdate==\"function\";f||typeof s.UNSAFE_componentWillReceiveProps!=\"function\"&&typeof s.componentWillReceiveProps!=\"function\"||(l!==r||u!==a)&&ga(t,s,r,a),ot=!1;var d=t.memoizedState;s.state=d,ji(t,r,s,i),u=t.memoizedState,l!==r||d!==u||ae.current||ot?(typeof p==\"function\"&&(As(t,n,p,r),u=t.memoizedState),(l=ot||ya(t,n,l,r,d,u,a))?(f||typeof s.UNSAFE_componentWillMount!=\"function\"&&typeof s.componentWillMount!=\"function\"||(typeof s.componentWillMount==\"function\"&&s.componentWillMount(),typeof s.UNSAFE_componentWillMount==\"function\"&&s.UNSAFE_componentWillMount()),typeof s.componentDidMount==\"function\"&&(t.flags|=4194308)):(typeof s.componentDidMount==\"function\"&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=u),s.props=r,s.state=u,s.context=a,r=l):(typeof s.componentDidMount==\"function\"&&(t.flags|=4194308),r=!1)}else{s=t.stateNode,Vc(e,t),l=t.memoizedProps,a=t.type===t.elementType?l:Ie(t.type,l),s.props=a,f=t.pendingProps,d=s.context,u=n.contextType,typeof u==\"object\"&&u!==null?u=Ee(u):(u=ce(n)?Dt:ee.current,u=yn(t,u));var v=n.getDerivedStateFromProps;(p=typeof v==\"function\"||typeof s.getSnapshotBeforeUpdate==\"function\")||typeof s.UNSAFE_componentWillReceiveProps!=\"function\"&&typeof s.componentWillReceiveProps!=\"function\"||(l!==f||d!==u)&&ga(t,s,r,u),ot=!1,d=t.memoizedState,s.state=d,ji(t,r,s,i);var y=t.memoizedState;l!==f||d!==y||ae.current||ot?(typeof v==\"function\"&&(As(t,n,v,r),y=t.memoizedState),(a=ot||ya(t,n,a,r,d,y,u)||!1)?(p||typeof s.UNSAFE_componentWillUpdate!=\"function\"&&typeof s.componentWillUpdate!=\"function\"||(typeof s.componentWillUpdate==\"function\"&&s.componentWillUpdate(r,y,u),typeof s.UNSAFE_componentWillUpdate==\"function\"&&s.UNSAFE_componentWillUpdate(r,y,u)),typeof s.componentDidUpdate==\"function\"&&(t.flags|=4),typeof s.getSnapshotBeforeUpdate==\"function\"&&(t.flags|=1024)):(typeof s.componentDidUpdate!=\"function\"||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),typeof s.getSnapshotBeforeUpdate!=\"function\"||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=y),s.props=r,s.state=y,s.context=u,r=a):(typeof s.componentDidUpdate!=\"function\"||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),typeof s.getSnapshotBeforeUpdate!=\"function\"||l===e.memoizedProps&&d===e.memoizedState||(t.flags|=1024),r=!1)}return $s(e,t,n,r,o,i)}function $s(e,t,n,r,i,o){yf(e,t);var s=(t.flags&128)!==0;if(!r&&!s)return i&&da(t,n,!1),Je(e,t,o);r=t.stateNode,im.current=t;var l=s&&typeof n.getDerivedStateFromError!=\"function\"?null:r.render();return t.flags|=1,e!==null&&s?(t.child=Sn(t,e.child,null,o),t.child=Sn(t,null,l,o)):re(e,t,l,o),t.memoizedState=r.state,i&&da(t,n,!0),t.child}function gf(e){var t=e.stateNode;t.pendingContext?fa(e,t.pendingContext,t.pendingContext!==t.context):t.context&&fa(e,t.context,!1),wl(e,t.containerInfo)}function Ia(e,t,n,r,i){return gn(),hl(i),t.flags|=256,re(e,t,n,r),t.child}var Fs={dehydrated:null,treeContext:null,retryLane:0};function Us(e){return{baseLanes:e,cachePool:null,transitions:null}}function Sf(e,t,n){var r=t.pendingProps,i=D.current,o=!1,s=(t.flags&128)!==0,l;if((l=s)||(l=e!==null&&e.memoizedState===null?!1:(i&2)!==0),l?(o=!0,t.flags&=-129):(e===null||e.memoizedState!==null)&&(i|=1),O(D,i&1),e===null)return Os(t),e=t.memoizedState,e!==null&&(e=e.dehydrated,e!==null)?(t.mode&1?e.data===\"$!\"?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(s=r.children,e=r.fallback,o?(r=t.mode,o=t.child,s={mode:\"hidden\",children:s},!(r&1)&&o!==null?(o.childLanes=0,o.pendingProps=s):o=no(s,r,0,null),e=Mt(e,r,n,null),o.return=t,e.return=t,o.sibling=e,t.child=o,t.child.memoizedState=Us(n),t.memoizedState=Fs,e):Il(t,s));if(i=e.memoizedState,i!==null&&(l=i.dehydrated,l!==null))return om(e,t,s,r,l,i,n);if(o){o=r.fallback,s=t.mode,i=e.child,l=i.sibling;var u={mode:\"hidden\",children:r.children};return!(s&1)&&t.child!==i?(r=t.child,r.childLanes=0,r.pendingProps=u,t.deletions=null):(r=yt(i,u),r.subtreeFlags=i.subtreeFlags&14680064),l!==null?o=yt(l,o):(o=Mt(o,s,n,null),o.flags|=2),o.return=t,r.return=t,r.sibling=o,t.child=r,r=o,o=t.child,s=e.child.memoizedState,s=s===null?Us(n):{baseLanes:s.baseLanes|n,cachePool:null,transitions:s.transitions},o.memoizedState=s,o.childLanes=e.childLanes&~n,t.memoizedState=Fs,r}return o=e.child,e=o.sibling,r=yt(o,{mode:\"visible\",children:r.children}),!(t.mode&1)&&(r.lanes=n),r.return=t,r.sibling=null,e!==null&&(n=t.deletions,n===null?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=r,t.memoizedState=null,r}function Il(e,t){return t=no({mode:\"visible\",children:t},e.mode,0,null),t.return=e,e.child=t}function ai(e,t,n,r){return r!==null&&hl(r),Sn(t,e.child,null,n),e=Il(t,t.pendingProps.children),e.flags|=2,t.memoizedState=null,e}function om(e,t,n,r,i,o,s){if(n)return t.flags&256?(t.flags&=-257,r=es(Error(g(422))),ai(e,t,s,r)):t.memoizedState!==null?(t.child=e.child,t.flags|=128,null):(o=r.fallback,i=t.mode,r=no({mode:\"visible\",children:r.children},i,0,null),o=Mt(o,i,s,null),o.flags|=2,r.return=t,o.return=t,r.sibling=o,t.child=r,t.mode&1&&Sn(t,e.child,null,s),t.child.memoizedState=Us(s),t.memoizedState=Fs,o);if(!(t.mode&1))return ai(e,t,s,null);if(i.data===\"$!\"){if(r=i.nextSibling&&i.nextSibling.dataset,r)var l=r.dgst;return r=l,o=Error(g(419)),r=es(o,r,void 0),ai(e,t,s,r)}if(l=(s&e.childLanes)!==0,ue||l){if(r=K,r!==null){switch(s&-s){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}i=i&(r.suspendedLanes|s)?0:i,i!==0&&i!==o.retryLane&&(o.retryLane=i,Ge(e,i),Oe(r,e,i,-1))}return Al(),r=es(Error(g(421))),ai(e,t,s,r)}return i.data===\"$?\"?(t.flags|=128,t.child=e.child,t=gm.bind(null,e),i._reactRetry=t,null):(e=o.treeContext,pe=pt(i.nextSibling),he=t,M=!0,ze=null,e!==null&&(Se[we++]=He,Se[we++]=Qe,Se[we++]=jt,He=e.id,Qe=e.overflow,jt=t),t=Il(t,r.children),t.flags|=4096,t)}function Na(e,t,n){e.lanes|=t;var r=e.alternate;r!==null&&(r.lanes|=t),Ls(e.return,t,n)}function ts(e,t,n,r,i){var o=e.memoizedState;o===null?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(o.isBackwards=t,o.rendering=null,o.renderingStartTime=0,o.last=r,o.tail=n,o.tailMode=i)}function wf(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(re(e,t,r.children,n),r=D.current,r&2)r=r&1|2,t.flags|=128;else{if(e!==null&&e.flags&128)e:for(e=t.child;e!==null;){if(e.tag===13)e.memoizedState!==null&&Na(e,n,t);else if(e.tag===19)Na(e,n,t);else if(e.child!==null){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;e.sibling===null;){if(e.return===null||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(O(D,r),!(t.mode&1))t.memoizedState=null;else switch(i){case\"forwards\":for(n=t.child,i=null;n!==null;)e=n.alternate,e!==null&&$i(e)===null&&(i=n),n=n.sibling;n=i,n===null?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),ts(t,!1,i,n,o);break;case\"backwards\":for(n=null,i=t.child,t.child=null;i!==null;){if(e=i.alternate,e!==null&&$i(e)===null){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}ts(t,!0,n,null,o);break;case\"together\":ts(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function gi(e,t){!(t.mode&1)&&e!==null&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Je(e,t,n){if(e!==null&&(t.dependencies=e.dependencies),Ft|=t.lanes,!(n&t.childLanes))return null;if(e!==null&&t.child!==e.child)throw Error(g(153));if(t.child!==null){for(e=t.child,n=yt(e,e.pendingProps),t.child=n,n.return=t;e.sibling!==null;)e=e.sibling,n=n.sibling=yt(e,e.pendingProps),n.return=t;n.sibling=null}return t.child}function sm(e,t,n){switch(t.tag){case 3:gf(t),gn();break;case 5:Kc(t);break;case 1:ce(t.type)&&Oi(t);break;case 4:wl(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,i=t.memoizedProps.value;O(Mi,r._currentValue),r._currentValue=i;break;case 13:if(r=t.memoizedState,r!==null)return r.dehydrated!==null?(O(D,D.current&1),t.flags|=128,null):n&t.child.childLanes?Sf(e,t,n):(O(D,D.current&1),e=Je(e,t,n),e!==null?e.sibling:null);O(D,D.current&1);break;case 19:if(r=(n&t.childLanes)!==0,e.flags&128){if(r)return wf(e,t,n);t.flags|=128}if(i=t.memoizedState,i!==null&&(i.rendering=null,i.tail=null,i.lastEffect=null),O(D,D.current),r)break;return null;case 22:case 23:return t.lanes=0,vf(e,t,n)}return Je(e,t,n)}var _f,Vs,kf,Ef;_f=function(e,t){for(var n=t.child;n!==null;){if(n.tag===5||n.tag===6)e.appendChild(n.stateNode);else if(n.tag!==4&&n.child!==null){n.child.return=n,n=n.child;continue}if(n===t)break;for(;n.sibling===null;){if(n.return===null||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}};Vs=function(){};kf=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Lt(Ue.current);var o=null;switch(n){case\"input\":i=as(e,i),r=as(e,r),o=[];break;case\"select\":i=$({},i,{value:void 0}),r=$({},r,{value:void 0}),o=[];break;case\"textarea\":i=ds(e,i),r=ds(e,r),o=[];break;default:typeof i.onClick!=\"function\"&&typeof r.onClick==\"function\"&&(e.onclick=zi)}hs(n,r);var s;n=null;for(a in i)if(!r.hasOwnProperty(a)&&i.hasOwnProperty(a)&&i[a]!=null)if(a===\"style\"){var l=i[a];for(s in l)l.hasOwnProperty(s)&&(n||(n={}),n[s]=\"\")}else a!==\"dangerouslySetInnerHTML\"&&a!==\"children\"&&a!==\"suppressContentEditableWarning\"&&a!==\"suppressHydrationWarning\"&&a!==\"autoFocus\"&&(ir.hasOwnProperty(a)?o||(o=[]):(o=o||[]).push(a,null));for(a in r){var u=r[a];if(l=i?.[a],r.hasOwnProperty(a)&&u!==l&&(u!=null||l!=null))if(a===\"style\")if(l){for(s in l)!l.hasOwnProperty(s)||u&&u.hasOwnProperty(s)||(n||(n={}),n[s]=\"\");for(s in u)u.hasOwnProperty(s)&&l[s]!==u[s]&&(n||(n={}),n[s]=u[s])}else n||(o||(o=[]),o.push(a,n)),n=u;else a===\"dangerouslySetInnerHTML\"?(u=u?u.__html:void 0,l=l?l.__html:void 0,u!=null&&l!==u&&(o=o||[]).push(a,u)):a===\"children\"?typeof u!=\"string\"&&typeof u!=\"number\"||(o=o||[]).push(a,\"\"+u):a!==\"suppressContentEditableWarning\"&&a!==\"suppressHydrationWarning\"&&(ir.hasOwnProperty(a)?(u!=null&&a===\"onScroll\"&&L(\"scroll\",e),o||l===u||(o=[])):(o=o||[]).push(a,u))}n&&(o=o||[]).push(\"style\",n);var a=o;(t.updateQueue=a)&&(t.flags|=4)}};Ef=function(e,t,n,r){n!==r&&(t.flags|=4)};function Bn(e,t){if(!M)switch(e.tailMode){case\"hidden\":t=e.tail;for(var n=null;t!==null;)t.alternate!==null&&(n=t),t=t.sibling;n===null?e.tail=null:n.sibling=null;break;case\"collapsed\":n=e.tail;for(var r=null;n!==null;)n.alternate!==null&&(r=n),n=n.sibling;r===null?t||e.tail===null?e.tail=null:e.tail.sibling=null:r.sibling=null}}function q(e){var t=e.alternate!==null&&e.alternate.child===e.child,n=0,r=0;if(t)for(var i=e.child;i!==null;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags&14680064,r|=i.flags&14680064,i.return=e,i=i.sibling;else for(i=e.child;i!==null;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function lm(e,t,n){var r=t.pendingProps;switch(pl(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return q(t),null;case 1:return ce(t.type)&&Ri(),q(t),null;case 3:return r=t.stateNode,wn(),A(ae),A(ee),kl(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),(e===null||e.child===null)&&(li(t)?t.flags|=4:e===null||e.memoizedState.isDehydrated&&!(t.flags&256)||(t.flags|=1024,ze!==null&&(Gs(ze),ze=null))),Vs(e,t),q(t),null;case 5:_l(t);var i=Lt(vr.current);if(n=t.type,e!==null&&t.stateNode!=null)kf(e,t,n,r,i),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(t.stateNode===null)throw Error(g(166));return q(t),null}if(e=Lt(Ue.current),li(t)){r=t.stateNode,n=t.type;var o=t.memoizedProps;switch(r[$e]=t,r[hr]=o,e=(t.mode&1)!==0,n){case\"dialog\":L(\"cancel\",r),L(\"close\",r);break;case\"iframe\":case\"object\":case\"embed\":L(\"load\",r);break;case\"video\":case\"audio\":for(i=0;i<Yn.length;i++)L(Yn[i],r);break;case\"source\":L(\"error\",r);break;case\"img\":case\"image\":case\"link\":L(\"error\",r),L(\"load\",r);break;case\"details\":L(\"toggle\",r);break;case\"input\":ju(r,o),L(\"invalid\",r);break;case\"select\":r._wrapperState={wasMultiple:!!o.multiple},L(\"invalid\",r);break;case\"textarea\":Fu(r,o),L(\"invalid\",r)}hs(n,o),i=null;for(var s in o)if(o.hasOwnProperty(s)){var l=o[s];s===\"children\"?typeof l==\"string\"?r.textContent!==l&&(o.suppressHydrationWarning!==!0&&si(r.textContent,l,e),i=[\"children\",l]):typeof l==\"number\"&&r.textContent!==\"\"+l&&(o.suppressHydrationWarning!==!0&&si(r.textContent,l,e),i=[\"children\",\"\"+l]):ir.hasOwnProperty(s)&&l!=null&&s===\"onScroll\"&&L(\"scroll\",r)}switch(n){case\"input\":Yr(r),$u(r,o,!0);break;case\"textarea\":Yr(r),Uu(r);break;case\"select\":case\"option\":break;default:typeof o.onClick==\"function\"&&(r.onclick=zi)}r=i,t.updateQueue=r,r!==null&&(t.flags|=4)}else{s=i.nodeType===9?i:i.ownerDocument,e===\"http://www.w3.org/1999/xhtml\"&&(e=Ga(n)),e===\"http://www.w3.org/1999/xhtml\"?n===\"script\"?(e=s.createElement(\"div\"),e.innerHTML=\"<script><\\/script>\",e=e.removeChild(e.firstChild)):typeof r.is==\"string\"?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),n===\"select\"&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[$e]=t,e[hr]=r,_f(e,t,!1,!1),t.stateNode=e;e:{switch(s=ms(n,r),n){case\"dialog\":L(\"cancel\",e),L(\"close\",e),i=r;break;case\"iframe\":case\"object\":case\"embed\":L(\"load\",e),i=r;break;case\"video\":case\"audio\":for(i=0;i<Yn.length;i++)L(Yn[i],e);i=r;break;case\"source\":L(\"error\",e),i=r;break;case\"img\":case\"image\":case\"link\":L(\"error\",e),L(\"load\",e),i=r;break;case\"details\":L(\"toggle\",e),i=r;break;case\"input\":ju(e,r),i=as(e,r),L(\"invalid\",e);break;case\"option\":i=r;break;case\"select\":e._wrapperState={wasMultiple:!!r.multiple},i=$({},r,{value:void 0}),L(\"invalid\",e);break;case\"textarea\":Fu(e,r),i=ds(e,r),L(\"invalid\",e);break;default:i=r}hs(n,i),l=i;for(o in l)if(l.hasOwnProperty(o)){var u=l[o];o===\"style\"?qa(e,u):o===\"dangerouslySetInnerHTML\"?(u=u?u.__html:void 0,u!=null&&Ja(e,u)):o===\"children\"?typeof u==\"string\"?(n!==\"textarea\"||u!==\"\")&&or(e,u):typeof u==\"number\"&&or(e,\"\"+u):o!==\"suppressContentEditableWarning\"&&o!==\"suppressHydrationWarning\"&&o!==\"autoFocus\"&&(ir.hasOwnProperty(o)?u!=null&&o===\"onScroll\"&&L(\"scroll\",e):u!=null&&qs(e,o,u,s))}switch(n){case\"input\":Yr(e),$u(e,r,!1);break;case\"textarea\":Yr(e),Uu(e);break;case\"option\":r.value!=null&&e.setAttribute(\"value\",\"\"+gt(r.value));break;case\"select\":e.multiple=!!r.multiple,o=r.value,o!=null?cn(e,!!r.multiple,o,!1):r.defaultValue!=null&&cn(e,!!r.multiple,r.defaultValue,!0);break;default:typeof i.onClick==\"function\"&&(e.onclick=zi)}switch(n){case\"button\":case\"input\":case\"select\":case\"textarea\":r=!!r.autoFocus;break e;case\"img\":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}t.ref!==null&&(t.flags|=512,t.flags|=2097152)}return q(t),null;case 6:if(e&&t.stateNode!=null)Ef(e,t,e.memoizedProps,r);else{if(typeof r!=\"string\"&&t.stateNode===null)throw Error(g(166));if(n=Lt(vr.current),Lt(Ue.current),li(t)){if(r=t.stateNode,n=t.memoizedProps,r[$e]=t,(o=r.nodeValue!==n)&&(e=he,e!==null))switch(e.tag){case 3:si(r.nodeValue,n,(e.mode&1)!==0);break;case 5:e.memoizedProps.suppressHydrationWarning!==!0&&si(r.nodeValue,n,(e.mode&1)!==0)}o&&(t.flags|=4)}else r=(n.nodeType===9?n:n.ownerDocument).createTextNode(r),r[$e]=t,t.stateNode=r}return q(t),null;case 13:if(A(D),r=t.memoizedState,e===null||e.memoizedState!==null&&e.memoizedState.dehydrated!==null){if(M&&pe!==null&&t.mode&1&&!(t.flags&128))Fc(),gn(),t.flags|=98560,o=!1;else if(o=li(t),r!==null&&r.dehydrated!==null){if(e===null){if(!o)throw Error(g(318));if(o=t.memoizedState,o=o!==null?o.dehydrated:null,!o)throw Error(g(317));o[$e]=t}else gn(),!(t.flags&128)&&(t.memoizedState=null),t.flags|=4;q(t),o=!1}else ze!==null&&(Gs(ze),ze=null),o=!0;if(!o)return t.flags&65536?t:null}return t.flags&128?(t.lanes=n,t):(r=r!==null,r!==(e!==null&&e.memoizedState!==null)&&r&&(t.child.flags|=8192,t.mode&1&&(e===null||D.current&1?W===0&&(W=3):Al())),t.updateQueue!==null&&(t.flags|=4),q(t),null);case 4:return wn(),Vs(e,t),e===null&&dr(t.stateNode.containerInfo),q(t),null;case 10:return yl(t.type._context),q(t),null;case 17:return ce(t.type)&&Ri(),q(t),null;case 19:if(A(D),o=t.memoizedState,o===null)return q(t),null;if(r=(t.flags&128)!==0,s=o.rendering,s===null)if(r)Bn(o,!1);else{if(W!==0||e!==null&&e.flags&128)for(e=t.child;e!==null;){if(s=$i(e),s!==null){for(t.flags|=128,Bn(o,!1),r=s.updateQueue,r!==null&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;n!==null;)o=n,e=r,o.flags&=14680066,s=o.alternate,s===null?(o.childLanes=0,o.lanes=e,o.child=null,o.subtreeFlags=0,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null,o.stateNode=null):(o.childLanes=s.childLanes,o.lanes=s.lanes,o.child=s.child,o.subtreeFlags=0,o.deletions=null,o.memoizedProps=s.memoizedProps,o.memoizedState=s.memoizedState,o.updateQueue=s.updateQueue,o.type=s.type,e=s.dependencies,o.dependencies=e===null?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return O(D,D.current&1|2),t.child}e=e.sibling}o.tail!==null&&U()>kn&&(t.flags|=128,r=!0,Bn(o,!1),t.lanes=4194304)}else{if(!r)if(e=$i(s),e!==null){if(t.flags|=128,r=!0,n=e.updateQueue,n!==null&&(t.updateQueue=n,t.flags|=4),Bn(o,!0),o.tail===null&&o.tailMode===\"hidden\"&&!s.alternate&&!M)return q(t),null}else 2*U()-o.renderingStartTime>kn&&n!==1073741824&&(t.flags|=128,r=!0,Bn(o,!1),t.lanes=4194304);o.isBackwards?(s.sibling=t.child,t.child=s):(n=o.last,n!==null?n.sibling=s:t.child=s,o.last=s)}return o.tail!==null?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=U(),t.sibling=null,n=D.current,O(D,r?n&1|2:n&1),t):(q(t),null);case 22:case 23:return Ll(),r=t.memoizedState!==null,e!==null&&e.memoizedState!==null!==r&&(t.flags|=8192),r&&t.mode&1?de&1073741824&&(q(t),t.subtreeFlags&6&&(t.flags|=8192)):q(t),null;case 24:return null;case 25:return null}throw Error(g(156,t.tag))}function um(e,t){switch(pl(t),t.tag){case 1:return ce(t.type)&&Ri(),e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 3:return wn(),A(ae),A(ee),kl(),e=t.flags,e&65536&&!(e&128)?(t.flags=e&-65537|128,t):null;case 5:return _l(t),null;case 13:if(A(D),e=t.memoizedState,e!==null&&e.dehydrated!==null){if(t.alternate===null)throw Error(g(340));gn()}return e=t.flags,e&65536?(t.flags=e&-65537|128,t):null;case 19:return A(D),null;case 4:return wn(),null;case 10:return yl(t.type._context),null;case 22:case 23:return Ll(),null;case 24:return null;default:return null}}var ci=!1,b=!1,am=typeof WeakSet==\"function\"?WeakSet:Set,_=null;function un(e,t){var n=e.ref;if(n!==null)if(typeof n==\"function\")try{n(null)}catch(r){F(e,t,r)}else n.current=null}function Bs(e,t,n){try{n()}catch(r){F(e,t,r)}}var za=!1;function cm(e,t){if(Cs=Pi,e=Tc(),fl(e)){if(\"selectionStart\"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{n=(n=e.ownerDocument)&&n.defaultView||window;var r=n.getSelection&&n.getSelection();if(r&&r.rangeCount!==0){n=r.anchorNode;var i=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{n.nodeType,o.nodeType}catch{n=null;break e}var s=0,l=-1,u=-1,a=0,p=0,f=e,d=null;t:for(;;){for(var v;f!==n||i!==0&&f.nodeType!==3||(l=s+i),f!==o||r!==0&&f.nodeType!==3||(u=s+r),f.nodeType===3&&(s+=f.nodeValue.length),(v=f.firstChild)!==null;)d=f,f=v;for(;;){if(f===e)break t;if(d===n&&++a===i&&(l=s),d===o&&++p===r&&(u=s),(v=f.nextSibling)!==null)break;f=d,d=f.parentNode}f=v}n=l===-1||u===-1?null:{start:l,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(Ts={focusedElem:e,selectionRange:n},Pi=!1,_=t;_!==null;)if(t=_,e=t.child,(t.subtreeFlags&1028)!==0&&e!==null)e.return=t,_=e;else for(;_!==null;){t=_;try{var y=t.alternate;if(t.flags&1024)switch(t.tag){case 0:case 11:case 15:break;case 1:if(y!==null){var w=y.memoizedProps,T=y.memoizedState,h=t.stateNode,c=h.getSnapshotBeforeUpdate(t.elementType===t.type?w:Ie(t.type,w),T);h.__reactInternalSnapshotBeforeUpdate=c}break;case 3:var m=t.stateNode.containerInfo;m.nodeType===1?m.textContent=\"\":m.nodeType===9&&m.documentElement&&m.removeChild(m.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(g(163))}}catch(S){F(t,t.return,S)}if(e=t.sibling,e!==null){e.return=t.return,_=e;break}_=t.return}return y=za,za=!1,y}function tr(e,t,n){var r=t.updateQueue;if(r=r!==null?r.lastEffect:null,r!==null){var i=r=r.next;do{if((i.tag&e)===e){var o=i.destroy;i.destroy=void 0,o!==void 0&&Bs(t,n,o)}i=i.next}while(i!==r)}}function eo(e,t){if(t=t.updateQueue,t=t!==null?t.lastEffect:null,t!==null){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function Ws(e){var t=e.ref;if(t!==null){var n=e.stateNode;switch(e.tag){case 5:e=n;break;default:e=n}typeof t==\"function\"?t(e):t.current=e}}function xf(e){var t=e.alternate;t!==null&&(e.alternate=null,xf(t)),e.child=null,e.deletions=null,e.sibling=null,e.tag===5&&(t=e.stateNode,t!==null&&(delete t[$e],delete t[hr],delete t[Ns],delete t[Kh],delete t[Xh])),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function Cf(e){return e.tag===5||e.tag===3||e.tag===4}function Ra(e){e:for(;;){for(;e.sibling===null;){if(e.return===null||Cf(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;e.tag!==5&&e.tag!==6&&e.tag!==18;){if(e.flags&2||e.child===null||e.tag===4)continue e;e.child.return=e,e=e.child}if(!(e.flags&2))return e.stateNode}}function Hs(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.nodeType===8?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(n.nodeType===8?(t=n.parentNode,t.insertBefore(e,n)):(t=n,t.appendChild(e)),n=n._reactRootContainer,n!=null||t.onclick!==null||(t.onclick=zi));else if(r!==4&&(e=e.child,e!==null))for(Hs(e,t,n),e=e.sibling;e!==null;)Hs(e,t,n),e=e.sibling}function Qs(e,t,n){var r=e.tag;if(r===5||r===6)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(r!==4&&(e=e.child,e!==null))for(Qs(e,t,n),e=e.sibling;e!==null;)Qs(e,t,n),e=e.sibling}var X=null,Ne=!1;function rt(e,t,n){for(n=n.child;n!==null;)Tf(e,t,n),n=n.sibling}function Tf(e,t,n){if(Fe&&typeof Fe.onCommitFiberUnmount==\"function\")try{Fe.onCommitFiberUnmount(Ki,n)}catch{}switch(n.tag){case 5:b||un(n,t);case 6:var r=X,i=Ne;X=null,rt(e,t,n),X=r,Ne=i,X!==null&&(Ne?(e=X,n=n.stateNode,e.nodeType===8?e.parentNode.removeChild(n):e.removeChild(n)):X.removeChild(n.stateNode));break;case 18:X!==null&&(Ne?(e=X,n=n.stateNode,e.nodeType===8?Yo(e.parentNode,n):e.nodeType===1&&Yo(e,n),ar(e)):Yo(X,n.stateNode));break;case 4:r=X,i=Ne,X=n.stateNode.containerInfo,Ne=!0,rt(e,t,n),X=r,Ne=i;break;case 0:case 11:case 14:case 15:if(!b&&(r=n.updateQueue,r!==null&&(r=r.lastEffect,r!==null))){i=r=r.next;do{var o=i,s=o.destroy;o=o.tag,s!==void 0&&(o&2||o&4)&&Bs(n,t,s),i=i.next}while(i!==r)}rt(e,t,n);break;case 1:if(!b&&(un(n,t),r=n.stateNode,typeof r.componentWillUnmount==\"function\"))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(l){F(n,t,l)}rt(e,t,n);break;case 21:rt(e,t,n);break;case 22:n.mode&1?(b=(r=b)||n.memoizedState!==null,rt(e,t,n),b=r):rt(e,t,n);break;default:rt(e,t,n)}}function Oa(e){var t=e.updateQueue;if(t!==null){e.updateQueue=null;var n=e.stateNode;n===null&&(n=e.stateNode=new am),t.forEach(function(r){var i=Sm.bind(null,e,r);n.has(r)||(n.add(r),r.then(i,i))})}}function Pe(e,t){var n=t.deletions;if(n!==null)for(var r=0;r<n.length;r++){var i=n[r];try{var o=e,s=t,l=s;e:for(;l!==null;){switch(l.tag){case 5:X=l.stateNode,Ne=!1;break e;case 3:X=l.stateNode.containerInfo,Ne=!0;break e;case 4:X=l.stateNode.containerInfo,Ne=!0;break e}l=l.return}if(X===null)throw Error(g(160));Tf(o,s,i),X=null,Ne=!1;var u=i.alternate;u!==null&&(u.return=null),i.return=null}catch(a){F(i,t,a)}}if(t.subtreeFlags&12854)for(t=t.child;t!==null;)Pf(t,e),t=t.sibling}function Pf(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(Pe(t,e),De(e),r&4){try{tr(3,e,e.return),eo(3,e)}catch(w){F(e,e.return,w)}try{tr(5,e,e.return)}catch(w){F(e,e.return,w)}}break;case 1:Pe(t,e),De(e),r&512&&n!==null&&un(n,n.return);break;case 5:if(Pe(t,e),De(e),r&512&&n!==null&&un(n,n.return),e.flags&32){var i=e.stateNode;try{or(i,\"\")}catch(w){F(e,e.return,w)}}if(r&4&&(i=e.stateNode,i!=null)){var o=e.memoizedProps,s=n!==null?n.memoizedProps:o,l=e.type,u=e.updateQueue;if(e.updateQueue=null,u!==null)try{l===\"input\"&&o.type===\"radio\"&&o.name!=null&&Xa(i,o),ms(l,s);var a=ms(l,o);for(s=0;s<u.length;s+=2){var p=u[s],f=u[s+1];p===\"style\"?qa(i,f):p===\"dangerouslySetInnerHTML\"?Ja(i,f):p===\"children\"?or(i,f):qs(i,p,f,a)}switch(l){case\"input\":cs(i,o);break;case\"textarea\":Ya(i,o);break;case\"select\":var d=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!o.multiple;var v=o.value;v!=null?cn(i,!!o.multiple,v,!1):d!==!!o.multiple&&(o.defaultValue!=null?cn(i,!!o.multiple,o.defaultValue,!0):cn(i,!!o.multiple,o.multiple?[]:\"\",!1))}i[hr]=o}catch(w){F(e,e.return,w)}}break;case 6:if(Pe(t,e),De(e),r&4){if(e.stateNode===null)throw Error(g(162));i=e.stateNode,o=e.memoizedProps;try{i.nodeValue=o}catch(w){F(e,e.return,w)}}break;case 3:if(Pe(t,e),De(e),r&4&&n!==null&&n.memoizedState.isDehydrated)try{ar(t.containerInfo)}catch(w){F(e,e.return,w)}break;case 4:Pe(t,e),De(e);break;case 13:Pe(t,e),De(e),i=e.child,i.flags&8192&&(o=i.memoizedState!==null,i.stateNode.isHidden=o,!o||i.alternate!==null&&i.alternate.memoizedState!==null||(Rl=U())),r&4&&Oa(e);break;case 22:if(p=n!==null&&n.memoizedState!==null,e.mode&1?(b=(a=b)||p,Pe(t,e),b=a):Pe(t,e),De(e),r&8192){if(a=e.memoizedState!==null,(e.stateNode.isHidden=a)&&!p&&e.mode&1)for(_=e,p=e.child;p!==null;){for(f=_=p;_!==null;){switch(d=_,v=d.child,d.tag){case 0:case 11:case 14:case 15:tr(4,d,d.return);break;case 1:un(d,d.return);var y=d.stateNode;if(typeof y.componentWillUnmount==\"function\"){r=d,n=d.return;try{t=r,y.props=t.memoizedProps,y.state=t.memoizedState,y.componentWillUnmount()}catch(w){F(r,n,w)}}break;case 5:un(d,d.return);break;case 22:if(d.memoizedState!==null){Aa(f);continue}}v!==null?(v.return=d,_=v):Aa(f)}p=p.sibling}e:for(p=null,f=e;;){if(f.tag===5){if(p===null){p=f;try{i=f.stateNode,a?(o=i.style,typeof o.setProperty==\"function\"?o.setProperty(\"display\",\"none\",\"important\"):o.display=\"none\"):(l=f.stateNode,u=f.memoizedProps.style,s=u!=null&&u.hasOwnProperty(\"display\")?u.display:null,l.style.display=Za(\"display\",s))}catch(w){F(e,e.return,w)}}}else if(f.tag===6){if(p===null)try{f.stateNode.nodeValue=a?\"\":f.memoizedProps}catch(w){F(e,e.return,w)}}else if((f.tag!==22&&f.tag!==23||f.memoizedState===null||f===e)&&f.child!==null){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;f.sibling===null;){if(f.return===null||f.return===e)break e;p===f&&(p=null),f=f.return}p===f&&(p=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:Pe(t,e),De(e),r&4&&Oa(e);break;case 21:break;default:Pe(t,e),De(e)}}function De(e){var t=e.flags;if(t&2){try{e:{for(var n=e.return;n!==null;){if(Cf(n)){var r=n;break e}n=n.return}throw Error(g(160))}switch(r.tag){case 5:var i=r.stateNode;r.flags&32&&(or(i,\"\"),r.flags&=-33);var o=Ra(e);Qs(e,o,i);break;case 3:case 4:var s=r.stateNode.containerInfo,l=Ra(e);Hs(e,l,s);break;default:throw Error(g(161))}}catch(u){F(e,e.return,u)}e.flags&=-3}t&4096&&(e.flags&=-4097)}function fm(e,t,n){_=e,If(e,t,n)}function If(e,t,n){for(var r=(e.mode&1)!==0;_!==null;){var i=_,o=i.child;if(i.tag===22&&r){var s=i.memoizedState!==null||ci;if(!s){var l=i.alternate,u=l!==null&&l.memoizedState!==null||b;l=ci;var a=b;if(ci=s,(b=u)&&!a)for(_=i;_!==null;)s=_,u=s.child,s.tag===22&&s.memoizedState!==null?Ma(i):u!==null?(u.return=s,_=u):Ma(i);for(;o!==null;)_=o,If(o,t,n),o=o.sibling;_=i,ci=l,b=a}La(e,t,n)}else i.subtreeFlags&8772&&o!==null?(o.return=i,_=o):La(e,t,n)}}function La(e){for(;_!==null;){var t=_;if(t.flags&8772){var n=t.alternate;try{if(t.flags&8772)switch(t.tag){case 0:case 11:case 15:b||eo(5,t);break;case 1:var r=t.stateNode;if(t.flags&4&&!b)if(n===null)r.componentDidMount();else{var i=t.elementType===t.type?n.memoizedProps:Ie(t.type,n.memoizedProps);r.componentDidUpdate(i,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var o=t.updateQueue;o!==null&&va(t,o,r);break;case 3:var s=t.updateQueue;if(s!==null){if(n=null,t.child!==null)switch(t.child.tag){case 5:n=t.child.stateNode;break;case 1:n=t.child.stateNode}va(t,s,n)}break;case 5:var l=t.stateNode;if(n===null&&t.flags&4){n=l;var u=t.memoizedProps;switch(t.type){case\"button\":case\"input\":case\"select\":case\"textarea\":u.autoFocus&&n.focus();break;case\"img\":u.src&&(n.src=u.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(t.memoizedState===null){var a=t.alternate;if(a!==null){var p=a.memoizedState;if(p!==null){var f=p.dehydrated;f!==null&&ar(f)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(g(163))}b||t.flags&512&&Ws(t)}catch(d){F(t,t.return,d)}}if(t===e){_=null;break}if(n=t.sibling,n!==null){n.return=t.return,_=n;break}_=t.return}}function Aa(e){for(;_!==null;){var t=_;if(t===e){_=null;break}var n=t.sibling;if(n!==null){n.return=t.return,_=n;break}_=t.return}}function Ma(e){for(;_!==null;){var t=_;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{eo(4,t)}catch(u){F(t,n,u)}break;case 1:var r=t.stateNode;if(typeof r.componentDidMount==\"function\"){var i=t.return;try{r.componentDidMount()}catch(u){F(t,i,u)}}var o=t.return;try{Ws(t)}catch(u){F(t,o,u)}break;case 5:var s=t.return;try{Ws(t)}catch(u){F(t,s,u)}}}catch(u){F(t,t.return,u)}if(t===e){_=null;break}var l=t.sibling;if(l!==null){l.return=t.return,_=l;break}_=t.return}}var dm=Math.ceil,Vi=Ze.ReactCurrentDispatcher,Nl=Ze.ReactCurrentOwner,ke=Ze.ReactCurrentBatchConfig,I=0,K=null,V=null,Y=0,de=0,an=_t(0),W=0,wr=null,Ft=0,to=0,zl=0,nr=null,le=null,Rl=0,kn=1/0,Be=null,Bi=!1,Ks=null,mt=null,fi=!1,at=null,Wi=0,rr=0,Xs=null,Si=-1,wi=0;function ie(){return I&6?U():Si!==-1?Si:Si=U()}function vt(e){return e.mode&1?I&2&&Y!==0?Y&-Y:Gh.transition!==null?(wi===0&&(wi=cc()),wi):(e=z,e!==0||(e=window.event,e=e===void 0?16:yc(e.type)),e):1}function Oe(e,t,n,r){if(50<rr)throw rr=0,Xs=null,Error(g(185));_r(e,n,r),(!(I&2)||e!==K)&&(e===K&&(!(I&2)&&(to|=n),W===4&&lt(e,Y)),fe(e,r),n===1&&I===0&&!(t.mode&1)&&(kn=U()+500,Zi&&kt()))}function fe(e,t){var n=e.callbackNode;Zp(e,t);var r=Ti(e,e===K?Y:0);if(r===0)n!==null&&Wu(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(n!=null&&Wu(n),t===1)e.tag===0?Yh(Da.bind(null,e)):Dc(Da.bind(null,e)),Hh(function(){!(I&6)&&kt()}),n=null;else{switch(fc(r)){case 1:n=rl;break;case 4:n=uc;break;case 16:n=Ci;break;case 536870912:n=ac;break;default:n=Ci}n=Df(n,Nf.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function Nf(e,t){if(Si=-1,wi=0,I&6)throw Error(g(327));var n=e.callbackNode;if(mn()&&e.callbackNode!==n)return null;var r=Ti(e,e===K?Y:0);if(r===0)return null;if(r&30||r&e.expiredLanes||t)t=Hi(e,r);else{t=r;var i=I;I|=2;var o=Rf();(K!==e||Y!==t)&&(Be=null,kn=U()+500,At(e,t));do try{mm();break}catch(l){zf(e,l)}while(!0);vl(),Vi.current=o,I=i,V!==null?t=0:(K=null,Y=0,t=W)}if(t!==0){if(t===2&&(i=ws(e),i!==0&&(r=i,t=Ys(e,i))),t===1)throw n=wr,At(e,0),lt(e,r),fe(e,U()),n;if(t===6)lt(e,r);else{if(i=e.current.alternate,!(r&30)&&!pm(i)&&(t=Hi(e,r),t===2&&(o=ws(e),o!==0&&(r=o,t=Ys(e,o))),t===1))throw n=wr,At(e,0),lt(e,r),fe(e,U()),n;switch(e.finishedWork=i,e.finishedLanes=r,t){case 0:case 1:throw Error(g(345));case 2:zt(e,le,Be);break;case 3:if(lt(e,r),(r&130023424)===r&&(t=Rl+500-U(),10<t)){if(Ti(e,0)!==0)break;if(i=e.suspendedLanes,(i&r)!==r){ie(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=Is(zt.bind(null,e,le,Be),t);break}zt(e,le,Be);break;case 4:if(lt(e,r),(r&4194240)===r)break;for(t=e.eventTimes,i=-1;0<r;){var s=31-Re(r);o=1<<s,s=t[s],s>i&&(i=s),r&=~o}if(r=i,r=U()-r,r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*dm(r/1960))-r,10<r){e.timeoutHandle=Is(zt.bind(null,e,le,Be),r);break}zt(e,le,Be);break;case 5:zt(e,le,Be);break;default:throw Error(g(329))}}}return fe(e,U()),e.callbackNode===n?Nf.bind(null,e):null}function Ys(e,t){var n=nr;return e.current.memoizedState.isDehydrated&&(At(e,t).flags|=256),e=Hi(e,t),e!==2&&(t=le,le=n,t!==null&&Gs(t)),e}function Gs(e){le===null?le=e:le.push.apply(le,e)}function pm(e){for(var t=e;;){if(t.flags&16384){var n=t.updateQueue;if(n!==null&&(n=n.stores,n!==null))for(var r=0;r<n.length;r++){var i=n[r],o=i.getSnapshot;i=i.value;try{if(!Le(o(),i))return!1}catch{return!1}}}if(n=t.child,t.subtreeFlags&16384&&n!==null)n.return=t,t=n;else{if(t===e)break;for(;t.sibling===null;){if(t.return===null||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}function lt(e,t){for(t&=~zl,t&=~to,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Re(t),r=1<<n;e[n]=-1,t&=~r}}function Da(e){if(I&6)throw Error(g(327));mn();var t=Ti(e,0);if(!(t&1))return fe(e,U()),null;var n=Hi(e,t);if(e.tag!==0&&n===2){var r=ws(e);r!==0&&(t=r,n=Ys(e,r))}if(n===1)throw n=wr,At(e,0),lt(e,t),fe(e,U()),n;if(n===6)throw Error(g(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,zt(e,le,Be),fe(e,U()),null}function Ol(e,t){var n=I;I|=1;try{return e(t)}finally{I=n,I===0&&(kn=U()+500,Zi&&kt())}}function Ut(e){at!==null&&at.tag===0&&!(I&6)&&mn();var t=I;I|=1;var n=ke.transition,r=z;try{if(ke.transition=null,z=1,e)return e()}finally{z=r,ke.transition=n,I=t,!(I&6)&&kt()}}function Ll(){de=an.current,A(an)}function At(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(n!==-1&&(e.timeoutHandle=-1,Wh(n)),V!==null)for(n=V.return;n!==null;){var r=n;switch(pl(r),r.tag){case 1:r=r.type.childContextTypes,r!=null&&Ri();break;case 3:wn(),A(ae),A(ee),kl();break;case 5:_l(r);break;case 4:wn();break;case 13:A(D);break;case 19:A(D);break;case 10:yl(r.type._context);break;case 22:case 23:Ll()}n=n.return}if(K=e,V=e=yt(e.current,null),Y=de=t,W=0,wr=null,zl=to=Ft=0,le=nr=null,Ot!==null){for(t=0;t<Ot.length;t++)if(n=Ot[t],r=n.interleaved,r!==null){n.interleaved=null;var i=r.next,o=n.pending;if(o!==null){var s=o.next;o.next=i,r.next=s}n.pending=r}Ot=null}return e}function zf(e,t){do{var n=V;try{if(vl(),vi.current=Ui,Fi){for(var r=j.memoizedState;r!==null;){var i=r.queue;i!==null&&(i.pending=null),r=r.next}Fi=!1}if($t=0,Q=B=j=null,er=!1,yr=0,Nl.current=null,n===null||n.return===null){W=1,wr=t,V=null;break}e:{var o=e,s=n.return,l=n,u=t;if(t=Y,l.flags|=32768,u!==null&&typeof u==\"object\"&&typeof u.then==\"function\"){var a=u,p=l,f=p.tag;if(!(p.mode&1)&&(f===0||f===11||f===15)){var d=p.alternate;d?(p.updateQueue=d.updateQueue,p.memoizedState=d.memoizedState,p.lanes=d.lanes):(p.updateQueue=null,p.memoizedState=null)}var v=Ea(s);if(v!==null){v.flags&=-257,xa(v,s,l,o,t),v.mode&1&&ka(o,a,t),t=v,u=a;var y=t.updateQueue;if(y===null){var w=new Set;w.add(u),t.updateQueue=w}else y.add(u);break e}else{if(!(t&1)){ka(o,a,t),Al();break e}u=Error(g(426))}}else if(M&&l.mode&1){var T=Ea(s);if(T!==null){!(T.flags&65536)&&(T.flags|=256),xa(T,s,l,o,t),hl(_n(u,l));break e}}o=u=_n(u,l),W!==4&&(W=2),nr===null?nr=[o]:nr.push(o),o=s;do{switch(o.tag){case 3:o.flags|=65536,t&=-t,o.lanes|=t;var h=pf(o,u,t);ma(o,h);break e;case 1:l=u;var c=o.type,m=o.stateNode;if(!(o.flags&128)&&(typeof c.getDerivedStateFromError==\"function\"||m!==null&&typeof m.componentDidCatch==\"function\"&&(mt===null||!mt.has(m)))){o.flags|=65536,t&=-t,o.lanes|=t;var S=hf(o,l,t);ma(o,S);break e}}o=o.return}while(o!==null)}Lf(n)}catch(k){t=k,V===n&&n!==null&&(V=n=n.return);continue}break}while(!0)}function Rf(){var e=Vi.current;return Vi.current=Ui,e===null?Ui:e}function Al(){(W===0||W===3||W===2)&&(W=4),K===null||!(Ft&268435455)&&!(to&268435455)||lt(K,Y)}function Hi(e,t){var n=I;I|=2;var r=Rf();(K!==e||Y!==t)&&(Be=null,At(e,t));do try{hm();break}catch(i){zf(e,i)}while(!0);if(vl(),I=n,Vi.current=r,V!==null)throw Error(g(261));return K=null,Y=0,W}function hm(){for(;V!==null;)Of(V)}function mm(){for(;V!==null&&!Bp();)Of(V)}function Of(e){var t=Mf(e.alternate,e,de);e.memoizedProps=e.pendingProps,t===null?Lf(e):V=t,Nl.current=null}function Lf(e){var t=e;do{var n=t.alternate;if(e=t.return,t.flags&32768){if(n=um(n,t),n!==null){n.flags&=32767,V=n;return}if(e!==null)e.flags|=32768,e.subtreeFlags=0,e.deletions=null;else{W=6,V=null;return}}else if(n=lm(n,t,de),n!==null){V=n;return}if(t=t.sibling,t!==null){V=t;return}V=t=e}while(t!==null);W===0&&(W=5)}function zt(e,t,n){var r=z,i=ke.transition;try{ke.transition=null,z=1,vm(e,t,n,r)}finally{ke.transition=i,z=r}return null}function vm(e,t,n,r){do mn();while(at!==null);if(I&6)throw Error(g(327));n=e.finishedWork;var i=e.finishedLanes;if(n===null)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(g(177));e.callbackNode=null,e.callbackPriority=0;var o=n.lanes|n.childLanes;if(qp(e,o),e===K&&(V=K=null,Y=0),!(n.subtreeFlags&2064)&&!(n.flags&2064)||fi||(fi=!0,Df(Ci,function(){return mn(),null})),o=(n.flags&15990)!==0,n.subtreeFlags&15990||o){o=ke.transition,ke.transition=null;var s=z;z=1;var l=I;I|=4,Nl.current=null,cm(e,n),Pf(n,e),$h(Ts),Pi=!!Cs,Ts=Cs=null,e.current=n,fm(n,e,i),Wp(),I=l,z=s,ke.transition=o}else e.current=n;if(fi&&(fi=!1,at=e,Wi=i),o=e.pendingLanes,o===0&&(mt=null),Kp(n.stateNode,r),fe(e,U()),t!==null)for(r=e.onRecoverableError,n=0;n<t.length;n++)i=t[n],r(i.value,{componentStack:i.stack,digest:i.digest});if(Bi)throw Bi=!1,e=Ks,Ks=null,e;return Wi&1&&e.tag!==0&&mn(),o=e.pendingLanes,o&1?e===Xs?rr++:(rr=0,Xs=e):rr=0,kt(),null}function mn(){if(at!==null){var e=fc(Wi),t=ke.transition,n=z;try{if(ke.transition=null,z=16>e?16:e,at===null)var r=!1;else{if(e=at,at=null,Wi=0,I&6)throw Error(g(331));var i=I;for(I|=4,_=e.current;_!==null;){var o=_,s=o.child;if(_.flags&16){var l=o.deletions;if(l!==null){for(var u=0;u<l.length;u++){var a=l[u];for(_=a;_!==null;){var p=_;switch(p.tag){case 0:case 11:case 15:tr(8,p,o)}var f=p.child;if(f!==null)f.return=p,_=f;else for(;_!==null;){p=_;var d=p.sibling,v=p.return;if(xf(p),p===a){_=null;break}if(d!==null){d.return=v,_=d;break}_=v}}}var y=o.alternate;if(y!==null){var w=y.child;if(w!==null){y.child=null;do{var T=w.sibling;w.sibling=null,w=T}while(w!==null)}}_=o}}if(o.subtreeFlags&2064&&s!==null)s.return=o,_=s;else e:for(;_!==null;){if(o=_,o.flags&2048)switch(o.tag){case 0:case 11:case 15:tr(9,o,o.return)}var h=o.sibling;if(h!==null){h.return=o.return,_=h;break e}_=o.return}}var c=e.current;for(_=c;_!==null;){s=_;var m=s.child;if(s.subtreeFlags&2064&&m!==null)m.return=s,_=m;else e:for(s=c;_!==null;){if(l=_,l.flags&2048)try{switch(l.tag){case 0:case 11:case 15:eo(9,l)}}catch(k){F(l,l.return,k)}if(l===s){_=null;break e}var S=l.sibling;if(S!==null){S.return=l.return,_=S;break e}_=l.return}}if(I=i,kt(),Fe&&typeof Fe.onPostCommitFiberRoot==\"function\")try{Fe.onPostCommitFiberRoot(Ki,e)}catch{}r=!0}return r}finally{z=n,ke.transition=t}}return!1}function ja(e,t,n){t=_n(n,t),t=pf(e,t,1),e=ht(e,t,1),t=ie(),e!==null&&(_r(e,1,t),fe(e,t))}function F(e,t,n){if(e.tag===3)ja(e,e,n);else for(;t!==null;){if(t.tag===3){ja(t,e,n);break}else if(t.tag===1){var r=t.stateNode;if(typeof t.type.getDerivedStateFromError==\"function\"||typeof r.componentDidCatch==\"function\"&&(mt===null||!mt.has(r))){e=_n(n,e),e=hf(t,e,1),t=ht(t,e,1),e=ie(),t!==null&&(_r(t,1,e),fe(t,e));break}}t=t.return}}function ym(e,t,n){var r=e.pingCache;r!==null&&r.delete(t),t=ie(),e.pingedLanes|=e.suspendedLanes&n,K===e&&(Y&n)===n&&(W===4||W===3&&(Y&130023424)===Y&&500>U()-Rl?At(e,0):zl|=n),fe(e,t)}function Af(e,t){t===0&&(e.mode&1?(t=Zr,Zr<<=1,!(Zr&130023424)&&(Zr=4194304)):t=1);var n=ie();e=Ge(e,t),e!==null&&(_r(e,t,n),fe(e,n))}function gm(e){var t=e.memoizedState,n=0;t!==null&&(n=t.retryLane),Af(e,n)}function Sm(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;i!==null&&(n=i.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(g(314))}r!==null&&r.delete(t),Af(e,n)}var Mf;Mf=function(e,t,n){if(e!==null)if(e.memoizedProps!==t.pendingProps||ae.current)ue=!0;else{if(!(e.lanes&n)&&!(t.flags&128))return ue=!1,sm(e,t,n);ue=!!(e.flags&131072)}else ue=!1,M&&t.flags&1048576&&jc(t,Ai,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;gi(e,t),e=t.pendingProps;var i=yn(t,ee.current);hn(t,n),i=xl(null,t,r,e,i,n);var o=Cl();return t.flags|=1,typeof i==\"object\"&&i!==null&&typeof i.render==\"function\"&&i.$$typeof===void 0?(t.tag=1,t.memoizedState=null,t.updateQueue=null,ce(r)?(o=!0,Oi(t)):o=!1,t.memoizedState=i.state!==null&&i.state!==void 0?i.state:null,Sl(t),i.updater=qi,t.stateNode=i,i._reactInternals=t,Ms(t,r,e,n),t=$s(null,t,r,!0,o,n)):(t.tag=0,M&&o&&dl(t),re(null,t,i,n),t=t.child),t;case 16:r=t.elementType;e:{switch(gi(e,t),e=t.pendingProps,i=r._init,r=i(r._payload),t.type=r,i=t.tag=_m(r),e=Ie(r,e),i){case 0:t=js(null,t,r,e,n);break e;case 1:t=Pa(null,t,r,e,n);break e;case 11:t=Ca(null,t,r,e,n);break e;case 14:t=Ta(null,t,r,Ie(r.type,e),n);break e}throw Error(g(306,r,\"\"))}return t;case 0:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Ie(r,i),js(e,t,r,i,n);case 1:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Ie(r,i),Pa(e,t,r,i,n);case 3:e:{if(gf(t),e===null)throw Error(g(387));r=t.pendingProps,o=t.memoizedState,i=o.element,Vc(e,t),ji(t,r,null,n);var s=t.memoizedState;if(r=s.element,o.isDehydrated)if(o={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=o,t.memoizedState=o,t.flags&256){i=_n(Error(g(423)),t),t=Ia(e,t,r,n,i);break e}else if(r!==i){i=_n(Error(g(424)),t),t=Ia(e,t,r,n,i);break e}else for(pe=pt(t.stateNode.containerInfo.firstChild),he=t,M=!0,ze=null,n=Qc(t,null,r,n),t.child=n;n;)n.flags=n.flags&-3|4096,n=n.sibling;else{if(gn(),r===i){t=Je(e,t,n);break e}re(e,t,r,n)}t=t.child}return t;case 5:return Kc(t),e===null&&Os(t),r=t.type,i=t.pendingProps,o=e!==null?e.memoizedProps:null,s=i.children,Ps(r,i)?s=null:o!==null&&Ps(r,o)&&(t.flags|=32),yf(e,t),re(e,t,s,n),t.child;case 6:return e===null&&Os(t),null;case 13:return Sf(e,t,n);case 4:return wl(t,t.stateNode.containerInfo),r=t.pendingProps,e===null?t.child=Sn(t,null,r,n):re(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Ie(r,i),Ca(e,t,r,i,n);case 7:return re(e,t,t.pendingProps,n),t.child;case 8:return re(e,t,t.pendingProps.children,n),t.child;case 12:return re(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,o=t.memoizedProps,s=i.value,O(Mi,r._currentValue),r._currentValue=s,o!==null)if(Le(o.value,s)){if(o.children===i.children&&!ae.current){t=Je(e,t,n);break e}}else for(o=t.child,o!==null&&(o.return=t);o!==null;){var l=o.dependencies;if(l!==null){s=o.child;for(var u=l.firstContext;u!==null;){if(u.context===r){if(o.tag===1){u=Ke(-1,n&-n),u.tag=2;var a=o.updateQueue;if(a!==null){a=a.shared;var p=a.pending;p===null?u.next=u:(u.next=p.next,p.next=u),a.pending=u}}o.lanes|=n,u=o.alternate,u!==null&&(u.lanes|=n),Ls(o.return,n,t),l.lanes|=n;break}u=u.next}}else if(o.tag===10)s=o.type===t.type?null:o.child;else if(o.tag===18){if(s=o.return,s===null)throw Error(g(341));s.lanes|=n,l=s.alternate,l!==null&&(l.lanes|=n),Ls(s,n,t),s=o.sibling}else s=o.child;if(s!==null)s.return=o;else for(s=o;s!==null;){if(s===t){s=null;break}if(o=s.sibling,o!==null){o.return=s.return,s=o;break}s=s.return}o=s}re(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=t.pendingProps.children,hn(t,n),i=Ee(i),r=r(i),t.flags|=1,re(e,t,r,n),t.child;case 14:return r=t.type,i=Ie(r,t.pendingProps),i=Ie(r.type,i),Ta(e,t,r,i,n);case 15:return mf(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Ie(r,i),gi(e,t),t.tag=1,ce(r)?(e=!0,Oi(t)):e=!1,hn(t,n),Wc(t,r,i),Ms(t,r,i,n),$s(null,t,r,!0,e,n);case 19:return wf(e,t,n);case 22:return vf(e,t,n)}throw Error(g(156,t.tag))};function Df(e,t){return lc(e,t)}function wm(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function _e(e,t,n,r){return new wm(e,t,n,r)}function Ml(e){return e=e.prototype,!(!e||!e.isReactComponent)}function _m(e){if(typeof e==\"function\")return Ml(e)?1:0;if(e!=null){if(e=e.$$typeof,e===el)return 11;if(e===tl)return 14}return 2}function yt(e,t){var n=e.alternate;return n===null?(n=_e(e.tag,t,e.key,e.mode),n.elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=e.flags&14680064,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=t===null?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function _i(e,t,n,r,i,o){var s=2;if(r=e,typeof e==\"function\")Ml(e)&&(s=1);else if(typeof e==\"string\")s=5;else e:switch(e){case qt:return Mt(n.children,i,o,t);case bs:s=8,i|=8;break;case os:return e=_e(12,n,t,i|2),e.elementType=os,e.lanes=o,e;case ss:return e=_e(13,n,t,i),e.elementType=ss,e.lanes=o,e;case ls:return e=_e(19,n,t,i),e.elementType=ls,e.lanes=o,e;case Ha:return no(n,i,o,t);default:if(typeof e==\"object\"&&e!==null)switch(e.$$typeof){case Ba:s=10;break e;case Wa:s=9;break e;case el:s=11;break e;case tl:s=14;break e;case it:s=16,r=null;break e}throw Error(g(130,e==null?e:typeof e,\"\"))}return t=_e(s,n,t,i),t.elementType=e,t.type=r,t.lanes=o,t}function Mt(e,t,n,r){return e=_e(7,e,r,t),e.lanes=n,e}function no(e,t,n,r){return e=_e(22,e,r,t),e.elementType=Ha,e.lanes=n,e.stateNode={isHidden:!1},e}function ns(e,t,n){return e=_e(6,e,null,t),e.lanes=n,e}function rs(e,t,n){return t=_e(4,e.children!==null?e.children:[],e.key,t),t.lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function km(e,t,n,r,i){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=Uo(0),this.expirationTimes=Uo(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Uo(0),this.identifierPrefix=r,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function Dl(e,t,n,r,i,o,s,l,u){return e=new km(e,t,n,l,u),t===1?(t=1,o===!0&&(t|=8)):t=0,o=_e(3,null,null,t),e.current=o,o.stateNode=e,o.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Sl(o),e}function Em(e,t,n){var r=3<arguments.length&&arguments[3]!==void 0?arguments[3]:null;return{$$typeof:Zt,key:r==null?null:\"\"+r,children:e,containerInfo:t,implementation:n}}function jf(e){if(!e)return St;e=e._reactInternals;e:{if(Bt(e)!==e||e.tag!==1)throw Error(g(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(ce(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(t!==null);throw Error(g(171))}if(e.tag===1){var n=e.type;if(ce(n))return Mc(e,n,t)}return t}function $f(e,t,n,r,i,o,s,l,u){return e=Dl(n,r,!0,e,i,o,s,l,u),e.context=jf(null),n=e.current,r=ie(),i=vt(n),o=Ke(r,i),o.callback=t??null,ht(n,o,i),e.current.lanes=i,_r(e,i,r),fe(e,r),e}function ro(e,t,n,r){var i=t.current,o=ie(),s=vt(i);return n=jf(n),t.context===null?t.context=n:t.pendingContext=n,t=Ke(o,s),t.payload={element:e},r=r===void 0?null:r,r!==null&&(t.callback=r),e=ht(i,t,s),e!==null&&(Oe(e,i,s,o),mi(e,i,s)),s}function Qi(e){if(e=e.current,!e.child)return null;switch(e.child.tag){case 5:return e.child.stateNode;default:return e.child.stateNode}}function $a(e,t){if(e=e.memoizedState,e!==null&&e.dehydrated!==null){var n=e.retryLane;e.retryLane=n!==0&&n<t?n:t}}function jl(e,t){$a(e,t),(e=e.alternate)&&$a(e,t)}function xm(){return null}var Ff=typeof reportError==\"function\"?reportError:function(e){console.error(e)};function $l(e){this._internalRoot=e}io.prototype.render=$l.prototype.render=function(e){var t=this._internalRoot;if(t===null)throw Error(g(409));ro(e,t,null,null)};io.prototype.unmount=$l.prototype.unmount=function(){var e=this._internalRoot;if(e!==null){this._internalRoot=null;var t=e.containerInfo;Ut(function(){ro(null,e,null,null)}),t[Ye]=null}};function io(e){this._internalRoot=e}io.prototype.unstable_scheduleHydration=function(e){if(e){var t=hc();e={blockedOn:null,target:e,priority:t};for(var n=0;n<st.length&&t!==0&&t<st[n].priority;n++);st.splice(n,0,e),n===0&&vc(e)}};function Fl(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11)}function oo(e){return!(!e||e.nodeType!==1&&e.nodeType!==9&&e.nodeType!==11&&(e.nodeType!==8||e.nodeValue!==\" react-mount-point-unstable \"))}function Fa(){}function Cm(e,t,n,r,i){if(i){if(typeof r==\"function\"){var o=r;r=function(){var a=Qi(s);o.call(a)}}var s=$f(t,r,e,0,null,!1,!1,\"\",Fa);return e._reactRootContainer=s,e[Ye]=s.current,dr(e.nodeType===8?e.parentNode:e),Ut(),s}for(;i=e.lastChild;)e.removeChild(i);if(typeof r==\"function\"){var l=r;r=function(){var a=Qi(u);l.call(a)}}var u=Dl(e,0,!1,null,null,!1,!1,\"\",Fa);return e._reactRootContainer=u,e[Ye]=u.current,dr(e.nodeType===8?e.parentNode:e),Ut(function(){ro(t,u,n,r)}),u}function so(e,t,n,r,i){var o=n._reactRootContainer;if(o){var s=o;if(typeof i==\"function\"){var l=i;i=function(){var u=Qi(s);l.call(u)}}ro(t,s,e,i)}else s=Cm(n,t,e,i,r);return Qi(s)}dc=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=Xn(t.pendingLanes);n!==0&&(il(t,n|1),fe(t,U()),!(I&6)&&(kn=U()+500,kt()))}break;case 13:Ut(function(){var r=Ge(e,1);if(r!==null){var i=ie();Oe(r,e,1,i)}}),jl(e,1)}};ol=function(e){if(e.tag===13){var t=Ge(e,134217728);if(t!==null){var n=ie();Oe(t,e,134217728,n)}jl(e,134217728)}};pc=function(e){if(e.tag===13){var t=vt(e),n=Ge(e,t);if(n!==null){var r=ie();Oe(n,e,t,r)}jl(e,t)}};hc=function(){return z};mc=function(e,t){var n=z;try{return z=e,t()}finally{z=n}};ys=function(e,t,n){switch(t){case\"input\":if(cs(e,n),t=n.name,n.type===\"radio\"&&t!=null){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll(\"input[name=\"+JSON.stringify(\"\"+t)+'][type=\"radio\"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=Ji(r);if(!i)throw Error(g(90));Ka(r),cs(r,i)}}}break;case\"textarea\":Ya(e,n);break;case\"select\":t=n.value,t!=null&&cn(e,!!n.multiple,t,!1)}};tc=Ol;nc=Ut;var Tm={usingClientEntryPoint:!1,Events:[Er,nn,Ji,ba,ec,Ol]},Wn={findFiberByHostInstance:Rt,bundleType:0,version:\"18.2.0\",rendererPackageName:\"react-dom\"},Pm={bundleType:Wn.bundleType,version:Wn.version,rendererPackageName:Wn.rendererPackageName,rendererConfig:Wn.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Ze.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return e=oc(e),e===null?null:e.stateNode},findFiberByHostInstance:Wn.findFiberByHostInstance||xm,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:\"18.2.0-next-9e3b772b8-20220608\"};if(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<\"u\"&&(Hn=__REACT_DEVTOOLS_GLOBAL_HOOK__,!Hn.isDisabled&&Hn.supportsFiber))try{Ki=Hn.inject(Pm),Fe=Hn}catch{}var Hn;ye.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Tm;ye.createPortal=function(e,t){var n=2<arguments.length&&arguments[2]!==void 0?arguments[2]:null;if(!Fl(t))throw Error(g(200));return Em(e,t,null,n)};ye.createRoot=function(e,t){if(!Fl(e))throw Error(g(299));var n=!1,r=\"\",i=Ff;return t!=null&&(t.unstable_strictMode===!0&&(n=!0),t.identifierPrefix!==void 0&&(r=t.identifierPrefix),t.onRecoverableError!==void 0&&(i=t.onRecoverableError)),t=Dl(e,1,!1,null,null,n,!1,r,i),e[Ye]=t.current,dr(e.nodeType===8?e.parentNode:e),new $l(t)};ye.findDOMNode=function(e){if(e==null)return null;if(e.nodeType===1)return e;var t=e._reactInternals;if(t===void 0)throw typeof e.render==\"function\"?Error(g(188)):(e=Object.keys(e).join(\",\"),Error(g(268,e)));return e=oc(t),e=e===null?null:e.stateNode,e};ye.flushSync=function(e){return Ut(e)};ye.hydrate=function(e,t,n){if(!oo(t))throw Error(g(200));return so(null,e,t,!0,n)};ye.hydrateRoot=function(e,t,n){if(!Fl(e))throw Error(g(405));var r=n!=null&&n.hydratedSources||null,i=!1,o=\"\",s=Ff;if(n!=null&&(n.unstable_strictMode===!0&&(i=!0),n.identifierPrefix!==void 0&&(o=n.identifierPrefix),n.onRecoverableError!==void 0&&(s=n.onRecoverableError)),t=$f(t,null,e,1,n??null,i,!1,o,s),e[Ye]=t.current,dr(e),r)for(e=0;e<r.length;e++)n=r[e],i=n._getVersion,i=i(n._source),t.mutableSourceEagerHydrationData==null?t.mutableSourceEagerHydrationData=[n,i]:t.mutableSourceEagerHydrationData.push(n,i);return new io(t)};ye.render=function(e,t,n){if(!oo(t))throw Error(g(200));return so(null,e,t,!1,n)};ye.unmountComponentAtNode=function(e){if(!oo(e))throw Error(g(40));return e._reactRootContainer?(Ut(function(){so(null,null,e,!1,function(){e._reactRootContainer=null,e[Ye]=null})}),!0):!1};ye.unstable_batchedUpdates=Ol;ye.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!oo(n))throw Error(g(200));if(e==null||e._reactInternals===void 0)throw Error(g(38));return so(e,t,n,!1,r)};ye.version=\"18.2.0-next-9e3b772b8-20220608\"});var Wf=Ce((my,Bf)=>{\"use strict\";function Vf(){if(!(typeof __REACT_DEVTOOLS_GLOBAL_HOOK__>\"u\"||typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE!=\"function\"))try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(Vf)}catch(e){console.error(e)}}Vf(),Bf.exports=Uf()});var Qf=Ce(Ul=>{\"use strict\";var Hf=Wf();Ul.createRoot=Hf.createRoot,Ul.hydrateRoot=Hf.hydrateRoot;var vy});var Xf=Ce(Kf=>{\"use strict\";var Cn=tt();function Im(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var Nm=typeof Object.is==\"function\"?Object.is:Im,zm=Cn.useState,Rm=Cn.useEffect,Om=Cn.useLayoutEffect,Lm=Cn.useDebugValue;function Am(e,t){var n=t(),r=zm({inst:{value:n,getSnapshot:t}}),i=r[0].inst,o=r[1];return Om(function(){i.value=n,i.getSnapshot=t,Vl(i)&&o({inst:i})},[e,n,t]),Rm(function(){return Vl(i)&&o({inst:i}),e(function(){Vl(i)&&o({inst:i})})},[e]),Lm(n),n}function Vl(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!Nm(e,n)}catch{return!0}}function Mm(e,t){return t()}var Dm=typeof window>\"u\"||typeof window.document>\"u\"||typeof window.document.createElement>\"u\"?Mm:Am;Kf.useSyncExternalStore=Cn.useSyncExternalStore!==void 0?Cn.useSyncExternalStore:Dm});var Bl=Ce((Sy,Yf)=>{\"use strict\";Yf.exports=Xf()});var Xd=Ce(Kd=>{\"use strict\";var wo=tt(),Kv=Bl();function Xv(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var Yv=typeof Object.is==\"function\"?Object.is:Xv,Gv=Kv.useSyncExternalStore,Jv=wo.useRef,Zv=wo.useEffect,qv=wo.useMemo,bv=wo.useDebugValue;Kd.useSyncExternalStoreWithSelector=function(e,t,n,r,i){var o=Jv(null);if(o.current===null){var s={hasValue:!1,value:null};o.current=s}else s=o.current;o=qv(function(){function u(v){if(!a){if(a=!0,p=v,v=r(v),i!==void 0&&s.hasValue){var y=s.value;if(i(y,v))return f=y}return f=v}if(y=f,Yv(p,v))return y;var w=r(v);return i!==void 0&&i(y,w)?y:(p=v,f=w)}var a=!1,p,f,d=n===void 0?null:n;return[function(){return u(t())},d===null?void 0:function(){return u(d())}]},[t,n,r,i]);var l=Gv(e,o[0],o[1]);return Zv(function(){s.hasValue=!0,s.value=l},[l]),bv(l),l}});var Gd=Ce((Dy,Yd)=>{\"use strict\";Yd.exports=Xd()});var uy={};_o(uy,{default:()=>ly});module.exports=fp(uy);var iy=Pt(Qf()),oy=Pt(tt());var uu={};_o(uu,{createActorContext:()=>ny,shallowEqual:()=>ty,useActor:()=>rp,useActorRef:()=>np,useMachine:()=>ry,useSelector:()=>ip});var On=Pt(tt()),Ae=Pt(tt()),Zd=Pt(Bl());var Gf=Pt(tt()),jm=Gf.useLayoutEffect,Jf=jm;var lu={};_o(lu,{Actor:()=>Cr,SimulatedClock:()=>su,SpecialTargets:()=>Ar,StateMachine:()=>So,StateNode:()=>go,__unsafe_getAllOwnEventDescriptors:()=>ud,and:()=>pd,assertEvent:()=>Qv,assign:()=>Mr,cancel:()=>Ir,createActor:()=>se,createEmptyActor:()=>$d,createMachine:()=>Hd,emit:()=>ou,enqueueActions:()=>Vd,forwardTo:()=>Ud,fromCallback:()=>Ad,fromEventObservable:()=>Dd,fromObservable:()=>Md,fromPromise:()=>jd,fromTransition:()=>iu,getInitialSnapshot:()=>Vv,getNextSnapshot:()=>Bv,getStateNodes:()=>Xt,interpret:()=>ad,isMachineSnapshot:()=>ru,log:()=>Bd,matchesState:()=>ao,not:()=>dd,or:()=>hd,pathToStateValue:()=>Zl,raise:()=>Lr,sendParent:()=>Fd,sendTo:()=>Dr,setup:()=>Wv,spawnChild:()=>Nr,stateIn:()=>fd,stop:()=>cd,stopChild:()=>Kt,toObserver:()=>Pn,toPromise:()=>Hv,waitFor:()=>Uv});function $m(){if(typeof globalThis<\"u\")return globalThis;if(typeof self<\"u\")return self;if(typeof window<\"u\")return window;if(typeof global<\"u\")return global}function Fm(){let e=$m();if(e.__xstate__)return e.__xstate__}var Zf=e=>{if(typeof window>\"u\")return;let t=Fm();t&&t.register(e)};var lo=class{constructor(t){this._process=t,this._active=!1,this._current=null,this._last=null}start(){this._active=!0,this.flush()}clear(){this._current&&(this._current.next=null,this._last=this._current)}enqueue(t){let n={value:t,next:null};if(this._current){this._last.next=n,this._last=n;return}this._current=n,this._last=n,this._active&&this.flush()}flush(){for(;this._current;){let t=this._current;this._process(t.value),this._current=t.next}this._last=null}},Xl=\".\",Um=\"\",Yl=\"\",Vm=\"#\",Bm=\"*\",rd=\"xstate.init\",id=\"xstate.error\",xt=\"xstate.stop\";function Wm(e,t){return{type:`xstate.after.${e}.${t}`}}function Hl(e,t){return{type:`xstate.done.state.${e}`,output:t}}function Hm(e,t){return{type:`xstate.done.actor.${e}`,output:t}}function Gl(e,t){return{type:`xstate.error.actor.${e}`,error:t}}function Jl(e){return{type:rd,input:e}}function qe(e){setTimeout(()=>{throw e})}var Qm=typeof Symbol==\"function\"&&Symbol.observable||\"@@observable\";function qf(e,t){return`${e.sessionId}.${t}`}var Km=0;function Xm(e,t){let n=new Map,r=new Map,i=new WeakMap,o=new Set,s={},{clock:l,logger:u}=t,a={schedule:(d,v,y,w,T=Math.random().toString(36).slice(2))=>{let h={source:d,target:v,event:y,delay:w,id:T,startedAt:Date.now()},c=qf(d,T);f._snapshot._scheduledEvents[c]=h;let m=l.setTimeout(()=>{delete s[c],delete f._snapshot._scheduledEvents[c],f._relay(d,v,y)},w);s[c]=m},cancel:(d,v)=>{let y=qf(d,v),w=s[y];delete s[y],delete f._snapshot._scheduledEvents[y],l.clearTimeout(w)},cancelAll:d=>{for(let v in f._snapshot._scheduledEvents){let y=f._snapshot._scheduledEvents[v];y.source===d&&a.cancel(d,y.id)}}},p=d=>{if(!o.size)return;let v={...d,rootId:e.sessionId};o.forEach(y=>y.next?.(v))},f={_snapshot:{_scheduledEvents:(t?.snapshot&&t.snapshot.scheduler)??{}},_bookId:()=>`x:${Km++}`,_register:(d,v)=>(n.set(d,v),d),_unregister:d=>{n.delete(d.sessionId);let v=i.get(d);v!==void 0&&(r.delete(v),i.delete(d))},get:d=>r.get(d),_set:(d,v)=>{let y=r.get(d);if(y&&y!==v)throw new Error(`Actor with system ID '${d}' already exists.`);r.set(d,v),i.set(v,d)},inspect:d=>{o.add(d)},_sendInspectionEvent:p,_relay:(d,v,y)=>{f._sendInspectionEvent({type:\"@xstate.event\",sourceRef:d,actorRef:v,event:y}),v._send(y)},scheduler:a,getSnapshot:()=>({_scheduledEvents:{...f._snapshot._scheduledEvents}}),start:()=>{let d=f._snapshot._scheduledEvents;f._snapshot._scheduledEvents={};for(let v in d){let{source:y,target:w,event:T,delay:h,id:c}=d[v];a.schedule(y,w,T,h,c)}},_clock:l,_logger:u};return f}function ao(e,t){let n=bf(e),r=bf(t);return typeof r==\"string\"?typeof n==\"string\"?r===n:!1:typeof n==\"string\"?n in r:Object.keys(n).every(i=>i in r?ao(n[i],r[i]):!1)}function co(e){if(sd(e))return e;let t=[],n=\"\";for(let r=0;r<e.length;r++){switch(e.charCodeAt(r)){case 92:n+=e[r+1],r++;continue;case 46:t.push(n),n=\"\";continue}n+=e[r]}return t.push(n),t}function bf(e){if(ru(e))return e.value;if(typeof e!=\"string\")return e;let t=co(e);return Zl(t)}function Zl(e){if(e.length===1)return e[0];let t={},n=t;for(let r=0;r<e.length-1;r++)if(r===e.length-2)n[e[r]]=e[r+1];else{let i=n;n={},i[e[r]]=n}return t}function ql(e,t){let n={},r=Object.keys(e);for(let i=0;i<r.length;i++){let o=r[i];n[o]=t(e[o],o,e,i)}return n}function od(e){return sd(e)?e:[e]}function Ve(e){return e===void 0?[]:od(e)}function Ql(e,t,n,r){return typeof e==\"function\"?e({context:t,event:n,self:r}):e}function sd(e){return Array.isArray(e)}function Ym(e){return e.type.startsWith(\"xstate.error.actor\")}function Wt(e){return od(e).map(t=>typeof t>\"u\"||typeof t==\"string\"?{target:t}:t)}function ld(e){if(!(e===void 0||e===Um))return Ve(e)}function Pn(e,t,n){let r=typeof e==\"object\",i=r?e:void 0;return{next:(r?e.next:e)?.bind(i),error:(r?e.error:t)?.bind(i),complete:(r?e.complete:n)?.bind(i)}}function bl(e,t){return`${t}.${e}`}function Pr(e,t){let n=t.match(/^xstate\\.invoke\\.(\\d+)\\.(.*)/);if(!n)return e.implementations.actors[t];let[,r,i]=n,s=e.getStateNodeById(i).config.invoke;return(Array.isArray(s)?s[r]:s).src}function ud(e){return[...new Set([...e._nodes.flatMap(t=>t.ownEvents)])]}var fo=1,te=function(e){return e[e.NotStarted=0]=\"NotStarted\",e[e.Running=1]=\"Running\",e[e.Stopped=2]=\"Stopped\",e}({}),Gm={clock:{setTimeout:(e,t)=>setTimeout(e,t),clearTimeout:e=>clearTimeout(e)},logger:console.log.bind(console),devTools:!1},Cr=class{constructor(t,n){this.logic=t,this._snapshot=void 0,this.clock=void 0,this.options=void 0,this.id=void 0,this.mailbox=new lo(this._process.bind(this)),this.observers=new Set,this.eventListeners=new Map,this.logger=void 0,this._processingStatus=te.NotStarted,this._parent=void 0,this._syncSnapshot=void 0,this.ref=void 0,this._actorScope=void 0,this._systemId=void 0,this.sessionId=void 0,this.system=void 0,this._doneEvent=void 0,this.src=void 0,this._deferred=[];let r={...Gm,...n},{clock:i,logger:o,parent:s,syncSnapshot:l,id:u,systemId:a,inspect:p}=r;this.system=s?s.system:Xm(this,{clock:i,logger:o}),p&&!s&&this.system.inspect(Pn(p)),this.sessionId=this.system._bookId(),this.id=u??this.sessionId,this.logger=n?.logger??this.system._logger,this.clock=n?.clock??this.system._clock,this._parent=s,this._syncSnapshot=l,this.options=r,this.src=r.src??t,this.ref=this,this._actorScope={self:this,id:this.id,sessionId:this.sessionId,logger:this.logger,defer:f=>{this._deferred.push(f)},system:this.system,stopChild:f=>{if(f._parent!==this)throw new Error(`Cannot stop child actor ${f.id} of ${this.id} because it is not a child`);f._stop()},emit:f=>{let d=this.eventListeners.get(f.type);if(d)for(let v of Array.from(d))v(f)}},this.send=this.send.bind(this),this.system._sendInspectionEvent({type:\"@xstate.actor\",actorRef:this}),a&&(this._systemId=a,this.system._set(a,this)),this._initState(n?.snapshot??n?.state),a&&this._snapshot.status!==\"active\"&&this.system._unregister(this)}_initState(t){try{this._snapshot=t?this.logic.restoreSnapshot?this.logic.restoreSnapshot(t,this._actorScope):t:this.logic.getInitialSnapshot(this._actorScope,this.options?.input)}catch(n){this._snapshot={status:\"error\",output:void 0,error:n}}}update(t,n){this._snapshot=t;let r;for(;r=this._deferred.shift();)try{r()}catch(i){this._deferred.length=0,this._snapshot={...t,status:\"error\",error:i}}switch(this._snapshot.status){case\"active\":for(let i of this.observers)try{i.next?.(t)}catch(o){qe(o)}break;case\"done\":for(let i of this.observers)try{i.next?.(t)}catch(o){qe(o)}this._stopProcedure(),this._complete(),this._doneEvent=Hm(this.id,this._snapshot.output),this._parent&&this.system._relay(this,this._parent,this._doneEvent);break;case\"error\":this._error(this._snapshot.error);break}this.system._sendInspectionEvent({type:\"@xstate.snapshot\",actorRef:this,event:n,snapshot:t})}subscribe(t,n,r){let i=Pn(t,n,r);if(this._processingStatus!==te.Stopped)this.observers.add(i);else switch(this._snapshot.status){case\"done\":try{i.complete?.()}catch(o){qe(o)}break;case\"error\":{let o=this._snapshot.error;if(!i.error)qe(o);else try{i.error(o)}catch(s){qe(s)}break}}return{unsubscribe:()=>{this.observers.delete(i)}}}on(t,n){let r=this.eventListeners.get(t);r||(r=new Set,this.eventListeners.set(t,r));let i=n.bind(void 0);return r.add(i),{unsubscribe:()=>{r.delete(i)}}}start(){if(this._processingStatus===te.Running)return this;this._syncSnapshot&&this.subscribe({next:r=>{r.status===\"active\"&&this.system._relay(this,this._parent,{type:`xstate.snapshot.${this.id}`,snapshot:r})},error:()=>{}}),this.system._register(this.sessionId,this),this._systemId&&this.system._set(this._systemId,this),this._processingStatus=te.Running;let t=Jl(this.options.input);switch(this.system._sendInspectionEvent({type:\"@xstate.event\",sourceRef:this._parent,actorRef:this,event:t}),this._snapshot.status){case\"done\":return this.update(this._snapshot,t),this;case\"error\":return this._error(this._snapshot.error),this}if(this._parent||this.system.start(),this.logic.start)try{this.logic.start(this._snapshot,this._actorScope)}catch(r){return this._snapshot={...this._snapshot,status:\"error\",error:r},this._error(r),this}return this.update(this._snapshot,t),this.options.devTools&&this.attachDevTools(),this.mailbox.start(),this}_process(t){let n,r;try{n=this.logic.transition(this._snapshot,t,this._actorScope)}catch(i){r={err:i}}if(r){let{err:i}=r;this._snapshot={...this._snapshot,status:\"error\",error:i},this._error(i);return}this.update(n,t),t.type===xt&&(this._stopProcedure(),this._complete())}_stop(){return this._processingStatus===te.Stopped?this:(this.mailbox.clear(),this._processingStatus===te.NotStarted?(this._processingStatus=te.Stopped,this):(this.mailbox.enqueue({type:xt}),this))}stop(){if(this._parent)throw new Error(\"A non-root actor cannot be stopped directly.\");return this._stop()}_complete(){for(let t of this.observers)try{t.complete?.()}catch(n){qe(n)}this.observers.clear()}_reportError(t){if(!this.observers.size){this._parent||qe(t);return}let n=!1;for(let r of this.observers){let i=r.error;n||=!i;try{i?.(t)}catch(o){qe(o)}}this.observers.clear(),n&&qe(t)}_error(t){this._stopProcedure(),this._reportError(t),this._parent&&this.system._relay(this,this._parent,Gl(this.id,t))}_stopProcedure(){return this._processingStatus!==te.Running?this:(this.system.scheduler.cancelAll(this),this.mailbox.clear(),this.mailbox=new lo(this._process.bind(this)),this._processingStatus=te.Stopped,this.system._unregister(this),this)}_send(t){this._processingStatus!==te.Stopped&&this.mailbox.enqueue(t)}send(t){this.system._relay(void 0,this,t)}attachDevTools(){let{devTools:t}=this.options;t&&(typeof t==\"function\"?t:Zf)(this)}toJSON(){return{xstate$$type:fo,id:this.id}}getPersistedSnapshot(t){return this.logic.getPersistedSnapshot(this._snapshot,t)}[Qm](){return this}getSnapshot(){return this._snapshot}};function se(e,...[t]){return new Cr(e,t)}var ad=se;function Jm(e,t,n,r,{sendId:i}){let o=typeof i==\"function\"?i(n,r):i;return[t,o]}function Zm(e,t){e.defer(()=>{e.system.scheduler.cancel(e.self,t)})}function Ir(e){function t(n,r){}return t.type=\"xstate.cancel\",t.sendId=e,t.resolve=Jm,t.execute=Zm,t}function qm(e,t,n,r,{id:i,systemId:o,src:s,input:l,syncSnapshot:u}){let a=typeof s==\"string\"?Pr(t.machine,s):s,p=typeof i==\"function\"?i(n):i,f;return a&&(f=se(a,{id:p,src:s,parent:e.self,syncSnapshot:u,systemId:o,input:typeof l==\"function\"?l({context:t.context,event:n.event,self:e.self}):l})),[Tt(t,{children:{...t.children,[p]:f}}),{id:i,actorRef:f}]}function bm(e,{id:t,actorRef:n}){n&&e.defer(()=>{n._processingStatus!==te.Stopped&&n.start()})}function Nr(...[e,{id:t,systemId:n,input:r,syncSnapshot:i=!1}={}]){function o(s,l){}return o.type=\"snapshot.spawnChild\",o.id=t,o.systemId=n,o.src=e,o.input=r,o.syncSnapshot=i,o.resolve=qm,o.execute=bm,o}function ev(e,t,n,r,{actorRef:i}){let o=typeof i==\"function\"?i(n,r):i,s=typeof o==\"string\"?t.children[o]:o,l=t.children;return s&&(l={...l},delete l[s.id]),[Tt(t,{children:l}),s]}function tv(e,t){if(t){if(e.system._unregister(t),t._processingStatus!==te.Running){e.stopChild(t);return}e.defer(()=>{e.stopChild(t)})}}function Kt(e){function t(n,r){}return t.type=\"xstate.stopChild\",t.actorRef=e,t.resolve=ev,t.execute=tv,t}var cd=Kt;function nv(e,t,{stateValue:n}){if(typeof n==\"string\"&&zn(n)){let r=e.machine.getStateNodeById(n);return e._nodes.some(i=>i===r)}return e.matches(n)}function fd(e){function t(n,r){return!1}return t.check=nv,t.stateValue=e,t}function rv(e,{context:t,event:n},{guards:r}){return!be(r[0],t,n,e)}function dd(e){function t(n,r){return!1}return t.check=rv,t.guards=[e],t}function iv(e,{context:t,event:n},{guards:r}){return r.every(i=>be(i,t,n,e))}function pd(e){function t(n,r){return!1}return t.check=iv,t.guards=e,t}function ov(e,{context:t,event:n},{guards:r}){return r.some(i=>be(i,t,n,e))}function hd(e){function t(n,r){return!1}return t.check=ov,t.guards=e,t}function be(e,t,n,r){let{machine:i}=r,o=typeof e==\"function\",s=o?e:i.implementations.guards[typeof e==\"string\"?e:e.type];if(!o&&!s)throw new Error(`Guard '${typeof e==\"string\"?e:e.type}' is not implemented.'.`);if(typeof s!=\"function\")return be(s,t,n,r);let l={context:t,event:n},u=o||typeof e==\"string\"?void 0:\"params\"in e?typeof e.params==\"function\"?e.params({context:t,event:n}):e.params:void 0;return\"check\"in s?s.check(r,l,s):s(l,u)}var eu=e=>e.type===\"atomic\"||e.type===\"final\";function In(e){return Object.values(e.states).filter(t=>t.type!==\"history\")}function zr(e,t){let n=[];if(t===e)return n;let r=e.parent;for(;r&&r!==t;)n.push(r),r=r.parent;return n}function Rr(e){let t=new Set(e),n=vd(t);for(let r of t)if(r.type===\"compound\"&&(!n.get(r)||!n.get(r).length))ed(r).forEach(i=>t.add(i));else if(r.type===\"parallel\"){for(let i of In(r))if(i.type!==\"history\"&&!t.has(i)){let o=ed(i);for(let s of o)t.add(s)}}for(let r of t){let i=r.parent;for(;i;)t.add(i),i=i.parent}return t}function md(e,t){let n=t.get(e);if(!n)return{};if(e.type===\"compound\"){let i=n[0];if(i){if(eu(i))return i.key}else return{}}let r={};for(let i of n)r[i.key]=md(i,t);return r}function vd(e){let t=new Map;for(let n of e)t.has(n)||t.set(n,[]),n.parent&&(t.has(n.parent)||t.set(n.parent,[]),t.get(n.parent).push(n));return t}function yd(e,t){let n=Rr(t);return md(e,vd(n))}function po(e,t){return t.type===\"compound\"?In(t).some(n=>n.type===\"final\"&&e.has(n)):t.type===\"parallel\"?In(t).every(n=>po(e,n)):t.type===\"final\"}var zn=e=>e[0]===Vm;function gd(e,t){return e.transitions.get(t)||[...e.transitions.keys()].filter(r=>{if(r===Bm)return!0;if(!r.endsWith(\".*\"))return!1;let i=r.split(\".\"),o=t.split(\".\");for(let s=0;s<i.length;s++){let l=i[s],u=o[s];if(l===\"*\")return s===i.length-1;if(l!==u)return!1}return!0}).sort((r,i)=>i.length-r.length).flatMap(r=>e.transitions.get(r))}function Sd(e){let t=e.config.after;if(!t)return[];let n=(i,o)=>{let s=Wm(i,e.id),l=s.type;return e.entry.push(Lr(s,{id:l,delay:i})),e.exit.push(Ir(l)),l};return Object.keys(t).flatMap((i,o)=>{let s=t[i],l=typeof s==\"string\"?{target:s}:s,u=Number.isNaN(+i)?i:+i,a=n(u);return Ve(l).map(p=>({...p,event:a,delay:u}))}).map(i=>{let{delay:o}=i;return{...Et(e,i.event,i),delay:o}})}function Et(e,t,n){let r=ld(n.target),i=n.reenter??!1,o=sv(e,r),s={...n,actions:Ve(n.actions),guard:n.guard,target:o,source:e,reenter:i,eventType:t,toJSON:()=>({...s,source:`#${e.id}`,target:o?o.map(l=>`#${l.id}`):void 0})};return s}function wd(e){let t=new Map;if(e.config.on)for(let n of Object.keys(e.config.on)){if(n===Yl)throw new Error('Null events (\"\") cannot be specified as a transition key. Use `always: { ... }` instead.');let r=e.config.on[n];t.set(n,Wt(r).map(i=>Et(e,n,i)))}if(e.config.onDone){let n=`xstate.done.state.${e.id}`;t.set(n,Wt(e.config.onDone).map(r=>Et(e,n,r)))}for(let n of e.invoke){if(n.onDone){let r=`xstate.done.actor.${n.id}`;t.set(r,Wt(n.onDone).map(i=>Et(e,r,i)))}if(n.onError){let r=`xstate.error.actor.${n.id}`;t.set(r,Wt(n.onError).map(i=>Et(e,r,i)))}if(n.onSnapshot){let r=`xstate.snapshot.${n.id}`;t.set(r,Wt(n.onSnapshot).map(i=>Et(e,r,i)))}}for(let n of e.after){let r=t.get(n.eventType);r||(r=[],t.set(n.eventType,r)),r.push(n)}return t}function _d(e,t){let n=typeof t==\"string\"?e.states[t]:t?e.states[t.target]:void 0;if(!n&&t)throw new Error(`Initial state node \"${t}\" not found on parent state node #${e.id}`);let r={source:e,actions:!t||typeof t==\"string\"?[]:Ve(t.actions),eventType:null,reenter:!1,target:n?[n]:[],toJSON:()=>({...r,source:`#${e.id}`,target:n?[`#${n.id}`]:[]})};return r}function sv(e,t){if(t!==void 0)return t.map(n=>{if(typeof n!=\"string\")return n;if(zn(n))return e.machine.getStateNodeById(n);let r=n[0]===Xl;if(r&&!e.parent)return Tr(e,n.slice(1));let i=r?e.key+n:n;if(e.parent)try{return Tr(e.parent,i)}catch(o){throw new Error(`Invalid transition definition for state node '${e.id}':\n${o.message}`)}else throw new Error(`Invalid target: \"${n}\" is not a valid target from the root node. Did you mean \".${n}\"?`)})}function kd(e){let t=ld(e.config.target);return t?{target:t.map(n=>typeof n==\"string\"?Tr(e.parent,n):n)}:e.parent.initial}function Ht(e){return e.type===\"history\"}function ed(e){let t=tu(e);for(let n of t)for(let r of zr(n,e))t.add(r);return t}function tu(e){let t=new Set;function n(r){if(!t.has(r)){if(t.add(r),r.type===\"compound\")n(r.initial.target[0]);else if(r.type===\"parallel\")for(let i of In(r))n(i)}}return n(e),t}function Nn(e,t){if(zn(t))return e.machine.getStateNodeById(t);if(!e.states)throw new Error(`Unable to retrieve child state '${t}' from '${e.id}'; no child states exist.`);let n=e.states[t];if(!n)throw new Error(`Child state '${t}' does not exist on '${e.id}'`);return n}function Tr(e,t){if(typeof t==\"string\"&&zn(t))try{return e.machine.getStateNodeById(t)}catch{}let n=co(t).slice(),r=e;for(;n.length;){let i=n.shift();if(!i.length)break;r=Nn(r,i)}return r}function Xt(e,t){if(typeof t==\"string\"){let i=e.states[t];if(!i)throw new Error(`State '${t}' does not exist on '${e.id}'`);return[e,i]}let n=Object.keys(t),r=n.map(i=>Nn(e,i)).filter(Boolean);return[e.machine.root,e].concat(r,n.reduce((i,o)=>{let s=Nn(e,o);if(!s)return i;let l=Xt(s,t[o]);return i.concat(l)},[]))}function lv(e,t,n,r){let o=Nn(e,t).next(n,r);return!o||!o.length?e.next(n,r):o}function uv(e,t,n,r){let i=Object.keys(t),o=Nn(e,i[0]),s=ho(o,t[i[0]],n,r);return!s||!s.length?e.next(n,r):s}function av(e,t,n,r){let i=[];for(let o of Object.keys(t)){let s=t[o];if(!s)continue;let l=Nn(e,o),u=ho(l,s,n,r);u&&i.push(...u)}return i.length?i:e.next(n,r)}function ho(e,t,n,r){return typeof t==\"string\"?lv(e,t,n,r):Object.keys(t).length===1?uv(e,t,n,r):av(e,t,n,r)}function cv(e){return Object.keys(e.states).map(t=>e.states[t]).filter(t=>t.type===\"history\")}function Ct(e,t){let n=e;for(;n.parent&&n.parent!==t;)n=n.parent;return n.parent===t}function fv(e,t){let n=new Set(e),r=new Set(t);for(let i of n)if(r.has(i))return!0;for(let i of r)if(n.has(i))return!0;return!1}function Ed(e,t,n){let r=new Set;for(let i of e){let o=!1,s=new Set;for(let l of r)if(fv(Kl([i],t,n),Kl([l],t,n)))if(Ct(i.source,l.source))s.add(l);else{o=!0;break}if(!o){for(let l of s)r.delete(l);r.add(i)}}return Array.from(r)}function dv(e){let[t,...n]=e;for(let r of zr(t,void 0))if(n.every(i=>Ct(i,r)))return r}function nu(e,t){if(!e.target)return[];let n=new Set;for(let r of e.target)if(Ht(r))if(t[r.id])for(let i of t[r.id])n.add(i);else for(let i of nu(kd(r),t))n.add(i);else n.add(r);return[...n]}function xd(e,t){let n=nu(e,t);if(!n)return;if(!e.reenter&&n.every(i=>i===e.source||Ct(i,e.source)))return e.source;let r=dv(n.concat(e.source));if(r)return r;if(!e.reenter)return e.source.machine.root}function Kl(e,t,n){let r=new Set;for(let i of e)if(i.target?.length){let o=xd(i,n);i.reenter&&i.source===o&&r.add(o);for(let s of t)Ct(s,o)&&r.add(s)}return[...r]}function pv(e,t){if(e.length!==t.size)return!1;for(let n of e)if(!t.has(n))return!1;return!0}function uo(e,t,n,r,i,o){if(!e.length)return t;let s=new Set(t._nodes),l=t.historyValue,u=Ed(e,s,l),a=t;i||([a,l]=yv(a,r,n,u,s,l,o)),a=Qt(a,r,n,u.flatMap(f=>f.actions),o),a=mv(a,r,n,u,s,o,l,i);let p=[...s];a.status===\"done\"&&(a=Qt(a,r,n,p.sort((f,d)=>d.order-f.order).flatMap(f=>f.exit),o));try{return l===t.historyValue&&pv(t._nodes,s)?a:Tt(a,{_nodes:p,historyValue:l})}catch(f){throw f}}function hv(e,t,n,r,i){if(r.output===void 0)return;let o=Hl(i.id,i.output!==void 0&&i.parent?Ql(i.output,e.context,t,n.self):void 0);return Ql(r.output,e.context,o,n.self)}function mv(e,t,n,r,i,o,s,l){let u=e,a=new Set,p=new Set;vv(r,s,p,a),l&&p.add(e.machine.root);let f=new Set;for(let d of[...a].sort((v,y)=>v.order-y.order)){i.add(d);let v=[];v.push(...d.entry);for(let y of d.invoke)v.push(Nr(y.src,{...y,syncSnapshot:!!y.onSnapshot}));if(p.has(d)){let y=d.initial.actions;v.push(...y)}if(u=Qt(u,t,n,v,o,d.invoke.map(y=>y.id)),d.type===\"final\"){let y=d.parent,w=y?.type===\"parallel\"?y:y?.parent,T=w||d;for(y?.type===\"compound\"&&o.push(Hl(y.id,d.output!==void 0?Ql(d.output,u.context,t,n.self):void 0));w?.type===\"parallel\"&&!f.has(w)&&po(i,w);)f.add(w),o.push(Hl(w.id)),T=w,w=w.parent;if(w)continue;u=Tt(u,{status:\"done\",output:hv(u,t,n,u.machine.root,T)})}}return u}function vv(e,t,n,r){for(let i of e){let o=xd(i,t);for(let l of i.target||[])!Ht(l)&&(i.source!==l||i.source!==o||i.reenter)&&(r.add(l),n.add(l)),Tn(l,t,n,r);let s=nu(i,t);for(let l of s){let u=zr(l,o);o?.type===\"parallel\"&&u.push(o),Cd(r,t,n,u,!i.source.parent&&i.reenter?void 0:o)}}}function Tn(e,t,n,r){if(Ht(e))if(t[e.id]){let i=t[e.id];for(let o of i)r.add(o),Tn(o,t,n,r);for(let o of i)Wl(o,e.parent,r,t,n)}else{let i=kd(e);for(let o of i.target)r.add(o),i===e.parent?.initial&&n.add(e.parent),Tn(o,t,n,r);for(let o of i.target)Wl(o,e.parent,r,t,n)}else if(e.type===\"compound\"){let[i]=e.initial.target;Ht(i)||(r.add(i),n.add(i)),Tn(i,t,n,r),Wl(i,e,r,t,n)}else if(e.type===\"parallel\")for(let i of In(e).filter(o=>!Ht(o)))[...r].some(o=>Ct(o,i))||(Ht(i)||(r.add(i),n.add(i)),Tn(i,t,n,r))}function Cd(e,t,n,r,i){for(let o of r)if((!i||Ct(o,i))&&e.add(o),o.type===\"parallel\")for(let s of In(o).filter(l=>!Ht(l)))[...e].some(l=>Ct(l,s))||(e.add(s),Tn(s,t,n,e))}function Wl(e,t,n,r,i){Cd(n,r,i,zr(e,t))}function yv(e,t,n,r,i,o,s){let l=e,u=Kl(r,i,o);u.sort((p,f)=>f.order-p.order);let a;for(let p of u)for(let f of cv(p)){let d;f.history===\"deep\"?d=v=>eu(v)&&Ct(v,p):d=v=>v.parent===p,a??={...o},a[f.id]=Array.from(i).filter(d)}for(let p of u)l=Qt(l,t,n,[...p.exit,...p.invoke.map(f=>Kt(f.id))],s),i.delete(p);return[l,a||o]}function Td(e,t,n,r,i,o){let{machine:s}=e,l=e;for(let u of r){let v=function(){n.system._sendInspectionEvent({type:\"@xstate.action\",actorRef:n.self,action:{type:typeof u==\"string\"?u:typeof u==\"object\"?u.type:u.name||\"(anonymous)\",params:d}}),p(f,d)},a=typeof u==\"function\",p=a?u:s.implementations.actions[typeof u==\"string\"?u:u.type];if(!p)continue;let f={context:l.context,event:t,self:n.self,system:n.system},d=a||typeof u==\"string\"?void 0:\"params\"in u?typeof u.params==\"function\"?u.params({context:l.context,event:t}):u.params:void 0;if(!(\"resolve\"in p)){n.self._processingStatus===te.Running?v():n.defer(()=>{v()});continue}let y=p,[w,T,h]=y.resolve(n,l,f,d,p,i);l=w,\"retryResolve\"in y&&o?.push([y,T]),\"execute\"in y&&(n.self._processingStatus===te.Running?y.execute(n,T):n.defer(y.execute.bind(null,n,T))),h&&(l=Td(l,t,n,h,i,o))}return l}function Qt(e,t,n,r,i,o){let s=o?[]:void 0,l=Td(e,t,n,r,{internalQueue:i,deferredActorIds:o},s);return s?.forEach(([u,a])=>{u.retryResolve(n,l,a)}),l}function mo(e,t,n,r=[]){let i=e,o=[];function s(a,p,f){n.system._sendInspectionEvent({type:\"@xstate.microstep\",actorRef:n.self,event:p,snapshot:a,_transitions:f}),o.push(a)}if(t.type===xt)return i=Tt(td(i,t,n),{status:\"stopped\"}),s(i,t,[]),{snapshot:i,microstates:o};let l=t;if(l.type!==rd){let a=l,p=Ym(a),f=nd(a,i);if(p&&!f.length)return i=Tt(e,{status:\"error\",error:a.error}),s(i,a,[]),{snapshot:i,microstates:o};i=uo(f,e,n,l,!1,r),s(i,a,f)}let u=!0;for(;i.status===\"active\";){let a=u?gv(i,l):[],p=a.length?i:void 0;if(!a.length){if(!r.length)break;l=r.shift(),a=nd(l,i)}i=uo(a,i,n,l,!1,r),u=i!==p,s(i,l,a)}return i.status!==\"active\"&&td(i,l,n),{snapshot:i,microstates:o}}function td(e,t,n){return Qt(e,t,n,Object.values(e.children).map(r=>Kt(r)),[])}function nd(e,t){return t.machine.getTransitionData(t,e)}function gv(e,t){let n=new Set,r=e._nodes.filter(eu);for(let i of r)e:for(let o of[i].concat(zr(i,void 0)))if(o.always){for(let s of o.always)if(s.guard===void 0||be(s.guard,e.context,t,e)){n.add(s);break e}}return Ed(Array.from(n),new Set(e._nodes),e.historyValue)}function Pd(e,t){let n=Rr(Xt(e,t));return yd(e,[...n])}function ru(e){return!!e&&typeof e==\"object\"&&\"machine\"in e&&\"value\"in e}var Sv=function(t){return ao(t,this.value)},wv=function(t){return this.tags.has(t)},_v=function(t){let n=this.machine.getTransitionData(this,t);return!!n?.length&&n.some(r=>r.target!==void 0||r.actions.length)},kv=function(){let{_nodes:t,tags:n,machine:r,getMeta:i,toJSON:o,can:s,hasTag:l,matches:u,...a}=this;return{...a,tags:Array.from(n)}},Ev=function(){return this._nodes.reduce((t,n)=>(n.meta!==void 0&&(t[n.id]=n.meta),t),{})};function Or(e,t){return{status:e.status,output:e.output,error:e.error,machine:t,context:e.context,_nodes:e._nodes,value:yd(t.root,e._nodes),tags:new Set(e._nodes.flatMap(n=>n.tags)),children:e.children,historyValue:e.historyValue||{},matches:Sv,hasTag:wv,can:_v,getMeta:Ev,toJSON:kv}}function Tt(e,t={}){return Or({...e,...t},e.machine)}function Id(e,t){let{_nodes:n,tags:r,machine:i,children:o,context:s,can:l,hasTag:u,matches:a,getMeta:p,toJSON:f,...d}=e,v={};for(let w in o){let T=o[w];v[w]={snapshot:T.getPersistedSnapshot(t),src:T.src,systemId:T._systemId,syncSnapshot:T._syncSnapshot}}return{...d,context:Nd(s),children:v}}function Nd(e){let t;for(let n in e){let r=e[n];if(r&&typeof r==\"object\")if(\"sessionId\"in r&&\"send\"in r&&\"ref\"in r)t??=Array.isArray(e)?e.slice():{...e},t[n]={xstate$$type:fo,id:r.id};else{let i=Nd(r);i!==r&&(t??=Array.isArray(e)?e.slice():{...e},t[n]=i)}}return t??e}function xv(e,t,n,r,{event:i,id:o,delay:s},{internalQueue:l}){let u=t.machine.implementations.delays;if(typeof i==\"string\")throw new Error(`Only event objects may be used with raise; use raise({ type: \"${i}\" }) instead`);let a=typeof i==\"function\"?i(n,r):i,p;if(typeof s==\"string\"){let f=u&&u[s];p=typeof f==\"function\"?f(n,r):f}else p=typeof s==\"function\"?s(n,r):s;return typeof p!=\"number\"&&l.push(a),[t,{event:a,id:o,delay:p}]}function Cv(e,t){let{event:n,delay:r,id:i}=t;if(typeof r==\"number\"){e.defer(()=>{let o=e.self;e.system.scheduler.schedule(o,o,n,r,i)});return}}function Lr(e,t){function n(r,i){}return n.type=\"xstate.raise\",n.event=e,n.id=t?.id,n.delay=t?.delay,n.resolve=xv,n.execute=Cv,n}function iu(e,t){return{config:e,transition:(n,r,i)=>({...n,context:e(n.context,r,i)}),getInitialSnapshot:(n,r)=>({status:\"active\",output:void 0,error:void 0,context:typeof t==\"function\"?t({input:r}):t}),getPersistedSnapshot:n=>n,restoreSnapshot:n=>n}}var zd=new WeakMap;function Ad(e){return{config:e,start:(n,r)=>{let{self:i,system:o}=r,s={receivers:void 0,dispose:void 0};zd.set(i,s),s.dispose=e({input:n.input,system:o,self:i,sendBack:l=>{i.getSnapshot().status!==\"stopped\"&&i._parent&&o._relay(i,i._parent,l)},receive:l=>{s.receivers??=new Set,s.receivers.add(l)}})},transition:(n,r,i)=>{let o=zd.get(i.self);return r.type===xt?(n={...n,status:\"stopped\",error:void 0},o.dispose?.(),n):(o.receivers?.forEach(s=>s(r)),n)},getInitialSnapshot:(n,r)=>({status:\"active\",output:void 0,error:void 0,input:r}),getPersistedSnapshot:n=>n,restoreSnapshot:n=>n}}var Rd=\"xstate.observable.next\",vo=\"xstate.observable.error\",yo=\"xstate.observable.complete\";function Md(e){return{config:e,transition:(n,r,{self:i,id:o,defer:s,system:l})=>{if(n.status!==\"active\")return n;switch(r.type){case Rd:return{...n,context:r.data};case vo:return{...n,status:\"error\",error:r.data,input:void 0,_subscription:void 0};case yo:return{...n,status:\"done\",input:void 0,_subscription:void 0};case xt:return n._subscription.unsubscribe(),{...n,status:\"stopped\",input:void 0,_subscription:void 0};default:return n}},getInitialSnapshot:(n,r)=>({status:\"active\",output:void 0,error:void 0,context:void 0,input:r,_subscription:void 0}),start:(n,{self:r,system:i})=>{n.status!==\"done\"&&(n._subscription=e({input:n.input,system:i,self:r}).subscribe({next:o=>{i._relay(r,r,{type:Rd,data:o})},error:o=>{i._relay(r,r,{type:vo,data:o})},complete:()=>{i._relay(r,r,{type:yo})}}))},getPersistedSnapshot:({_subscription:n,...r})=>r,restoreSnapshot:n=>({...n,_subscription:void 0})}}function Dd(e){return{config:e,transition:(n,r)=>{if(n.status!==\"active\")return n;switch(r.type){case vo:return{...n,status:\"error\",error:r.data,input:void 0,_subscription:void 0};case yo:return{...n,status:\"done\",input:void 0,_subscription:void 0};case xt:return n._subscription.unsubscribe(),{...n,status:\"stopped\",input:void 0,_subscription:void 0};default:return n}},getInitialSnapshot:(n,r)=>({status:\"active\",output:void 0,error:void 0,context:void 0,input:r,_subscription:void 0}),start:(n,{self:r,system:i})=>{n.status!==\"done\"&&(n._subscription=e({input:n.input,system:i,self:r}).subscribe({next:o=>{r._parent&&i._relay(r,r._parent,o)},error:o=>{i._relay(r,r,{type:vo,data:o})},complete:()=>{i._relay(r,r,{type:yo})}}))},getPersistedSnapshot:({_subscription:n,...r})=>r,restoreSnapshot:n=>({...n,_subscription:void 0})}}var Od=\"xstate.promise.resolve\",Ld=\"xstate.promise.reject\";function jd(e){return{config:e,transition:(n,r)=>{if(n.status!==\"active\")return n;switch(r.type){case Od:{let i=r.data;return{...n,status:\"done\",output:i,input:void 0}}case Ld:return{...n,status:\"error\",error:r.data,input:void 0};case xt:return{...n,status:\"stopped\",input:void 0};default:return n}},start:(n,{self:r,system:i})=>{if(n.status!==\"active\")return;Promise.resolve(e({input:n.input,system:i,self:r})).then(s=>{r.getSnapshot().status===\"active\"&&i._relay(r,r,{type:Od,data:s})},s=>{r.getSnapshot().status===\"active\"&&i._relay(r,r,{type:Ld,data:s})})},getInitialSnapshot:(n,r)=>({status:\"active\",output:void 0,error:void 0,input:r}),getPersistedSnapshot:n=>n,restoreSnapshot:n=>n}}var Tv=iu(e=>{},void 0);function $d(){return se(Tv)}function Pv(e,{machine:t,context:n},r,i){let o=(s,l={})=>{let{systemId:u,input:a}=l;if(typeof s==\"string\"){let p=Pr(t,s);if(!p)throw new Error(`Actor logic '${s}' not implemented in machine '${t.id}'`);let f=se(p,{id:l.id,parent:e.self,syncSnapshot:l.syncSnapshot,input:typeof a==\"function\"?a({context:n,event:r,self:e.self}):a,src:s,systemId:u});return i[f.id]=f,f}else return se(s,{id:l.id,parent:e.self,syncSnapshot:l.syncSnapshot,input:l.input,src:s,systemId:u})};return(s,l)=>{let u=o(s,l);return i[u.id]=u,e.defer(()=>{u._processingStatus!==te.Stopped&&u.start()}),u}}function Iv(e,t,n,r,{assignment:i}){if(!t.context)throw new Error(\"Cannot assign to undefined `context`. Ensure that `context` is defined in the machine config.\");let o={},s={context:t.context,event:n.event,spawn:Pv(e,t,n.event,o),self:e.self,system:e.system},l={};if(typeof i==\"function\")l=i(s,r);else for(let a of Object.keys(i)){let p=i[a];l[a]=typeof p==\"function\"?p(s,r):p}let u=Object.assign({},t.context,l);return[Tt(t,{context:u,children:Object.keys(o).length?{...t.children,...o}:t.children})]}function Mr(e){function t(n,r){}return t.type=\"xstate.assign\",t.assignment=e,t.resolve=Iv,t}function Nv(e,t,n,r,{event:i}){let o=typeof i==\"function\"?i(n,r):i;return[t,{event:o}]}function zv(e,{event:t}){e.defer(()=>e.emit(t))}function ou(e){function t(n,r){}return t.type=\"xstate.emit\",t.event=e,t.resolve=Nv,t.execute=zv,t}var Ar=function(e){return e.Parent=\"#_parent\",e.Internal=\"#_internal\",e}({});function Rv(e,t,n,r,{to:i,event:o,id:s,delay:l},u){let a=t.machine.implementations.delays;if(typeof o==\"string\")throw new Error(`Only event objects may be used with sendTo; use sendTo({ type: \"${o}\" }) instead`);let p=typeof o==\"function\"?o(n,r):o,f;if(typeof l==\"string\"){let y=a&&a[l];f=typeof y==\"function\"?y(n,r):y}else f=typeof l==\"function\"?l(n,r):l;let d=typeof i==\"function\"?i(n,r):i,v;if(typeof d==\"string\"){if(d===Ar.Parent?v=e.self._parent:d===Ar.Internal?v=e.self:d.startsWith(\"#_\")?v=t.children[d.slice(2)]:v=u.deferredActorIds?.includes(d)?d:t.children[d],!v)throw new Error(`Unable to send event to actor '${d}' from machine '${t.machine.id}'.`)}else v=d||e.self;return[t,{to:v,event:p,id:s,delay:f}]}function Ov(e,t,n){typeof n.to==\"string\"&&(n.to=t.children[n.to])}function Lv(e,t){e.defer(()=>{let{to:n,event:r,delay:i,id:o}=t;if(typeof i==\"number\"){e.system.scheduler.schedule(e.self,n,r,i,o);return}e.system._relay(e.self,n,r.type===id?Gl(e.self.id,r.data):r)})}function Dr(e,t,n){function r(i,o){}return r.type=\"xsnapshot.sendTo\",r.to=e,r.event=t,r.id=n?.id,r.delay=n?.delay,r.resolve=Rv,r.retryResolve=Ov,r.execute=Lv,r}function Fd(e,t){return Dr(Ar.Parent,e,t)}function Ud(e,t){return Dr(e,({event:n})=>n,t)}function Av(e,t,n,r,{collect:i}){let o=[],s=function(u){o.push(u)};return s.assign=(...l)=>{o.push(Mr(...l))},s.cancel=(...l)=>{o.push(Ir(...l))},s.raise=(...l)=>{o.push(Lr(...l))},s.sendTo=(...l)=>{o.push(Dr(...l))},s.spawnChild=(...l)=>{o.push(Nr(...l))},s.stopChild=(...l)=>{o.push(Kt(...l))},s.emit=(...l)=>{o.push(ou(...l))},i({context:n.context,event:n.event,enqueue:s,check:l=>be(l,t.context,n.event,t),self:e.self,system:e.system},r),[t,void 0,o]}function Vd(e){function t(n,r){}return t.type=\"xstate.enqueueActions\",t.collect=e,t.resolve=Av,t}function Mv(e,t,n,r,{value:i,label:o}){return[t,{value:typeof i==\"function\"?i(n,r):i,label:o}]}function Dv({logger:e},{value:t,label:n}){n?e(n,t):e(t)}function Bd(e=({context:n,event:r})=>({context:n,event:r}),t){function n(r,i){}return n.type=\"xstate.log\",n.value=e,n.label=t,n.resolve=Mv,n.execute=Dv,n}var su=class{constructor(){this.timeouts=new Map,this._now=0,this._id=0,this._flushing=!1,this._flushingInvalidated=!1}now(){return this._now}getId(){return this._id++}setTimeout(t,n){this._flushingInvalidated=this._flushing;let r=this.getId();return this.timeouts.set(r,{start:this.now(),timeout:n,fn:t}),r}clearTimeout(t){this._flushingInvalidated=this._flushing,this.timeouts.delete(t)}set(t){if(this._now>t)throw new Error(\"Unable to travel back in time\");this._now=t,this.flushTimeouts()}flushTimeouts(){if(this._flushing){this._flushingInvalidated=!0;return}this._flushing=!0;let t=[...this.timeouts].sort(([n,r],[i,o])=>{let s=r.start+r.timeout;return o.start+o.timeout>s?-1:1});for(let[n,r]of t){if(this._flushingInvalidated){this._flushingInvalidated=!1,this._flushing=!1,this.flushTimeouts();return}this.now()-r.start>=r.timeout&&(this.timeouts.delete(n),r.fn.call(null))}this._flushing=!1}increment(t){this._now+=t,this.flushTimeouts()}},Wd=new WeakMap;function Rn(e,t,n){let r=Wd.get(e);return r?t in r||(r[t]=n()):(r={[t]:n()},Wd.set(e,r)),r[t]}var jv={},jr=e=>typeof e==\"string\"?{type:e}:typeof e==\"function\"?\"resolve\"in e?{type:e.type}:{type:e.name}:e,go=class e{constructor(t,n){if(this.config=t,this.key=void 0,this.id=void 0,this.type=void 0,this.path=void 0,this.states=void 0,this.history=void 0,this.entry=void 0,this.exit=void 0,this.parent=void 0,this.machine=void 0,this.meta=void 0,this.output=void 0,this.order=-1,this.description=void 0,this.tags=[],this.transitions=void 0,this.always=void 0,this.parent=n._parent,this.key=n._key,this.machine=n._machine,this.path=this.parent?this.parent.path.concat(this.key):[],this.id=this.config.id||[this.machine.id,...this.path].join(Xl),this.type=this.config.type||(this.config.states&&Object.keys(this.config.states).length?\"compound\":this.config.history?\"history\":\"atomic\"),this.description=this.config.description,this.order=this.machine.idMap.size,this.machine.idMap.set(this.id,this),this.states=this.config.states?ql(this.config.states,(r,i)=>new e(r,{_parent:this,_key:i,_machine:this.machine})):jv,this.type===\"compound\"&&!this.config.initial)throw new Error(`No initial state specified for compound state node \"#${this.id}\". Try adding { initial: \"${Object.keys(this.states)[0]}\" } to the state config.`);this.history=this.config.history===!0?\"shallow\":this.config.history||!1,this.entry=Ve(this.config.entry).slice(),this.exit=Ve(this.config.exit).slice(),this.meta=this.config.meta,this.output=this.type===\"final\"||!this.parent?this.config.output:void 0,this.tags=Ve(t.tags).slice()}_initialize(){this.transitions=wd(this),this.config.always&&(this.always=Wt(this.config.always).map(t=>Et(this,Yl,t))),Object.keys(this.states).forEach(t=>{this.states[t]._initialize()})}get definition(){return{id:this.id,key:this.key,version:this.machine.version,type:this.type,initial:this.initial?{target:this.initial.target,source:this,actions:this.initial.actions.map(jr),eventType:null,reenter:!1,toJSON:()=>({target:this.initial.target.map(t=>`#${t.id}`),source:`#${this.id}`,actions:this.initial.actions.map(jr),eventType:null})}:void 0,history:this.history,states:ql(this.states,t=>t.definition),on:this.on,transitions:[...this.transitions.values()].flat().map(t=>({...t,actions:t.actions.map(jr)})),entry:this.entry.map(jr),exit:this.exit.map(jr),meta:this.meta,order:this.order||-1,output:this.output,invoke:this.invoke,description:this.description,tags:this.tags}}toJSON(){return this.definition}get invoke(){return Rn(this,\"invoke\",()=>Ve(this.config.invoke).map((t,n)=>{let{src:r,systemId:i}=t,o=t.id??bl(this.id,n),s=typeof r==\"string\"?r:`xstate.invoke.${bl(this.id,n)}`;return{...t,src:s,id:o,systemId:i,toJSON(){let{onDone:l,onError:u,...a}=t;return{...a,type:\"xstate.invoke\",src:s,id:o}}}}))}get on(){return Rn(this,\"on\",()=>[...this.transitions].flatMap(([n,r])=>r.map(i=>[n,i])).reduce((n,[r,i])=>(n[r]=n[r]||[],n[r].push(i),n),{}))}get after(){return Rn(this,\"delayedTransitions\",()=>Sd(this))}get initial(){return Rn(this,\"initial\",()=>_d(this,this.config.initial))}next(t,n){let r=n.type,i=[],o,s=Rn(this,`candidates-${r}`,()=>gd(this,r));for(let l of s){let{guard:u}=l,a=t.context,p=!1;try{p=!u||be(u,a,n,t)}catch(f){let d=typeof u==\"string\"?u:typeof u==\"object\"?u.type:void 0;throw new Error(`Unable to evaluate guard ${d?`'${d}' `:\"\"}in transition for event '${r}' in state node '${this.id}':\n${f.message}`)}if(p){i.push(...l.actions),o=l;break}}return o?[o]:void 0}get events(){return Rn(this,\"events\",()=>{let{states:t}=this,n=new Set(this.ownEvents);if(t)for(let r of Object.keys(t)){let i=t[r];if(i.states)for(let o of i.events)n.add(`${o}`)}return Array.from(n)})}get ownEvents(){let t=new Set([...this.transitions.keys()].filter(n=>this.transitions.get(n).some(r=>!(!r.target&&!r.actions.length&&!r.reenter))));return Array.from(t)}},$v=\"#\",So=class e{constructor(t,n){this.config=t,this.version=void 0,this.schemas=void 0,this.implementations=void 0,this.__xstatenode=!0,this.idMap=new Map,this.root=void 0,this.id=void 0,this.states=void 0,this.events=void 0,this.__TResolvedTypesMeta=void 0,this.id=t.id||\"(machine)\",this.implementations={actors:n?.actors??{},actions:n?.actions??{},delays:n?.delays??{},guards:n?.guards??{}},this.version=this.config.version,this.schemas=this.config.schemas,this.transition=this.transition.bind(this),this.getInitialSnapshot=this.getInitialSnapshot.bind(this),this.getPersistedSnapshot=this.getPersistedSnapshot.bind(this),this.restoreSnapshot=this.restoreSnapshot.bind(this),this.start=this.start.bind(this),this.root=new go(t,{_key:this.id,_machine:this}),this.root._initialize(),this.states=this.root.states,this.events=this.root.events}provide(t){let{actions:n,guards:r,actors:i,delays:o}=this.implementations;return new e(this.config,{actions:{...n,...t.actions},guards:{...r,...t.guards},actors:{...i,...t.actors},delays:{...o,...t.delays}})}resolveState(t){let n=Pd(this.root,t.value),r=Rr(Xt(this.root,n));return Or({_nodes:[...r],context:t.context||{},children:{},status:po(r,this.root)?\"done\":t.status||\"active\",output:t.output,error:t.error,historyValue:t.historyValue},this)}transition(t,n,r){return mo(t,n,r).snapshot}microstep(t,n,r){return mo(t,n,r).microstates}getTransitionData(t,n){return ho(this.root,t.value,t,n)||[]}getPreInitialState(t,n,r){let{context:i}=this.config,o=Or({context:typeof i!=\"function\"&&i?i:{},_nodes:[this.root],children:{},status:\"active\"},this);return typeof i==\"function\"?Qt(o,n,t,[Mr(({spawn:l,event:u,self:a})=>i({spawn:l,input:u.input,self:a}))],r):o}getInitialSnapshot(t,n){let r=Jl(n),i=[],o=this.getPreInitialState(t,r,i),s=uo([{target:[...tu(this.root)],source:this.root,reenter:!0,actions:[],eventType:null,toJSON:null}],o,t,r,!0,i),{snapshot:l}=mo(s,r,t,i);return l}start(t){Object.values(t.children).forEach(n=>{n.getSnapshot().status===\"active\"&&n.start()})}getStateNodeById(t){let n=co(t),r=n.slice(1),i=zn(n[0])?n[0].slice($v.length):n[0],o=this.idMap.get(i);if(!o)throw new Error(`Child state node '#${i}' does not exist on machine '${this.id}'`);return Tr(o,r)}get definition(){return this.root.definition}toJSON(){return this.definition}getPersistedSnapshot(t,n){return Id(t,n)}restoreSnapshot(t,n){let r={},i=t.children;Object.keys(i).forEach(u=>{let a=i[u],p=a.snapshot,f=a.src,d=typeof f==\"string\"?Pr(this,f):f;if(!d)return;let v=se(d,{id:u,parent:n.self,syncSnapshot:a.syncSnapshot,snapshot:p,src:f,systemId:a.systemId});r[u]=v});let o=Or({...t,children:r,_nodes:Array.from(Rr(Xt(this.root,t.value)))},this),s=new Set;function l(u,a){if(!s.has(u)){s.add(u);for(let p in u){let f=u[p];if(f&&typeof f==\"object\"){if(\"xstate$$type\"in f&&f.xstate$$type===fo){u[p]=a[f.id];continue}l(f,a)}}}}return l(o.context,r),o}},Fv={timeout:1/0};function Uv(e,t,n){let r={...Fv,...n};return new Promise((i,o)=>{let s=!1,l=r.timeout===1/0?void 0:setTimeout(()=>{p.unsubscribe(),o(new Error(`Timeout of ${r.timeout} ms exceeded`))},r.timeout),u=()=>{clearTimeout(l),s=!0,p?.unsubscribe()};function a(f){t(f)&&(u(),i(f))}let p;a(e.getSnapshot()),!s&&(p=e.subscribe({next:a,error:f=>{u(),o(f)},complete:()=>{u(),o(new Error(\"Actor terminated without satisfying predicate\"))}}),s&&p.unsubscribe())})}function Hd(e,t){return new So(e,t)}function Qd(e){let t=se(e);return{self:t,defer:()=>{},id:\"\",logger:()=>{},sessionId:\"\",stopChild:()=>{},system:t.system,emit:()=>{}}}function Vv(e,...[t]){let n=Qd(e);return e.getInitialSnapshot(n,t)}function Bv(e,t,n){let r=Qd(e);return r.self._snapshot=t,e.transition(t,n,r)}function Wv({schemas:e,actors:t,actions:n,guards:r,delays:i}){return{createMachine:o=>Hd({...o,schemas:e},{actors:t,actions:n,guards:r,delays:i})}}function Hv(e){return new Promise((t,n)=>{e.subscribe({complete:()=>{t(e.getSnapshot().output)},error:n})})}function Qv(e,t){let n=Ve(t);if(!n.includes(e.type)){let r=n.length===1?`type \"${n[0]}\"`:`one of types \"${n.join('\", \"')}\"`;throw new Error(`Expected event ${JSON.stringify(e)} to have ${r}`)}}var qd=Pt(Gd()),bd=(e,t)=>{t(e);let n=e.getSnapshot().children;n&&Object.values(n).forEach(r=>{bd(r,t)})};function ep(e){let t=[];bd(e,r=>{t.push([r,r.getSnapshot()]),r.observers=new Set});let n=e.system.getSnapshot?.();e.stop(),e.system._snapshot=n,t.forEach(([r,i])=>{r._processingStatus=0,r._snapshot=i})}function tp(e,t){let[[n,r],i]=(0,Ae.useState)(()=>{let o=se(e,t);return[e.config,o]});if(e.config!==n){let o=se(e,{...t,snapshot:r.getPersistedSnapshot({__unsafeAllowInlineActors:!0})});i([e.config,o]),r=o}return Jf(()=>{r.logic.implementations=e.implementations}),r}function np(e,t={},n){let r=tp(e,t);return(0,Ae.useEffect)(()=>{if(!n)return;let i=r.subscribe(Pn(n));return()=>{i.unsubscribe()}},[n]),(0,Ae.useEffect)(()=>(r.start(),()=>{ep(r)}),[r]),r}function rp(e,t={}){let n=tp(e,t),r=(0,Ae.useCallback)(()=>n.getSnapshot(),[n]),i=(0,Ae.useCallback)(s=>{let{unsubscribe:l}=n.subscribe(s);return l},[n]),o=(0,Zd.useSyncExternalStore)(i,r,r);return(0,Ae.useEffect)(()=>(n.start(),()=>{ep(n)}),[n]),[o,n.send,n]}function ey(e,t){return e===t}function ip(e,t,n=ey){let r=(0,Ae.useCallback)(s=>{if(!e)return()=>{};let{unsubscribe:l}=e.subscribe(s);return l},[e]),i=(0,Ae.useCallback)(()=>e?.getSnapshot(),[e]);return(0,qd.useSyncExternalStoreWithSelector)(r,i,i,t,n)}function Jd(e,t){return e===t?e!==0||t!==0||1/e===1/t:e!==e&&t!==t}function ty(e,t){if(Jd(e,t))return!0;if(typeof e!=\"object\"||e===null||typeof t!=\"object\"||t===null)return!1;let n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(let i=0;i<n.length;i++)if(!Object.prototype.hasOwnProperty.call(t,n[i])||!Jd(e[n[i]],t[n[i]]))return!1;return!0}function ny(e,t){let n=On.createContext(null),r=n.Provider;function i({children:l,logic:u=e,machine:a,options:p}){if(a)throw new Error('The \"machine\" prop has been deprecated. Please use \"logic\" instead.');let f=np(u,{...t,...p});return On.createElement(r,{value:f,children:l})}i.displayName=\"ActorProvider\";function o(){let l=On.useContext(n);if(!l)throw new Error(`You used a hook from \"${i.displayName}\" but it's not inside a <${i.displayName}> component.`);return l}function s(l,u){let a=o();return ip(a,l,u)}return{Provider:i,useActorRef:o,useSelector:s}}function ry(e,t={}){return rp(e,t)}var sy={\"react-dom/client\":iy,react:oy,\"@xstate/react\":uu,xstate:lu},ly=sy;\n/*! Bundled license information:\n\nreact/cjs/react.production.min.js:\n  (**\n   * @license React\n   * react.production.min.js\n   *\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *)\n\nscheduler/cjs/scheduler.production.min.js:\n  (**\n   * @license React\n   * scheduler.production.min.js\n   *\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *)\n\nreact-dom/cjs/react-dom.production.min.js:\n  (**\n   * @license React\n   * react-dom.production.min.js\n   *\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *)\n\nuse-sync-external-store/cjs/use-sync-external-store-shim.production.min.js:\n  (**\n   * @license React\n   * use-sync-external-store-shim.production.min.js\n   *\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *)\n\nuse-sync-external-store/cjs/use-sync-external-store-shim/with-selector.production.min.js:\n  (**\n   * @license React\n   * use-sync-external-store-shim/with-selector.production.min.js\n   *\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *)\n*/\n","externals":["react-dom/client","react","@xstate/react","xstate"]}}